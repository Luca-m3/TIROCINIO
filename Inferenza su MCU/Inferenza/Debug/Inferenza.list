
Inferenza.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d860  080001c0  080001c0  000011c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000ff2c4  0800da20  0800da20  0000ea20  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0810cce4  0810cce4  0010ea60  2**0
                  CONTENTS
  4 .ARM          00000008  0810cce4  0810cce4  0010dce4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0810ccec  0810ccec  0010ea60  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0810ccec  0810ccec  0010dcec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0810ccf0  0810ccf0  0010dcf0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000a60  20000000  0810ccf4  0010e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00007d00  20000a60  0810d754  0010ea60  2**5
                  ALLOC
 10 ._user_heap_stack 00011000  20040000  20040000  0010f000  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0010ea60  2**0
                  CONTENTS, READONLY
 12 .debug_info   000167bf  00000000  00000000  0010ea90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000036cc  00000000  00000000  0012524f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000014d8  00000000  00000000  00128920  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000fe3  00000000  00000000  00129df8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00034f67  00000000  00000000  0012addb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001b138  00000000  00000000  0015fd42  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00137987  00000000  00000000  0017ae7a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000086  00000000  00000000  002b2801  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005c28  00000000  00000000  002b2888  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000052  00000000  00000000  002b84b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	@ (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	@ (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	20000a60 	.word	0x20000a60
 80001dc:	00000000 	.word	0x00000000
 80001e0:	0800da08 	.word	0x0800da08

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	@ (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	@ (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	@ (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	20000a64 	.word	0x20000a64
 80001fc:	0800da08 	.word	0x0800da08

08000200 <strlen>:
 8000200:	4603      	mov	r3, r0
 8000202:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000206:	2a00      	cmp	r2, #0
 8000208:	d1fb      	bne.n	8000202 <strlen+0x2>
 800020a:	1a18      	subs	r0, r3, r0
 800020c:	3801      	subs	r0, #1
 800020e:	4770      	bx	lr

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	@ 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__aeabi_d2f>:
 8000a4c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a50:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000a54:	bf24      	itt	cs
 8000a56:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a5a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a5e:	d90d      	bls.n	8000a7c <__aeabi_d2f+0x30>
 8000a60:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000a64:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a68:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a6c:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000a70:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a74:	bf08      	it	eq
 8000a76:	f020 0001 	biceq.w	r0, r0, #1
 8000a7a:	4770      	bx	lr
 8000a7c:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000a80:	d121      	bne.n	8000ac6 <__aeabi_d2f+0x7a>
 8000a82:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000a86:	bfbc      	itt	lt
 8000a88:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000a8c:	4770      	bxlt	lr
 8000a8e:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a92:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a96:	f1c2 0218 	rsb	r2, r2, #24
 8000a9a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a9e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000aa2:	fa20 f002 	lsr.w	r0, r0, r2
 8000aa6:	bf18      	it	ne
 8000aa8:	f040 0001 	orrne.w	r0, r0, #1
 8000aac:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ab0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ab4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ab8:	ea40 000c 	orr.w	r0, r0, ip
 8000abc:	fa23 f302 	lsr.w	r3, r3, r2
 8000ac0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ac4:	e7cc      	b.n	8000a60 <__aeabi_d2f+0x14>
 8000ac6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000aca:	d107      	bne.n	8000adc <__aeabi_d2f+0x90>
 8000acc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ad0:	bf1e      	ittt	ne
 8000ad2:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000ad6:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000ada:	4770      	bxne	lr
 8000adc:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000ae0:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ae4:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ae8:	4770      	bx	lr
 8000aea:	bf00      	nop

08000aec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000aec:	b5b0      	push	{r4, r5, r7, lr}
 8000aee:	b0f2      	sub	sp, #456	@ 0x1c8
 8000af0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000af2:	f001 f92a 	bl	8001d4a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000af6:	f000 fa4f 	bl	8000f98 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000afa:	f000 fb15 	bl	8001128 <MX_GPIO_Init>
  MX_SDMMC1_SD_Init();
 8000afe:	f000 fa9d 	bl	800103c <MX_SDMMC1_SD_Init>
  MX_FATFS_Init();
 8000b02:	f007 f819 	bl	8007b38 <MX_FATFS_Init>
  MX_TIM1_Init();
 8000b06:	f000 fabb 	bl	8001080 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  //creazione della rete e dei buffer di input ed output
   if (aiInit() != 0)
 8000b0a:	f000 fe39 	bl	8001780 <aiInit>
 8000b0e:	4603      	mov	r3, r0
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d001      	beq.n	8000b18 <main+0x2c>
     	  {
     		  Error_Handler();
 8000b14:	f000 ff8a 	bl	8001a2c <Error_Handler>
     	  }
   FRESULT er = FR_OK;
 8000b18:	2300      	movs	r3, #0
 8000b1a:	f887 31a3 	strb.w	r3, [r7, #419]	@ 0x1a3


   //montaggio della scheda SD
   er = f_mount(&SDFatFS, (TCHAR const*)SDPath, 0);
 8000b1e:	2200      	movs	r2, #0
 8000b20:	49ce      	ldr	r1, [pc, #824]	@ (8000e5c <main+0x370>)
 8000b22:	48cf      	ldr	r0, [pc, #828]	@ (8000e60 <main+0x374>)
 8000b24:	f008 ff92 	bl	8009a4c <f_mount>
 8000b28:	4603      	mov	r3, r0
 8000b2a:	f887 31a3 	strb.w	r3, [r7, #419]	@ 0x1a3
   if(er != FR_OK)
 8000b2e:	f897 31a3 	ldrb.w	r3, [r7, #419]	@ 0x1a3
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d001      	beq.n	8000b3a <main+0x4e>
   {
    	  	   	Error_Handler();
 8000b36:	f000 ff79 	bl	8001a2c <Error_Handler>
   }

   strcpy (buf, "rete analizzata: ");
 8000b3a:	4aca      	ldr	r2, [pc, #808]	@ (8000e64 <main+0x378>)
 8000b3c:	4bca      	ldr	r3, [pc, #808]	@ (8000e68 <main+0x37c>)
 8000b3e:	4614      	mov	r4, r2
 8000b40:	461d      	mov	r5, r3
 8000b42:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b44:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b46:	682b      	ldr	r3, [r5, #0]
 8000b48:	8023      	strh	r3, [r4, #0]
   w_report (buf, strlen(buf));
 8000b4a:	48c6      	ldr	r0, [pc, #792]	@ (8000e64 <main+0x378>)
 8000b4c:	f7ff fb58 	bl	8000200 <strlen>
 8000b50:	4603      	mov	r3, r0
 8000b52:	4619      	mov	r1, r3
 8000b54:	48c3      	ldr	r0, [pc, #780]	@ (8000e64 <main+0x378>)
 8000b56:	f000 ff31 	bl	80019bc <w_report>
   int lung_stringa = strlen(AI_MODEL_ORIGIN_MODEL_NAME);
 8000b5a:	2305      	movs	r3, #5
 8000b5c:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
   w_report(AI_MODEL_ORIGIN_MODEL_NAME, lung_stringa);
 8000b60:	f8d7 119c 	ldr.w	r1, [r7, #412]	@ 0x19c
 8000b64:	48c1      	ldr	r0, [pc, #772]	@ (8000e6c <main+0x380>)
 8000b66:	f000 ff29 	bl	80019bc <w_report>

   er = f_open(&file_in, F_INPUT, FA_READ);
 8000b6a:	2201      	movs	r2, #1
 8000b6c:	49c0      	ldr	r1, [pc, #768]	@ (8000e70 <main+0x384>)
 8000b6e:	48c1      	ldr	r0, [pc, #772]	@ (8000e74 <main+0x388>)
 8000b70:	f008 ffb2 	bl	8009ad8 <f_open>
 8000b74:	4603      	mov	r3, r0
 8000b76:	f887 31a3 	strb.w	r3, [r7, #419]	@ 0x1a3
   if(er != FR_OK)
 8000b7a:	f897 31a3 	ldrb.w	r3, [r7, #419]	@ 0x1a3
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d001      	beq.n	8000b86 <main+0x9a>
   {
   	Error_Handler();
 8000b82:	f000 ff53 	bl	8001a2c <Error_Handler>
   }
   long int f_lung = f_size(&file_in); //salvo la lunghezza del vettore di input
 8000b86:	4bbb      	ldr	r3, [pc, #748]	@ (8000e74 <main+0x388>)
 8000b88:	68db      	ldr	r3, [r3, #12]
 8000b8a:	f8c7 3198 	str.w	r3, [r7, #408]	@ 0x198
   er = f_close(&file_in);
 8000b8e:	48b9      	ldr	r0, [pc, #740]	@ (8000e74 <main+0x388>)
 8000b90:	f009 fc8e 	bl	800a4b0 <f_close>
 8000b94:	4603      	mov	r3, r0
 8000b96:	f887 31a3 	strb.w	r3, [r7, #419]	@ 0x1a3
   if(er != FR_OK)
 8000b9a:	f897 31a3 	ldrb.w	r3, [r7, #419]	@ 0x1a3
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d001      	beq.n	8000ba6 <main+0xba>
   {
   	Error_Handler();
 8000ba2:	f000 ff43 	bl	8001a2c <Error_Handler>
   }

   /*definisco il numero di chunk da processare e creo il vettore prec
   per il passaggi da un chunk all'altro*/

   long int n_float = f_lung / sizeof(ai_float);
 8000ba6:	f8d7 3198 	ldr.w	r3, [r7, #408]	@ 0x198
 8000baa:	089b      	lsrs	r3, r3, #2
 8000bac:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
   int max_chunk = n_float / 10000;
 8000bb0:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8000bb4:	4ab0      	ldr	r2, [pc, #704]	@ (8000e78 <main+0x38c>)
 8000bb6:	fb82 1203 	smull	r1, r2, r2, r3
 8000bba:	1312      	asrs	r2, r2, #12
 8000bbc:	17db      	asrs	r3, r3, #31
 8000bbe:	1ad3      	subs	r3, r2, r3
 8000bc0:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
   int c_corrente = 0;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
   ai_float* ingresso;
   IN_TYPE* val;
   ai_float prec[AI_MODEL_IN_1_SIZE - 1];
   for(int k = 0; k < AI_MODEL_IN_1_SIZE - 1; k++)
 8000bca:	2300      	movs	r3, #0
 8000bcc:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8000bd0:	e00f      	b.n	8000bf2 <main+0x106>
 	  prec[k] = 0;
 8000bd2:	f507 73e4 	add.w	r3, r7, #456	@ 0x1c8
 8000bd6:	f5a3 72e4 	sub.w	r2, r3, #456	@ 0x1c8
 8000bda:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 8000bde:	009b      	lsls	r3, r3, #2
 8000be0:	4413      	add	r3, r2
 8000be2:	f04f 0200 	mov.w	r2, #0
 8000be6:	601a      	str	r2, [r3, #0]
   for(int k = 0; k < AI_MODEL_IN_1_SIZE - 1; k++)
 8000be8:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 8000bec:	3301      	adds	r3, #1
 8000bee:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8000bf2:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 8000bf6:	2b61      	cmp	r3, #97	@ 0x61
 8000bf8:	ddeb      	ble.n	8000bd2 <main+0xe6>

   sprintf(buf, "\nnumero di valori in ingresso: %ld\n", n_float);
 8000bfa:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 8000bfe:	499f      	ldr	r1, [pc, #636]	@ (8000e7c <main+0x390>)
 8000c00:	4898      	ldr	r0, [pc, #608]	@ (8000e64 <main+0x378>)
 8000c02:	f00c fb3d 	bl	800d280 <siprintf>
   w_report(buf, strlen(buf));
 8000c06:	4897      	ldr	r0, [pc, #604]	@ (8000e64 <main+0x378>)
 8000c08:	f7ff fafa 	bl	8000200 <strlen>
 8000c0c:	4603      	mov	r3, r0
 8000c0e:	4619      	mov	r1, r3
 8000c10:	4894      	ldr	r0, [pc, #592]	@ (8000e64 <main+0x378>)
 8000c12:	f000 fed3 	bl	80019bc <w_report>

   HAL_GPIO_WritePin(GPIOE, LED1_Pin|DCDC_2_EN_Pin, GPIO_PIN_SET); //accende un led che indica che il chip sta processando gli input
 8000c16:	2201      	movs	r2, #1
 8000c18:	f242 0102 	movw	r1, #8194	@ 0x2002
 8000c1c:	4898      	ldr	r0, [pc, #608]	@ (8000e80 <main+0x394>)
 8000c1e:	f001 fbe9 	bl	80023f4 <HAL_GPIO_WritePin>

   strcpy (buf, "\ntempo di run di ogni inferenza:\n");
 8000c22:	4a90      	ldr	r2, [pc, #576]	@ (8000e64 <main+0x378>)
 8000c24:	4b97      	ldr	r3, [pc, #604]	@ (8000e84 <main+0x398>)
 8000c26:	4614      	mov	r4, r2
 8000c28:	461d      	mov	r5, r3
 8000c2a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c2c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c2e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c30:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c32:	682b      	ldr	r3, [r5, #0]
 8000c34:	8023      	strh	r3, [r4, #0]
   lung_stringa = strlen(buf);
 8000c36:	488b      	ldr	r0, [pc, #556]	@ (8000e64 <main+0x378>)
 8000c38:	f7ff fae2 	bl	8000200 <strlen>
 8000c3c:	4603      	mov	r3, r0
 8000c3e:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
   w_report(buf, lung_stringa);
 8000c42:	f8d7 119c 	ldr.w	r1, [r7, #412]	@ 0x19c
 8000c46:	4887      	ldr	r0, [pc, #540]	@ (8000e64 <main+0x378>)
 8000c48:	f000 feb8 	bl	80019bc <w_report>

   while(c_corrente < max_chunk)
 8000c4c:	e0b2      	b.n	8000db4 <main+0x2c8>
   {
 	  /*allocazione memoria e riempimento del vettore di imput di un determinato chunk*/
 	  ingresso = malloc(sizeof(ai_float) * (10000 + AI_MODEL_IN_1_SIZE - 1));
 8000c4e:	f649 50c8 	movw	r0, #40392	@ 0x9dc8
 8000c52:	f00c fa29 	bl	800d0a8 <malloc>
 8000c56:	4603      	mov	r3, r0
 8000c58:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
 	  for(int k = 0; k < AI_MODEL_IN_1_SIZE - 1; k++)
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 8000c62:	e014      	b.n	8000c8e <main+0x1a2>
 	  		  ingresso[k] = prec[k];
 8000c64:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 8000c68:	009b      	lsls	r3, r3, #2
 8000c6a:	f8d7 218c 	ldr.w	r2, [r7, #396]	@ 0x18c
 8000c6e:	4413      	add	r3, r2
 8000c70:	f507 72e4 	add.w	r2, r7, #456	@ 0x1c8
 8000c74:	f5a2 71e4 	sub.w	r1, r2, #456	@ 0x1c8
 8000c78:	f8d7 21bc 	ldr.w	r2, [r7, #444]	@ 0x1bc
 8000c7c:	0092      	lsls	r2, r2, #2
 8000c7e:	440a      	add	r2, r1
 8000c80:	6812      	ldr	r2, [r2, #0]
 8000c82:	601a      	str	r2, [r3, #0]
 	  for(int k = 0; k < AI_MODEL_IN_1_SIZE - 1; k++)
 8000c84:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 8000c88:	3301      	adds	r3, #1
 8000c8a:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 8000c8e:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 8000c92:	2b61      	cmp	r3, #97	@ 0x61
 8000c94:	dde6      	ble.n	8000c64 <main+0x178>

 	  er = read_from_sd(10000, ingresso, c_corrente);
 8000c96:	f8d7 21c4 	ldr.w	r2, [r7, #452]	@ 0x1c4
 8000c9a:	f8d7 118c 	ldr.w	r1, [r7, #396]	@ 0x18c
 8000c9e:	f242 7010 	movw	r0, #10000	@ 0x2710
 8000ca2:	f000 fe09 	bl	80018b8 <read_from_sd>
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	f887 31a3 	strb.w	r3, [r7, #419]	@ 0x1a3
 	  if(er != FR_OK)
 8000cac:	f897 31a3 	ldrb.w	r3, [r7, #419]	@ 0x1a3
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d001      	beq.n	8000cb8 <main+0x1cc>
 	  {
    	    	  Error_Handler();
 8000cb4:	f000 feba 	bl	8001a2c <Error_Handler>
 	  }
 	  /*riempimento vettore prec per il chunk successivo*/
 	  for(int k = 0; k < AI_MODEL_IN_1_SIZE - 1; k++)
 8000cb8:	2300      	movs	r3, #0
 8000cba:	f8c7 31b8 	str.w	r3, [r7, #440]	@ 0x1b8
 8000cbe:	e017      	b.n	8000cf0 <main+0x204>
 	  	  		  prec[k] = ingresso[10000 + k];
 8000cc0:	f8d7 31b8 	ldr.w	r3, [r7, #440]	@ 0x1b8
 8000cc4:	f503 531c 	add.w	r3, r3, #9984	@ 0x2700
 8000cc8:	3310      	adds	r3, #16
 8000cca:	009b      	lsls	r3, r3, #2
 8000ccc:	f8d7 218c 	ldr.w	r2, [r7, #396]	@ 0x18c
 8000cd0:	4413      	add	r3, r2
 8000cd2:	681a      	ldr	r2, [r3, #0]
 8000cd4:	f507 73e4 	add.w	r3, r7, #456	@ 0x1c8
 8000cd8:	f5a3 71e4 	sub.w	r1, r3, #456	@ 0x1c8
 8000cdc:	f8d7 31b8 	ldr.w	r3, [r7, #440]	@ 0x1b8
 8000ce0:	009b      	lsls	r3, r3, #2
 8000ce2:	440b      	add	r3, r1
 8000ce4:	601a      	str	r2, [r3, #0]
 	  for(int k = 0; k < AI_MODEL_IN_1_SIZE - 1; k++)
 8000ce6:	f8d7 31b8 	ldr.w	r3, [r7, #440]	@ 0x1b8
 8000cea:	3301      	adds	r3, #1
 8000cec:	f8c7 31b8 	str.w	r3, [r7, #440]	@ 0x1b8
 8000cf0:	f8d7 31b8 	ldr.w	r3, [r7, #440]	@ 0x1b8
 8000cf4:	2b61      	cmp	r3, #97	@ 0x61
 8000cf6:	dde3      	ble.n	8000cc0 <main+0x1d4>

 	  /*standardizzazione dell'imput e quantizzazione, se necessaria*/
 	  if (STANDARDIZZAZIONE)
 	  {
 		  for(int i = 0; i < 10000 + AI_MODEL_IN_1_SIZE - 1; i++)
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
 8000cfe:	e02a      	b.n	8000d56 <main+0x26a>
 			  ingresso[i] = (ingresso[i] - MEDIA) / VARIANZA;
 8000d00:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 8000d04:	009b      	lsls	r3, r3, #2
 8000d06:	f8d7 218c 	ldr.w	r2, [r7, #396]	@ 0x18c
 8000d0a:	4413      	add	r3, r2
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	4618      	mov	r0, r3
 8000d10:	f7ff fc32 	bl	8000578 <__aeabi_f2d>
 8000d14:	f04f 0200 	mov.w	r2, #0
 8000d18:	4b5b      	ldr	r3, [pc, #364]	@ (8000e88 <main+0x39c>)
 8000d1a:	f7ff facd 	bl	80002b8 <__aeabi_dsub>
 8000d1e:	4602      	mov	r2, r0
 8000d20:	460b      	mov	r3, r1
 8000d22:	4610      	mov	r0, r2
 8000d24:	4619      	mov	r1, r3
 8000d26:	f04f 0200 	mov.w	r2, #0
 8000d2a:	4b58      	ldr	r3, [pc, #352]	@ (8000e8c <main+0x3a0>)
 8000d2c:	f7ff fda6 	bl	800087c <__aeabi_ddiv>
 8000d30:	4602      	mov	r2, r0
 8000d32:	460b      	mov	r3, r1
 8000d34:	4610      	mov	r0, r2
 8000d36:	4619      	mov	r1, r3
 8000d38:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 8000d3c:	009b      	lsls	r3, r3, #2
 8000d3e:	f8d7 218c 	ldr.w	r2, [r7, #396]	@ 0x18c
 8000d42:	18d4      	adds	r4, r2, r3
 8000d44:	f7ff fe82 	bl	8000a4c <__aeabi_d2f>
 8000d48:	4603      	mov	r3, r0
 8000d4a:	6023      	str	r3, [r4, #0]
 		  for(int i = 0; i < 10000 + AI_MODEL_IN_1_SIZE - 1; i++)
 8000d4c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 8000d50:	3301      	adds	r3, #1
 8000d52:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
 8000d56:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 8000d5a:	f242 7271 	movw	r2, #10097	@ 0x2771
 8000d5e:	4293      	cmp	r3, r2
 8000d60:	ddce      	ble.n	8000d00 <main+0x214>
 			  Error_Handler();
 		  free (ingresso);
 	  }
 	  else
 	  {
 		  val = ingresso;
 8000d62:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 8000d66:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
 	  }

 	  /*run del chnk corrente*/
 	  for(int j = 0; j < 10000; j++)
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
 8000d70:	e011      	b.n	8000d96 <main+0x2aa>
 	  {
 		  if (net_run(in_data, j, val, out_data) != 0)
 8000d72:	4b47      	ldr	r3, [pc, #284]	@ (8000e90 <main+0x3a4>)
 8000d74:	f8d7 2188 	ldr.w	r2, [r7, #392]	@ 0x188
 8000d78:	f8d7 11b0 	ldr.w	r1, [r7, #432]	@ 0x1b0
 8000d7c:	4845      	ldr	r0, [pc, #276]	@ (8000e94 <main+0x3a8>)
 8000d7e:	f000 fd53 	bl	8001828 <net_run>
 8000d82:	4603      	mov	r3, r0
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d001      	beq.n	8000d8c <main+0x2a0>
 			  Error_Handler();
 8000d88:	f000 fe50 	bl	8001a2c <Error_Handler>
 	  for(int j = 0; j < 10000; j++)
 8000d8c:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 8000d90:	3301      	adds	r3, #1
 8000d92:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
 8000d96:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 8000d9a:	f242 720f 	movw	r2, #9999	@ 0x270f
 8000d9e:	4293      	cmp	r3, r2
 8000da0:	dde7      	ble.n	8000d72 <main+0x286>

 	  }
 	  free(val);
 8000da2:	f8d7 0188 	ldr.w	r0, [r7, #392]	@ 0x188
 8000da6:	f00c f987 	bl	800d0b8 <free>
 	  c_corrente ++;
 8000daa:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 8000dae:	3301      	adds	r3, #1
 8000db0:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
   while(c_corrente < max_chunk)
 8000db4:	f8d7 21c4 	ldr.w	r2, [r7, #452]	@ 0x1c4
 8000db8:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8000dbc:	429a      	cmp	r2, r3
 8000dbe:	f6ff af46 	blt.w	8000c4e <main+0x162>
   }
 /*operazioni effettuate per l'ultimo chunk*/
   if((c_corrente == max_chunk)||(max_chunk == 0))
 8000dc2:	f8d7 21c4 	ldr.w	r2, [r7, #452]	@ 0x1c4
 8000dc6:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8000dca:	429a      	cmp	r2, r3
 8000dcc:	d004      	beq.n	8000dd8 <main+0x2ec>
 8000dce:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	f040 80bc 	bne.w	8000f50 <main+0x464>
   {
 	  n_float = n_float - (max_chunk * 10000) + AI_MODEL_IN_1_SIZE - 1;
 8000dd8:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8000ddc:	4a2e      	ldr	r2, [pc, #184]	@ (8000e98 <main+0x3ac>)
 8000dde:	fb03 f202 	mul.w	r2, r3, r2
 8000de2:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8000de6:	4413      	add	r3, r2
 8000de8:	3362      	adds	r3, #98	@ 0x62
 8000dea:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
 	  ingresso = malloc(sizeof(ai_float) * n_float);
 8000dee:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8000df2:	009b      	lsls	r3, r3, #2
 8000df4:	4618      	mov	r0, r3
 8000df6:	f00c f957 	bl	800d0a8 <malloc>
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
 	  for(int k = 0; k < AI_MODEL_IN_1_SIZE - 1; k++)
 8000e00:	2300      	movs	r3, #0
 8000e02:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
 8000e06:	e014      	b.n	8000e32 <main+0x346>
 	  		  ingresso[k] = prec[k];
 8000e08:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 8000e0c:	009b      	lsls	r3, r3, #2
 8000e0e:	f8d7 218c 	ldr.w	r2, [r7, #396]	@ 0x18c
 8000e12:	4413      	add	r3, r2
 8000e14:	f507 72e4 	add.w	r2, r7, #456	@ 0x1c8
 8000e18:	f5a2 71e4 	sub.w	r1, r2, #456	@ 0x1c8
 8000e1c:	f8d7 21ac 	ldr.w	r2, [r7, #428]	@ 0x1ac
 8000e20:	0092      	lsls	r2, r2, #2
 8000e22:	440a      	add	r2, r1
 8000e24:	6812      	ldr	r2, [r2, #0]
 8000e26:	601a      	str	r2, [r3, #0]
 	  for(int k = 0; k < AI_MODEL_IN_1_SIZE - 1; k++)
 8000e28:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 8000e2c:	3301      	adds	r3, #1
 8000e2e:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
 8000e32:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 8000e36:	2b61      	cmp	r3, #97	@ 0x61
 8000e38:	dde6      	ble.n	8000e08 <main+0x31c>

 	  er = read_from_sd(n_float - AI_MODEL_IN_1_SIZE - 1, ingresso, c_corrente);
 8000e3a:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8000e3e:	3b64      	subs	r3, #100	@ 0x64
 8000e40:	f8d7 21c4 	ldr.w	r2, [r7, #452]	@ 0x1c4
 8000e44:	f8d7 118c 	ldr.w	r1, [r7, #396]	@ 0x18c
 8000e48:	4618      	mov	r0, r3
 8000e4a:	f000 fd35 	bl	80018b8 <read_from_sd>
 8000e4e:	4603      	mov	r3, r0
 8000e50:	f887 31a3 	strb.w	r3, [r7, #419]	@ 0x1a3

 	  if (STANDARDIZZAZIONE)
 	  {
 	  		  for(int k = 0; k < sizeof(ingresso); k++)
 8000e54:	2300      	movs	r3, #0
 8000e56:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
 8000e5a:	e04a      	b.n	8000ef2 <main+0x406>
 8000e5c:	20008318 	.word	0x20008318
 8000e60:	2000831c 	.word	0x2000831c
 8000e64:	200011d8 	.word	0x200011d8
 8000e68:	0800da20 	.word	0x0800da20
 8000e6c:	0800da34 	.word	0x0800da34
 8000e70:	0800da3c 	.word	0x0800da3c
 8000e74:	20000d78 	.word	0x20000d78
 8000e78:	68db8bad 	.word	0x68db8bad
 8000e7c:	0800da48 	.word	0x0800da48
 8000e80:	48001000 	.word	0x48001000
 8000e84:	0800da6c 	.word	0x0800da6c
 8000e88:	40805000 	.word	0x40805000
 8000e8c:	40897000 	.word	0x40897000
 8000e90:	20008300 	.word	0x20008300
 8000e94:	20008160 	.word	0x20008160
 8000e98:	ffffd8f0 	.word	0xffffd8f0
 	  			  ingresso[k] = (ingresso[k] - MEDIA) / VARIANZA;
 8000e9c:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 8000ea0:	009b      	lsls	r3, r3, #2
 8000ea2:	f8d7 218c 	ldr.w	r2, [r7, #396]	@ 0x18c
 8000ea6:	4413      	add	r3, r2
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	4618      	mov	r0, r3
 8000eac:	f7ff fb64 	bl	8000578 <__aeabi_f2d>
 8000eb0:	f04f 0200 	mov.w	r2, #0
 8000eb4:	4b32      	ldr	r3, [pc, #200]	@ (8000f80 <main+0x494>)
 8000eb6:	f7ff f9ff 	bl	80002b8 <__aeabi_dsub>
 8000eba:	4602      	mov	r2, r0
 8000ebc:	460b      	mov	r3, r1
 8000ebe:	4610      	mov	r0, r2
 8000ec0:	4619      	mov	r1, r3
 8000ec2:	f04f 0200 	mov.w	r2, #0
 8000ec6:	4b2f      	ldr	r3, [pc, #188]	@ (8000f84 <main+0x498>)
 8000ec8:	f7ff fcd8 	bl	800087c <__aeabi_ddiv>
 8000ecc:	4602      	mov	r2, r0
 8000ece:	460b      	mov	r3, r1
 8000ed0:	4610      	mov	r0, r2
 8000ed2:	4619      	mov	r1, r3
 8000ed4:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 8000ed8:	009b      	lsls	r3, r3, #2
 8000eda:	f8d7 218c 	ldr.w	r2, [r7, #396]	@ 0x18c
 8000ede:	18d4      	adds	r4, r2, r3
 8000ee0:	f7ff fdb4 	bl	8000a4c <__aeabi_d2f>
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	6023      	str	r3, [r4, #0]
 	  		  for(int k = 0; k < sizeof(ingresso); k++)
 8000ee8:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 8000eec:	3301      	adds	r3, #1
 8000eee:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
 8000ef2:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 8000ef6:	2b03      	cmp	r3, #3
 8000ef8:	d9d0      	bls.n	8000e9c <main+0x3b0>
 	  		  Error_Handler();
 	  	  free (ingresso);
 	  }
 	  else
 	  {
 		  val = ingresso;
 8000efa:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 8000efe:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
 	  }

 	  if(er != FR_OK)
 8000f02:	f897 31a3 	ldrb.w	r3, [r7, #419]	@ 0x1a3
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d001      	beq.n	8000f0e <main+0x422>
 	  {
 		  		  Error_Handler();
 8000f0a:	f000 fd8f 	bl	8001a2c <Error_Handler>
 	  }

 	  for(int j = 0; j < n_float - AI_MODEL_IN_1_SIZE - 1; j++)
 8000f0e:	2300      	movs	r3, #0
 8000f10:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8000f14:	e011      	b.n	8000f3a <main+0x44e>
 	  {
 		  if (net_run(in_data, j, val, out_data) != 0)
 8000f16:	4b1c      	ldr	r3, [pc, #112]	@ (8000f88 <main+0x49c>)
 8000f18:	f8d7 2188 	ldr.w	r2, [r7, #392]	@ 0x188
 8000f1c:	f8d7 11a4 	ldr.w	r1, [r7, #420]	@ 0x1a4
 8000f20:	481a      	ldr	r0, [pc, #104]	@ (8000f8c <main+0x4a0>)
 8000f22:	f000 fc81 	bl	8001828 <net_run>
 8000f26:	4603      	mov	r3, r0
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d001      	beq.n	8000f30 <main+0x444>
 			  Error_Handler();
 8000f2c:	f000 fd7e 	bl	8001a2c <Error_Handler>
 	  for(int j = 0; j < n_float - AI_MODEL_IN_1_SIZE - 1; j++)
 8000f30:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8000f34:	3301      	adds	r3, #1
 8000f36:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8000f3a:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8000f3e:	3b64      	subs	r3, #100	@ 0x64
 8000f40:	f8d7 21a4 	ldr.w	r2, [r7, #420]	@ 0x1a4
 8000f44:	429a      	cmp	r2, r3
 8000f46:	dbe6      	blt.n	8000f16 <main+0x42a>
 	  }
 	  free(val);
 8000f48:	f8d7 0188 	ldr.w	r0, [r7, #392]	@ 0x188
 8000f4c:	f00c f8b4 	bl	800d0b8 <free>
   }

   strcpy (buf,"\nfine\n");
 8000f50:	4b0f      	ldr	r3, [pc, #60]	@ (8000f90 <main+0x4a4>)
 8000f52:	4a10      	ldr	r2, [pc, #64]	@ (8000f94 <main+0x4a8>)
 8000f54:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000f58:	6018      	str	r0, [r3, #0]
 8000f5a:	3304      	adds	r3, #4
 8000f5c:	8019      	strh	r1, [r3, #0]
 8000f5e:	3302      	adds	r3, #2
 8000f60:	0c0a      	lsrs	r2, r1, #16
 8000f62:	701a      	strb	r2, [r3, #0]
   lung_stringa = strlen(buf);
 8000f64:	480a      	ldr	r0, [pc, #40]	@ (8000f90 <main+0x4a4>)
 8000f66:	f7ff f94b 	bl	8000200 <strlen>
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
   w_report(buf, lung_stringa);
 8000f70:	f8d7 119c 	ldr.w	r1, [r7, #412]	@ 0x19c
 8000f74:	4806      	ldr	r0, [pc, #24]	@ (8000f90 <main+0x4a4>)
 8000f76:	f000 fd21 	bl	80019bc <w_report>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000f7a:	bf00      	nop
 8000f7c:	e7fd      	b.n	8000f7a <main+0x48e>
 8000f7e:	bf00      	nop
 8000f80:	40805000 	.word	0x40805000
 8000f84:	40897000 	.word	0x40897000
 8000f88:	20008300 	.word	0x20008300
 8000f8c:	20008160 	.word	0x20008160
 8000f90:	200011d8 	.word	0x200011d8
 8000f94:	0800da90 	.word	0x0800da90

08000f98 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b096      	sub	sp, #88	@ 0x58
 8000f9c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f9e:	f107 0314 	add.w	r3, r7, #20
 8000fa2:	2244      	movs	r2, #68	@ 0x44
 8000fa4:	2100      	movs	r1, #0
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	f00c f98a 	bl	800d2c0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fac:	463b      	mov	r3, r7
 8000fae:	2200      	movs	r2, #0
 8000fb0:	601a      	str	r2, [r3, #0]
 8000fb2:	605a      	str	r2, [r3, #4]
 8000fb4:	609a      	str	r2, [r3, #8]
 8000fb6:	60da      	str	r2, [r3, #12]
 8000fb8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 8000fba:	2000      	movs	r0, #0
 8000fbc:	f001 fa52 	bl	8002464 <HAL_PWREx_ControlVoltageScaling>
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d001      	beq.n	8000fca <SystemClock_Config+0x32>
  {
    Error_Handler();
 8000fc6:	f000 fd31 	bl	8001a2c <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI;
 8000fca:	2322      	movs	r3, #34	@ 0x22
 8000fcc:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000fce:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000fd2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000fd4:	2301      	movs	r3, #1
 8000fd6:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000fd8:	2340      	movs	r3, #64	@ 0x40
 8000fda:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fdc:	2302      	movs	r3, #2
 8000fde:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000fe0:	2302      	movs	r3, #2
 8000fe2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 2;
 8000fe4:	2302      	movs	r3, #2
 8000fe6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 30;
 8000fe8:	231e      	movs	r3, #30
 8000fea:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000fec:	2302      	movs	r3, #2
 8000fee:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000ff0:	2302      	movs	r3, #2
 8000ff2:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000ff4:	2302      	movs	r3, #2
 8000ff6:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ff8:	f107 0314 	add.w	r3, r7, #20
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	f001 fae5 	bl	80025cc <HAL_RCC_OscConfig>
 8001002:	4603      	mov	r3, r0
 8001004:	2b00      	cmp	r3, #0
 8001006:	d001      	beq.n	800100c <SystemClock_Config+0x74>
  {
    Error_Handler();
 8001008:	f000 fd10 	bl	8001a2c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800100c:	230f      	movs	r3, #15
 800100e:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001010:	2303      	movs	r3, #3
 8001012:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001014:	2300      	movs	r3, #0
 8001016:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001018:	2300      	movs	r3, #0
 800101a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800101c:	2300      	movs	r3, #0
 800101e:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001020:	463b      	mov	r3, r7
 8001022:	2105      	movs	r1, #5
 8001024:	4618      	mov	r0, r3
 8001026:	f001 feeb 	bl	8002e00 <HAL_RCC_ClockConfig>
 800102a:	4603      	mov	r3, r0
 800102c:	2b00      	cmp	r3, #0
 800102e:	d001      	beq.n	8001034 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8001030:	f000 fcfc 	bl	8001a2c <Error_Handler>
  }
}
 8001034:	bf00      	nop
 8001036:	3758      	adds	r7, #88	@ 0x58
 8001038:	46bd      	mov	sp, r7
 800103a:	bd80      	pop	{r7, pc}

0800103c <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 800103c:	b480      	push	{r7}
 800103e:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8001040:	4b0d      	ldr	r3, [pc, #52]	@ (8001078 <MX_SDMMC1_SD_Init+0x3c>)
 8001042:	4a0e      	ldr	r2, [pc, #56]	@ (800107c <MX_SDMMC1_SD_Init+0x40>)
 8001044:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8001046:	4b0c      	ldr	r3, [pc, #48]	@ (8001078 <MX_SDMMC1_SD_Init+0x3c>)
 8001048:	2200      	movs	r2, #0
 800104a:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800104c:	4b0a      	ldr	r3, [pc, #40]	@ (8001078 <MX_SDMMC1_SD_Init+0x3c>)
 800104e:	2200      	movs	r2, #0
 8001050:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 8001052:	4b09      	ldr	r3, [pc, #36]	@ (8001078 <MX_SDMMC1_SD_Init+0x3c>)
 8001054:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001058:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800105a:	4b07      	ldr	r3, [pc, #28]	@ (8001078 <MX_SDMMC1_SD_Init+0x3c>)
 800105c:	2200      	movs	r2, #0
 800105e:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 0;
 8001060:	4b05      	ldr	r3, [pc, #20]	@ (8001078 <MX_SDMMC1_SD_Init+0x3c>)
 8001062:	2200      	movs	r2, #0
 8001064:	615a      	str	r2, [r3, #20]
  hsd1.Init.Transceiver = SDMMC_TRANSCEIVER_DISABLE;
 8001066:	4b04      	ldr	r3, [pc, #16]	@ (8001078 <MX_SDMMC1_SD_Init+0x3c>)
 8001068:	2200      	movs	r2, #0
 800106a:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 800106c:	bf00      	nop
 800106e:	46bd      	mov	sp, r7
 8001070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001074:	4770      	bx	lr
 8001076:	bf00      	nop
 8001078:	20000a7c 	.word	0x20000a7c
 800107c:	50062400 	.word	0x50062400

08001080 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b088      	sub	sp, #32
 8001084:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001086:	f107 0310 	add.w	r3, r7, #16
 800108a:	2200      	movs	r2, #0
 800108c:	601a      	str	r2, [r3, #0]
 800108e:	605a      	str	r2, [r3, #4]
 8001090:	609a      	str	r2, [r3, #8]
 8001092:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001094:	1d3b      	adds	r3, r7, #4
 8001096:	2200      	movs	r2, #0
 8001098:	601a      	str	r2, [r3, #0]
 800109a:	605a      	str	r2, [r3, #4]
 800109c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800109e:	4b20      	ldr	r3, [pc, #128]	@ (8001120 <MX_TIM1_Init+0xa0>)
 80010a0:	4a20      	ldr	r2, [pc, #128]	@ (8001124 <MX_TIM1_Init+0xa4>)
 80010a2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 120 - 1;
 80010a4:	4b1e      	ldr	r3, [pc, #120]	@ (8001120 <MX_TIM1_Init+0xa0>)
 80010a6:	2277      	movs	r2, #119	@ 0x77
 80010a8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010aa:	4b1d      	ldr	r3, [pc, #116]	@ (8001120 <MX_TIM1_Init+0xa0>)
 80010ac:	2200      	movs	r2, #0
 80010ae:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80010b0:	4b1b      	ldr	r3, [pc, #108]	@ (8001120 <MX_TIM1_Init+0xa0>)
 80010b2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80010b6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010b8:	4b19      	ldr	r3, [pc, #100]	@ (8001120 <MX_TIM1_Init+0xa0>)
 80010ba:	2200      	movs	r2, #0
 80010bc:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80010be:	4b18      	ldr	r3, [pc, #96]	@ (8001120 <MX_TIM1_Init+0xa0>)
 80010c0:	2200      	movs	r2, #0
 80010c2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010c4:	4b16      	ldr	r3, [pc, #88]	@ (8001120 <MX_TIM1_Init+0xa0>)
 80010c6:	2200      	movs	r2, #0
 80010c8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80010ca:	4815      	ldr	r0, [pc, #84]	@ (8001120 <MX_TIM1_Init+0xa0>)
 80010cc:	f005 fbfd 	bl	80068ca <HAL_TIM_Base_Init>
 80010d0:	4603      	mov	r3, r0
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d001      	beq.n	80010da <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 80010d6:	f000 fca9 	bl	8001a2c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80010da:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80010de:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80010e0:	f107 0310 	add.w	r3, r7, #16
 80010e4:	4619      	mov	r1, r3
 80010e6:	480e      	ldr	r0, [pc, #56]	@ (8001120 <MX_TIM1_Init+0xa0>)
 80010e8:	f005 fcae 	bl	8006a48 <HAL_TIM_ConfigClockSource>
 80010ec:	4603      	mov	r3, r0
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d001      	beq.n	80010f6 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 80010f2:	f000 fc9b 	bl	8001a2c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010f6:	2300      	movs	r3, #0
 80010f8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80010fa:	2300      	movs	r3, #0
 80010fc:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010fe:	2300      	movs	r3, #0
 8001100:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001102:	1d3b      	adds	r3, r7, #4
 8001104:	4619      	mov	r1, r3
 8001106:	4806      	ldr	r0, [pc, #24]	@ (8001120 <MX_TIM1_Init+0xa0>)
 8001108:	f005 fea8 	bl	8006e5c <HAL_TIMEx_MasterConfigSynchronization>
 800110c:	4603      	mov	r3, r0
 800110e:	2b00      	cmp	r3, #0
 8001110:	d001      	beq.n	8001116 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001112:	f000 fc8b 	bl	8001a2c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001116:	bf00      	nop
 8001118:	3720      	adds	r7, #32
 800111a:	46bd      	mov	sp, r7
 800111c:	bd80      	pop	{r7, pc}
 800111e:	bf00      	nop
 8001120:	20000afc 	.word	0x20000afc
 8001124:	40012c00 	.word	0x40012c00

08001128 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b08e      	sub	sp, #56	@ 0x38
 800112c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800112e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001132:	2200      	movs	r2, #0
 8001134:	601a      	str	r2, [r3, #0]
 8001136:	605a      	str	r2, [r3, #4]
 8001138:	609a      	str	r2, [r3, #8]
 800113a:	60da      	str	r2, [r3, #12]
 800113c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800113e:	4bb7      	ldr	r3, [pc, #732]	@ (800141c <MX_GPIO_Init+0x2f4>)
 8001140:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001142:	4ab6      	ldr	r2, [pc, #728]	@ (800141c <MX_GPIO_Init+0x2f4>)
 8001144:	f043 0310 	orr.w	r3, r3, #16
 8001148:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800114a:	4bb4      	ldr	r3, [pc, #720]	@ (800141c <MX_GPIO_Init+0x2f4>)
 800114c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800114e:	f003 0310 	and.w	r3, r3, #16
 8001152:	623b      	str	r3, [r7, #32]
 8001154:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001156:	4bb1      	ldr	r3, [pc, #708]	@ (800141c <MX_GPIO_Init+0x2f4>)
 8001158:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800115a:	4ab0      	ldr	r2, [pc, #704]	@ (800141c <MX_GPIO_Init+0x2f4>)
 800115c:	f043 0302 	orr.w	r3, r3, #2
 8001160:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001162:	4bae      	ldr	r3, [pc, #696]	@ (800141c <MX_GPIO_Init+0x2f4>)
 8001164:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001166:	f003 0302 	and.w	r3, r3, #2
 800116a:	61fb      	str	r3, [r7, #28]
 800116c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800116e:	4bab      	ldr	r3, [pc, #684]	@ (800141c <MX_GPIO_Init+0x2f4>)
 8001170:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001172:	4aaa      	ldr	r2, [pc, #680]	@ (800141c <MX_GPIO_Init+0x2f4>)
 8001174:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001178:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800117a:	4ba8      	ldr	r3, [pc, #672]	@ (800141c <MX_GPIO_Init+0x2f4>)
 800117c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800117e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001182:	61bb      	str	r3, [r7, #24]
 8001184:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001186:	4ba5      	ldr	r3, [pc, #660]	@ (800141c <MX_GPIO_Init+0x2f4>)
 8001188:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800118a:	4aa4      	ldr	r2, [pc, #656]	@ (800141c <MX_GPIO_Init+0x2f4>)
 800118c:	f043 0308 	orr.w	r3, r3, #8
 8001190:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001192:	4ba2      	ldr	r3, [pc, #648]	@ (800141c <MX_GPIO_Init+0x2f4>)
 8001194:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001196:	f003 0308 	and.w	r3, r3, #8
 800119a:	617b      	str	r3, [r7, #20]
 800119c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800119e:	4b9f      	ldr	r3, [pc, #636]	@ (800141c <MX_GPIO_Init+0x2f4>)
 80011a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011a2:	4a9e      	ldr	r2, [pc, #632]	@ (800141c <MX_GPIO_Init+0x2f4>)
 80011a4:	f043 0304 	orr.w	r3, r3, #4
 80011a8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80011aa:	4b9c      	ldr	r3, [pc, #624]	@ (800141c <MX_GPIO_Init+0x2f4>)
 80011ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011ae:	f003 0304 	and.w	r3, r3, #4
 80011b2:	613b      	str	r3, [r7, #16]
 80011b4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011b6:	4b99      	ldr	r3, [pc, #612]	@ (800141c <MX_GPIO_Init+0x2f4>)
 80011b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011ba:	4a98      	ldr	r2, [pc, #608]	@ (800141c <MX_GPIO_Init+0x2f4>)
 80011bc:	f043 0301 	orr.w	r3, r3, #1
 80011c0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80011c2:	4b96      	ldr	r3, [pc, #600]	@ (800141c <MX_GPIO_Init+0x2f4>)
 80011c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011c6:	f003 0301 	and.w	r3, r3, #1
 80011ca:	60fb      	str	r3, [r7, #12]
 80011cc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80011ce:	4b93      	ldr	r3, [pc, #588]	@ (800141c <MX_GPIO_Init+0x2f4>)
 80011d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011d2:	4a92      	ldr	r2, [pc, #584]	@ (800141c <MX_GPIO_Init+0x2f4>)
 80011d4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80011d8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80011da:	4b90      	ldr	r3, [pc, #576]	@ (800141c <MX_GPIO_Init+0x2f4>)
 80011dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80011e2:	60bb      	str	r3, [r7, #8]
 80011e4:	68bb      	ldr	r3, [r7, #8]
  HAL_PWREx_EnableVddIO2();
 80011e6:	f001 f9e1 	bl	80025ac <HAL_PWREx_EnableVddIO2>
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80011ea:	4b8c      	ldr	r3, [pc, #560]	@ (800141c <MX_GPIO_Init+0x2f4>)
 80011ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011ee:	4a8b      	ldr	r2, [pc, #556]	@ (800141c <MX_GPIO_Init+0x2f4>)
 80011f0:	f043 0320 	orr.w	r3, r3, #32
 80011f4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80011f6:	4b89      	ldr	r3, [pc, #548]	@ (800141c <MX_GPIO_Init+0x2f4>)
 80011f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011fa:	f003 0320 	and.w	r3, r3, #32
 80011fe:	607b      	str	r3, [r7, #4]
 8001200:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LED1_Pin|DCDC_2_EN_Pin, GPIO_PIN_RESET);
 8001202:	2200      	movs	r2, #0
 8001204:	f242 0102 	movw	r1, #8194	@ 0x2002
 8001208:	4885      	ldr	r0, [pc, #532]	@ (8001420 <MX_GPIO_Init+0x2f8>)
 800120a:	f001 f8f3 	bl	80023f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LED2_Pin|WIFI_WAKEUP_Pin|CS_DH_Pin|EX_RESET_Pin, GPIO_PIN_RESET);
 800120e:	2200      	movs	r2, #0
 8001210:	f648 0181 	movw	r1, #34945	@ 0x8881
 8001214:	4883      	ldr	r0, [pc, #524]	@ (8001424 <MX_GPIO_Init+0x2fc>)
 8001216:	f001 f8ed 	bl	80023f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BLE_RST_GPIO_Port, BLE_RST_Pin, GPIO_PIN_RESET);
 800121a:	2200      	movs	r2, #0
 800121c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001220:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001224:	f001 f8e6 	bl	80023f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, WIFI_RST_Pin|SPI2_MISO_p2_Pin, GPIO_PIN_RESET);
 8001228:	2200      	movs	r2, #0
 800122a:	2144      	movs	r1, #68	@ 0x44
 800122c:	487e      	ldr	r0, [pc, #504]	@ (8001428 <MX_GPIO_Init+0x300>)
 800122e:	f001 f8e1 	bl	80023f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, CS_WIFI_Pin|C_EN_Pin|CS_ADWB_Pin|STSAFE_RESET_Pin
 8001232:	2200      	movs	r2, #0
 8001234:	f247 5128 	movw	r1, #29992	@ 0x7528
 8001238:	487c      	ldr	r0, [pc, #496]	@ (800142c <MX_GPIO_Init+0x304>)
 800123a:	f001 f8db 	bl	80023f4 <HAL_GPIO_WritePin>
                          |WIFI_BOOT0_Pin|CS_DHC_Pin|SEL3_4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, BLE_SPI_CS_Pin|SEL1_2_Pin, GPIO_PIN_RESET);
 800123e:	2200      	movs	r2, #0
 8001240:	2121      	movs	r1, #33	@ 0x21
 8001242:	487b      	ldr	r0, [pc, #492]	@ (8001430 <MX_GPIO_Init+0x308>)
 8001244:	f001 f8d6 	bl	80023f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SPI2_MOSI_p2_Pin|PB11_Pin, GPIO_PIN_RESET);
 8001248:	2200      	movs	r2, #0
 800124a:	f44f 4108 	mov.w	r1, #34816	@ 0x8800
 800124e:	4879      	ldr	r0, [pc, #484]	@ (8001434 <MX_GPIO_Init+0x30c>)
 8001250:	f001 f8d0 	bl	80023f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : BOOT0_PE0_Pin BLE_TEST8_Pin */
  GPIO_InitStruct.Pin = BOOT0_PE0_Pin|BLE_TEST8_Pin;
 8001254:	f240 4301 	movw	r3, #1025	@ 0x401
 8001258:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800125a:	2300      	movs	r3, #0
 800125c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800125e:	2300      	movs	r3, #0
 8001260:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001262:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001266:	4619      	mov	r1, r3
 8001268:	486d      	ldr	r0, [pc, #436]	@ (8001420 <MX_GPIO_Init+0x2f8>)
 800126a:	f000 ff19 	bl	80020a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB9_Pin PB8_Pin PB14_Pin CHRGB0_Pin */
  GPIO_InitStruct.Pin = PB9_Pin|PB8_Pin|PB14_Pin|CHRGB0_Pin;
 800126e:	f244 3301 	movw	r3, #17153	@ 0x4301
 8001272:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001274:	2303      	movs	r3, #3
 8001276:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001278:	2300      	movs	r3, #0
 800127a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800127c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001280:	4619      	mov	r1, r3
 8001282:	486c      	ldr	r0, [pc, #432]	@ (8001434 <MX_GPIO_Init+0x30c>)
 8001284:	f000 ff0c 	bl	80020a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT0_PE0H3_Pin */
  GPIO_InitStruct.Pin = BOOT0_PE0H3_Pin;
 8001288:	2308      	movs	r3, #8
 800128a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800128c:	2300      	movs	r3, #0
 800128e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001290:	2300      	movs	r3, #0
 8001292:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(BOOT0_PE0H3_GPIO_Port, &GPIO_InitStruct);
 8001294:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001298:	4619      	mov	r1, r3
 800129a:	4867      	ldr	r0, [pc, #412]	@ (8001438 <MX_GPIO_Init+0x310>)
 800129c:	f000 ff00 	bl	80020a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI3_MISO_Pin SPI3_MOSI_Pin SPI3_CLK_Pin */
  GPIO_InitStruct.Pin = SPI3_MISO_Pin|SPI3_MOSI_Pin|SPI3_CLK_Pin;
 80012a0:	2338      	movs	r3, #56	@ 0x38
 80012a2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012a4:	2302      	movs	r3, #2
 80012a6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a8:	2300      	movs	r3, #0
 80012aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012ac:	2303      	movs	r3, #3
 80012ae:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80012b0:	2306      	movs	r3, #6
 80012b2:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012b4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80012b8:	4619      	mov	r1, r3
 80012ba:	485e      	ldr	r0, [pc, #376]	@ (8001434 <MX_GPIO_Init+0x30c>)
 80012bc:	f000 fef0 	bl	80020a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI2_MISO_Pin SPI2_CLK_Pin */
  GPIO_InitStruct.Pin = SPI2_MISO_Pin|SPI2_CLK_Pin;
 80012c0:	230a      	movs	r3, #10
 80012c2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012c4:	2302      	movs	r3, #2
 80012c6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012c8:	2300      	movs	r3, #0
 80012ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012cc:	2303      	movs	r3, #3
 80012ce:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80012d0:	2305      	movs	r3, #5
 80012d2:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80012d4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80012d8:	4619      	mov	r1, r3
 80012da:	4852      	ldr	r0, [pc, #328]	@ (8001424 <MX_GPIO_Init+0x2fc>)
 80012dc:	f000 fee0 	bl	80020a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : BLE_TEST9_Pin WIFI_DRDY_Pin INT1_DHC_Pin INT_STT_Pin
                           INT1_ADWB_Pin */
  GPIO_InitStruct.Pin = BLE_TEST9_Pin|WIFI_DRDY_Pin|INT1_DHC_Pin|INT_STT_Pin
 80012e0:	f64c 1308 	movw	r3, #51464	@ 0xc908
 80012e4:	627b      	str	r3, [r7, #36]	@ 0x24
                          |INT1_ADWB_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80012e6:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80012ea:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ec:	2300      	movs	r3, #0
 80012ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80012f0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80012f4:	4619      	mov	r1, r3
 80012f6:	484a      	ldr	r0, [pc, #296]	@ (8001420 <MX_GPIO_Init+0x2f8>)
 80012f8:	f000 fed2 	bl	80020a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : USART2_RX_Pin USART2_RTS_Pin USART2_TX_Pin */
  GPIO_InitStruct.Pin = USART2_RX_Pin|USART2_RTS_Pin|USART2_TX_Pin;
 80012fc:	2370      	movs	r3, #112	@ 0x70
 80012fe:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001300:	2302      	movs	r3, #2
 8001302:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001304:	2300      	movs	r3, #0
 8001306:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001308:	2303      	movs	r3, #3
 800130a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800130c:	2307      	movs	r3, #7
 800130e:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001310:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001314:	4619      	mov	r1, r3
 8001316:	4843      	ldr	r0, [pc, #268]	@ (8001424 <MX_GPIO_Init+0x2fc>)
 8001318:	f000 fec2 	bl	80020a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : EX_PWM_Pin */
  GPIO_InitStruct.Pin = EX_PWM_Pin;
 800131c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001320:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001322:	2302      	movs	r3, #2
 8001324:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001326:	2300      	movs	r3, #0
 8001328:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800132a:	2300      	movs	r3, #0
 800132c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800132e:	2301      	movs	r3, #1
 8001330:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(EX_PWM_GPIO_Port, &GPIO_InitStruct);
 8001332:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001336:	4619      	mov	r1, r3
 8001338:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800133c:	f000 feb0 	bl	80020a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_DP_Pin OTG_FS_DM_Pin */
  GPIO_InitStruct.Pin = OTG_FS_DP_Pin|OTG_FS_DM_Pin;
 8001340:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8001344:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001346:	2302      	movs	r3, #2
 8001348:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800134a:	2300      	movs	r3, #0
 800134c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800134e:	2303      	movs	r3, #3
 8001350:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001352:	230a      	movs	r3, #10
 8001354:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001356:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800135a:	4619      	mov	r1, r3
 800135c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001360:	f000 fe9e 	bl	80020a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : SAI1_SCK_A_Pin SAI1_MCLK_A_Pin SAI1_FS_A_DFSDM_D3_Pin SAI1_SD_A_Pin
                           SAI1_SD_B_Pin */
  GPIO_InitStruct.Pin = SAI1_SCK_A_Pin|SAI1_MCLK_A_Pin|SAI1_FS_A_DFSDM_D3_Pin|SAI1_SD_A_Pin
 8001364:	23f4      	movs	r3, #244	@ 0xf4
 8001366:	627b      	str	r3, [r7, #36]	@ 0x24
                          |SAI1_SD_B_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001368:	2302      	movs	r3, #2
 800136a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800136c:	2300      	movs	r3, #0
 800136e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001370:	2300      	movs	r3, #0
 8001372:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8001374:	230d      	movs	r3, #13
 8001376:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001378:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800137c:	4619      	mov	r1, r3
 800137e:	4828      	ldr	r0, [pc, #160]	@ (8001420 <MX_GPIO_Init+0x2f8>)
 8001380:	f000 fe8e 	bl	80020a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED1_Pin DCDC_2_EN_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|DCDC_2_EN_Pin;
 8001384:	f242 0302 	movw	r3, #8194	@ 0x2002
 8001388:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800138a:	2301      	movs	r3, #1
 800138c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800138e:	2300      	movs	r3, #0
 8001390:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001392:	2300      	movs	r3, #0
 8001394:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001396:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800139a:	4619      	mov	r1, r3
 800139c:	4820      	ldr	r0, [pc, #128]	@ (8001420 <MX_GPIO_Init+0x2f8>)
 800139e:	f000 fe7f 	bl	80020a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED2_Pin WIFI_WAKEUP_Pin CS_DH_Pin EX_RESET_Pin */
  GPIO_InitStruct.Pin = LED2_Pin|WIFI_WAKEUP_Pin|CS_DH_Pin|EX_RESET_Pin;
 80013a2:	f648 0381 	movw	r3, #34945	@ 0x8881
 80013a6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013a8:	2301      	movs	r3, #1
 80013aa:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ac:	2300      	movs	r3, #0
 80013ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013b0:	2300      	movs	r3, #0
 80013b2:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80013b4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80013b8:	4619      	mov	r1, r3
 80013ba:	481a      	ldr	r0, [pc, #104]	@ (8001424 <MX_GPIO_Init+0x2fc>)
 80013bc:	f000 fe70 	bl	80020a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA10_Pin PA9_Pin PA0_Pin DAC1_OUT1_Pin
                           PA1_Pin */
  GPIO_InitStruct.Pin = PA10_Pin|PA9_Pin|PA0_Pin|DAC1_OUT1_Pin
 80013c0:	f240 6313 	movw	r3, #1555	@ 0x613
 80013c4:	627b      	str	r3, [r7, #36]	@ 0x24
                          |PA1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80013c6:	2303      	movs	r3, #3
 80013c8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ca:	2300      	movs	r3, #0
 80013cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013ce:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80013d2:	4619      	mov	r1, r3
 80013d4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80013d8:	f000 fe62 	bl	80020a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : DFSDM1_DATIN5_Pin DFSDM1_D7_Pin */
  GPIO_InitStruct.Pin = DFSDM1_DATIN5_Pin|DFSDM1_D7_Pin;
 80013dc:	f44f 6388 	mov.w	r3, #1088	@ 0x440
 80013e0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013e2:	2302      	movs	r3, #2
 80013e4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80013e6:	2302      	movs	r3, #2
 80013e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013ea:	2303      	movs	r3, #3
 80013ec:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 80013ee:	2306      	movs	r3, #6
 80013f0:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013f2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80013f6:	4619      	mov	r1, r3
 80013f8:	480e      	ldr	r0, [pc, #56]	@ (8001434 <MX_GPIO_Init+0x30c>)
 80013fa:	f000 fe51 	bl	80020a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG12_Pin PG10_Pin PG9_Pin */
  GPIO_InitStruct.Pin = PG12_Pin|PG10_Pin|PG9_Pin;
 80013fe:	f44f 53b0 	mov.w	r3, #5632	@ 0x1600
 8001402:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001404:	2303      	movs	r3, #3
 8001406:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001408:	2300      	movs	r3, #0
 800140a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800140c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001410:	4619      	mov	r1, r3
 8001412:	4807      	ldr	r0, [pc, #28]	@ (8001430 <MX_GPIO_Init+0x308>)
 8001414:	f000 fe44 	bl	80020a0 <HAL_GPIO_Init>
 8001418:	e010      	b.n	800143c <MX_GPIO_Init+0x314>
 800141a:	bf00      	nop
 800141c:	40021000 	.word	0x40021000
 8001420:	48001000 	.word	0x48001000
 8001424:	48000c00 	.word	0x48000c00
 8001428:	48000800 	.word	0x48000800
 800142c:	48001400 	.word	0x48001400
 8001430:	48001800 	.word	0x48001800
 8001434:	48000400 	.word	0x48000400
 8001438:	48001c00 	.word	0x48001c00

  /*Configure GPIO pin : BLE_RST_Pin */
  GPIO_InitStruct.Pin = BLE_RST_Pin;
 800143c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001440:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001442:	2301      	movs	r3, #1
 8001444:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001446:	2300      	movs	r3, #0
 8001448:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800144a:	2300      	movs	r3, #0
 800144c:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(BLE_RST_GPIO_Port, &GPIO_InitStruct);
 800144e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001452:	4619      	mov	r1, r3
 8001454:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001458:	f000 fe22 	bl	80020a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : WIFI_RST_Pin SPI2_MISO_p2_Pin */
  GPIO_InitStruct.Pin = WIFI_RST_Pin|SPI2_MISO_p2_Pin;
 800145c:	2344      	movs	r3, #68	@ 0x44
 800145e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001460:	2301      	movs	r3, #1
 8001462:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001464:	2300      	movs	r3, #0
 8001466:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001468:	2300      	movs	r3, #0
 800146a:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800146c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001470:	4619      	mov	r1, r3
 8001472:	48a6      	ldr	r0, [pc, #664]	@ (800170c <MX_GPIO_Init+0x5e4>)
 8001474:	f000 fe14 	bl	80020a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2C2_SMBA_Pin I2C2_SDA_Pin I2C2_SDAF0_Pin */
  GPIO_InitStruct.Pin = I2C2_SMBA_Pin|I2C2_SDA_Pin|I2C2_SDAF0_Pin;
 8001478:	2307      	movs	r3, #7
 800147a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800147c:	2312      	movs	r3, #18
 800147e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001480:	2300      	movs	r3, #0
 8001482:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001484:	2303      	movs	r3, #3
 8001486:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001488:	2304      	movs	r3, #4
 800148a:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800148c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001490:	4619      	mov	r1, r3
 8001492:	489f      	ldr	r0, [pc, #636]	@ (8001710 <MX_GPIO_Init+0x5e8>)
 8001494:	f000 fe04 	bl	80020a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001498:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800149c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800149e:	2300      	movs	r3, #0
 80014a0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014a2:	2300      	movs	r3, #0
 80014a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014a6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80014aa:	4619      	mov	r1, r3
 80014ac:	4897      	ldr	r0, [pc, #604]	@ (800170c <MX_GPIO_Init+0x5e4>)
 80014ae:	f000 fdf7 	bl	80020a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_WIFI_Pin C_EN_Pin CS_ADWB_Pin STSAFE_RESET_Pin
                           WIFI_BOOT0_Pin CS_DHC_Pin SEL3_4_Pin */
  GPIO_InitStruct.Pin = CS_WIFI_Pin|C_EN_Pin|CS_ADWB_Pin|STSAFE_RESET_Pin
 80014b2:	f247 5328 	movw	r3, #29992	@ 0x7528
 80014b6:	627b      	str	r3, [r7, #36]	@ 0x24
                          |WIFI_BOOT0_Pin|CS_DHC_Pin|SEL3_4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014b8:	2301      	movs	r3, #1
 80014ba:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014bc:	2300      	movs	r3, #0
 80014be:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014c0:	2300      	movs	r3, #0
 80014c2:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80014c4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80014c8:	4619      	mov	r1, r3
 80014ca:	4891      	ldr	r0, [pc, #580]	@ (8001710 <MX_GPIO_Init+0x5e8>)
 80014cc:	f000 fde8 	bl	80020a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2C3_SDA_Pin I2C3_SCL_Pin */
  GPIO_InitStruct.Pin = I2C3_SDA_Pin|I2C3_SCL_Pin;
 80014d0:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 80014d4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80014d6:	2312      	movs	r3, #18
 80014d8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014da:	2300      	movs	r3, #0
 80014dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014de:	2303      	movs	r3, #3
 80014e0:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80014e2:	2304      	movs	r3, #4
 80014e4:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80014e6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80014ea:	4619      	mov	r1, r3
 80014ec:	4889      	ldr	r0, [pc, #548]	@ (8001714 <MX_GPIO_Init+0x5ec>)
 80014ee:	f000 fdd7 	bl	80020a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : SW_SEL_Pin */
  GPIO_InitStruct.Pin = SW_SEL_Pin;
 80014f2:	2340      	movs	r3, #64	@ 0x40
 80014f4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014f6:	2302      	movs	r3, #2
 80014f8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014fa:	2300      	movs	r3, #0
 80014fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80014fe:	2302      	movs	r3, #2
 8001500:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8001502:	2302      	movs	r3, #2
 8001504:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(SW_SEL_GPIO_Port, &GPIO_InitStruct);
 8001506:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800150a:	4619      	mov	r1, r3
 800150c:	4880      	ldr	r0, [pc, #512]	@ (8001710 <MX_GPIO_Init+0x5e8>)
 800150e:	f000 fdc7 	bl	80020a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : INT2_DHC_Pin PGOOD_Pin INT_M_Pin */
  GPIO_InitStruct.Pin = INT2_DHC_Pin|PGOOD_Pin|INT_M_Pin;
 8001512:	f44f 7324 	mov.w	r3, #656	@ 0x290
 8001516:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001518:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800151c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800151e:	2300      	movs	r3, #0
 8001520:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001522:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001526:	4619      	mov	r1, r3
 8001528:	4879      	ldr	r0, [pc, #484]	@ (8001710 <MX_GPIO_Init+0x5e8>)
 800152a:	f000 fdb9 	bl	80020a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_MISO_Pin SPI1_MOSI_Pin SPI1_CLK_Pin */
  GPIO_InitStruct.Pin = SPI1_MISO_Pin|SPI1_MOSI_Pin|SPI1_CLK_Pin;
 800152e:	231c      	movs	r3, #28
 8001530:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001532:	2302      	movs	r3, #2
 8001534:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001536:	2300      	movs	r3, #0
 8001538:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800153a:	2303      	movs	r3, #3
 800153c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800153e:	2305      	movs	r3, #5
 8001540:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001542:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001546:	4619      	mov	r1, r3
 8001548:	4872      	ldr	r0, [pc, #456]	@ (8001714 <MX_GPIO_Init+0x5ec>)
 800154a:	f000 fda9 	bl	80020a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : BLE_SPI_CS_Pin SEL1_2_Pin */
  GPIO_InitStruct.Pin = BLE_SPI_CS_Pin|SEL1_2_Pin;
 800154e:	2321      	movs	r3, #33	@ 0x21
 8001550:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001552:	2301      	movs	r3, #1
 8001554:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001556:	2300      	movs	r3, #0
 8001558:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800155a:	2300      	movs	r3, #0
 800155c:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800155e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001562:	4619      	mov	r1, r3
 8001564:	486b      	ldr	r0, [pc, #428]	@ (8001714 <MX_GPIO_Init+0x5ec>)
 8001566:	f000 fd9b 	bl	80020a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : INT_HTS_Pin BLE_INT_Pin */
  GPIO_InitStruct.Pin = INT_HTS_Pin|BLE_INT_Pin;
 800156a:	2342      	movs	r3, #66	@ 0x42
 800156c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800156e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001572:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001574:	2300      	movs	r3, #0
 8001576:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001578:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800157c:	4619      	mov	r1, r3
 800157e:	4865      	ldr	r0, [pc, #404]	@ (8001714 <MX_GPIO_Init+0x5ec>)
 8001580:	f000 fd8e 	bl	80020a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2C4_SCL_Pin I2C4_SDA_Pin */
  GPIO_InitStruct.Pin = I2C4_SCL_Pin|I2C4_SDA_Pin;
 8001584:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8001588:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800158a:	2312      	movs	r3, #18
 800158c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800158e:	2300      	movs	r3, #0
 8001590:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001592:	2303      	movs	r3, #3
 8001594:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 8001596:	2304      	movs	r3, #4
 8001598:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800159a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800159e:	4619      	mov	r1, r3
 80015a0:	485d      	ldr	r0, [pc, #372]	@ (8001718 <MX_GPIO_Init+0x5f0>)
 80015a2:	f000 fd7d 	bl	80020a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ADC1_IN1_Pin ADC1_IN2_Pin uC_ADC_BATT_Pin */
  GPIO_InitStruct.Pin = ADC1_IN1_Pin|ADC1_IN2_Pin|uC_ADC_BATT_Pin;
 80015a6:	2313      	movs	r3, #19
 80015a8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80015aa:	230b      	movs	r3, #11
 80015ac:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ae:	2300      	movs	r3, #0
 80015b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015b2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80015b6:	4619      	mov	r1, r3
 80015b8:	4854      	ldr	r0, [pc, #336]	@ (800170c <MX_GPIO_Init+0x5e4>)
 80015ba:	f000 fd71 	bl	80020a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : INT2_ADWB_Pin SD_DETECT_Pin */
  GPIO_InitStruct.Pin = INT2_ADWB_Pin|SD_DETECT_Pin;
 80015be:	f241 0304 	movw	r3, #4100	@ 0x1004
 80015c2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015c4:	2300      	movs	r3, #0
 80015c6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c8:	2300      	movs	r3, #0
 80015ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015cc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80015d0:	4619      	mov	r1, r3
 80015d2:	4852      	ldr	r0, [pc, #328]	@ (800171c <MX_GPIO_Init+0x5f4>)
 80015d4:	f000 fd64 	bl	80020a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : CHRG_Pin */
  GPIO_InitStruct.Pin = CHRG_Pin;
 80015d8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80015dc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015de:	2300      	movs	r3, #0
 80015e0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015e2:	2300      	movs	r3, #0
 80015e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(CHRG_GPIO_Port, &GPIO_InitStruct);
 80015e6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80015ea:	4619      	mov	r1, r3
 80015ec:	4848      	ldr	r0, [pc, #288]	@ (8001710 <MX_GPIO_Init+0x5e8>)
 80015ee:	f000 fd57 	bl	80020a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_PWR_Pin */
  GPIO_InitStruct.Pin = BUTTON_PWR_Pin;
 80015f2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80015f6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80015f8:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80015fc:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015fe:	2300      	movs	r3, #0
 8001600:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(BUTTON_PWR_GPIO_Port, &GPIO_InitStruct);
 8001602:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001606:	4619      	mov	r1, r3
 8001608:	4843      	ldr	r0, [pc, #268]	@ (8001718 <MX_GPIO_Init+0x5f0>)
 800160a:	f000 fd49 	bl	80020a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : USART3_RX_Pin USART3_TX_Pin */
  GPIO_InitStruct.Pin = USART3_RX_Pin|USART3_TX_Pin;
 800160e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001612:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001614:	2302      	movs	r3, #2
 8001616:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001618:	2300      	movs	r3, #0
 800161a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800161c:	2303      	movs	r3, #3
 800161e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001620:	2307      	movs	r3, #7
 8001622:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001624:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001628:	4619      	mov	r1, r3
 800162a:	483b      	ldr	r0, [pc, #236]	@ (8001718 <MX_GPIO_Init+0x5f0>)
 800162c:	f000 fd38 	bl	80020a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI2_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI2_MOSI_Pin;
 8001630:	2308      	movs	r3, #8
 8001632:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001634:	2302      	movs	r3, #2
 8001636:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001638:	2300      	movs	r3, #0
 800163a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800163c:	2303      	movs	r3, #3
 800163e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001640:	2305      	movs	r3, #5
 8001642:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(SPI2_MOSI_GPIO_Port, &GPIO_InitStruct);
 8001644:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001648:	4619      	mov	r1, r3
 800164a:	4830      	ldr	r0, [pc, #192]	@ (800170c <MX_GPIO_Init+0x5e4>)
 800164c:	f000 fd28 	bl	80020a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : USART3_RTS_Pin USART3_CTS_Pin */
  GPIO_InitStruct.Pin = USART3_RTS_Pin|USART3_CTS_Pin;
 8001650:	f242 0302 	movw	r3, #8194	@ 0x2002
 8001654:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001656:	2302      	movs	r3, #2
 8001658:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800165a:	2300      	movs	r3, #0
 800165c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800165e:	2303      	movs	r3, #3
 8001660:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001662:	2307      	movs	r3, #7
 8001664:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001666:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800166a:	4619      	mov	r1, r3
 800166c:	482b      	ldr	r0, [pc, #172]	@ (800171c <MX_GPIO_Init+0x5f4>)
 800166e:	f000 fd17 	bl	80020a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : DFSDM1_CKOUT_Pin */
  GPIO_InitStruct.Pin = DFSDM1_CKOUT_Pin;
 8001672:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001676:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001678:	2302      	movs	r3, #2
 800167a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800167c:	2302      	movs	r3, #2
 800167e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001680:	2303      	movs	r3, #3
 8001682:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8001684:	2306      	movs	r3, #6
 8001686:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(DFSDM1_CKOUT_GPIO_Port, &GPIO_InitStruct);
 8001688:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800168c:	4619      	mov	r1, r3
 800168e:	4824      	ldr	r0, [pc, #144]	@ (8001720 <MX_GPIO_Init+0x5f8>)
 8001690:	f000 fd06 	bl	80020a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI2_MOSI_p2_Pin PB11_Pin */
  GPIO_InitStruct.Pin = SPI2_MOSI_p2_Pin|PB11_Pin;
 8001694:	f44f 4308 	mov.w	r3, #34816	@ 0x8800
 8001698:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800169a:	2301      	movs	r3, #1
 800169c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800169e:	2300      	movs	r3, #0
 80016a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016a2:	2300      	movs	r3, #0
 80016a4:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016a6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80016aa:	4619      	mov	r1, r3
 80016ac:	481b      	ldr	r0, [pc, #108]	@ (800171c <MX_GPIO_Init+0x5f4>)
 80016ae:	f000 fcf7 	bl	80020a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : INT2_DH_Pin */
  GPIO_InitStruct.Pin = INT2_DH_Pin;
 80016b2:	2304      	movs	r3, #4
 80016b4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80016b6:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80016ba:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016bc:	2300      	movs	r3, #0
 80016be:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(INT2_DH_GPIO_Port, &GPIO_InitStruct);
 80016c0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80016c4:	4619      	mov	r1, r3
 80016c6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80016ca:	f000 fce9 	bl	80020a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : EX_ADC_Pin */
  GPIO_InitStruct.Pin = EX_ADC_Pin;
 80016ce:	2320      	movs	r3, #32
 80016d0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80016d2:	230b      	movs	r3, #11
 80016d4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016d6:	2300      	movs	r3, #0
 80016d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(EX_ADC_GPIO_Port, &GPIO_InitStruct);
 80016da:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80016de:	4619      	mov	r1, r3
 80016e0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80016e4:	f000 fcdc 	bl	80020a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE12_Pin */
  GPIO_InitStruct.Pin = PE12_Pin;
 80016e8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80016ec:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80016ee:	2303      	movs	r3, #3
 80016f0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016f2:	2300      	movs	r3, #0
 80016f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(PE12_GPIO_Port, &GPIO_InitStruct);
 80016f6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80016fa:	4619      	mov	r1, r3
 80016fc:	4808      	ldr	r0, [pc, #32]	@ (8001720 <MX_GPIO_Init+0x5f8>)
 80016fe:	f000 fccf 	bl	80020a0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001702:	bf00      	nop
 8001704:	3738      	adds	r7, #56	@ 0x38
 8001706:	46bd      	mov	sp, r7
 8001708:	bd80      	pop	{r7, pc}
 800170a:	bf00      	nop
 800170c:	48000800 	.word	0x48000800
 8001710:	48001400 	.word	0x48001400
 8001714:	48001800 	.word	0x48001800
 8001718:	48000c00 	.word	0x48000c00
 800171c:	48000400 	.word	0x48000400
 8001720:	48001000 	.word	0x48001000

08001724 <aiRun>:

/* USER CODE BEGIN 4 */

int aiRun(const void *in_data, void *out_data) {
 8001724:	b580      	push	{r7, lr}
 8001726:	b084      	sub	sp, #16
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
 800172c:	6039      	str	r1, [r7, #0]

	ai_i32 n_batch;
	ai_error err;
/*riempimento buffer di input ed output*/
	ai_input[0].data = AI_HANDLE_PTR(in_data);
 800172e:	4b11      	ldr	r3, [pc, #68]	@ (8001774 <aiRun+0x50>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	687a      	ldr	r2, [r7, #4]
 8001734:	605a      	str	r2, [r3, #4]
	ai_output[0].data = AI_HANDLE_PTR(out_data);
 8001736:	4b10      	ldr	r3, [pc, #64]	@ (8001778 <aiRun+0x54>)
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	683a      	ldr	r2, [r7, #0]
 800173c:	605a      	str	r2, [r3, #4]
/*run*/
	n_batch = ai_model_run(network, &ai_input[0], &ai_output[0]);
 800173e:	4b0f      	ldr	r3, [pc, #60]	@ (800177c <aiRun+0x58>)
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	4a0c      	ldr	r2, [pc, #48]	@ (8001774 <aiRun+0x50>)
 8001744:	6811      	ldr	r1, [r2, #0]
 8001746:	4a0c      	ldr	r2, [pc, #48]	@ (8001778 <aiRun+0x54>)
 8001748:	6812      	ldr	r2, [r2, #0]
 800174a:	4618      	mov	r0, r3
 800174c:	f009 fbb6 	bl	800aebc <ai_model_run>
 8001750:	60f8      	str	r0, [r7, #12]
	if (n_batch != 1) {
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	2b01      	cmp	r3, #1
 8001756:	d008      	beq.n	800176a <aiRun+0x46>
		err = ai_model_get_error(network);
 8001758:	4b08      	ldr	r3, [pc, #32]	@ (800177c <aiRun+0x58>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	4618      	mov	r0, r3
 800175e:	f009 fa9d 	bl	800ac9c <ai_model_get_error>
 8001762:	4603      	mov	r3, r0
 8001764:	60bb      	str	r3, [r7, #8]
		Error_Handler();
 8001766:	f000 f961 	bl	8001a2c <Error_Handler>
	};

	return 0;
 800176a:	2300      	movs	r3, #0
}
 800176c:	4618      	mov	r0, r3
 800176e:	3710      	adds	r7, #16
 8001770:	46bd      	mov	sp, r7
 8001772:	bd80      	pop	{r7, pc}
 8001774:	20008304 	.word	0x20008304
 8001778:	20008308 	.word	0x20008308
 800177c:	2000123c 	.word	0x2000123c

08001780 <aiInit>:

int aiInit(void) {
 8001780:	b580      	push	{r7, lr}
 8001782:	b082      	sub	sp, #8
 8001784:	af00      	add	r7, sp, #0
  ai_error err;

  /* Create and initialize the c-model */
  const ai_handle acts[] = { activations };
 8001786:	4b13      	ldr	r3, [pc, #76]	@ (80017d4 <aiInit+0x54>)
 8001788:	603b      	str	r3, [r7, #0]
  err = ai_model_create_and_init(&network, acts, NULL);
 800178a:	463b      	mov	r3, r7
 800178c:	2200      	movs	r2, #0
 800178e:	4619      	mov	r1, r3
 8001790:	4811      	ldr	r0, [pc, #68]	@ (80017d8 <aiInit+0x58>)
 8001792:	f009 faa5 	bl	800ace0 <ai_model_create_and_init>
 8001796:	4603      	mov	r3, r0
 8001798:	607b      	str	r3, [r7, #4]
  if (err.type != AI_ERROR_NONE) {
 800179a:	793b      	ldrb	r3, [r7, #4]
 800179c:	2b00      	cmp	r3, #0
 800179e:	d001      	beq.n	80017a4 <aiInit+0x24>
	  Error_Handler();
 80017a0:	f000 f944 	bl	8001a2c <Error_Handler>
  }

  /* Reteive pointers to the model's input/output tensors */
  ai_input = ai_model_inputs_get(network, NULL);
 80017a4:	4b0c      	ldr	r3, [pc, #48]	@ (80017d8 <aiInit+0x58>)
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	2100      	movs	r1, #0
 80017aa:	4618      	mov	r0, r3
 80017ac:	f009 fb16 	bl	800addc <ai_model_inputs_get>
 80017b0:	4603      	mov	r3, r0
 80017b2:	4a0a      	ldr	r2, [pc, #40]	@ (80017dc <aiInit+0x5c>)
 80017b4:	6013      	str	r3, [r2, #0]
  ai_output = ai_model_outputs_get(network, NULL);
 80017b6:	4b08      	ldr	r3, [pc, #32]	@ (80017d8 <aiInit+0x58>)
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	2100      	movs	r1, #0
 80017bc:	4618      	mov	r0, r3
 80017be:	f009 fb27 	bl	800ae10 <ai_model_outputs_get>
 80017c2:	4603      	mov	r3, r0
 80017c4:	4a06      	ldr	r2, [pc, #24]	@ (80017e0 <aiInit+0x60>)
 80017c6:	6013      	str	r3, [r2, #0]

  return 0;
 80017c8:	2300      	movs	r3, #0
}
 80017ca:	4618      	mov	r0, r3
 80017cc:	3708      	adds	r7, #8
 80017ce:	46bd      	mov	sp, r7
 80017d0:	bd80      	pop	{r7, pc}
 80017d2:	bf00      	nop
 80017d4:	20001240 	.word	0x20001240
 80017d8:	2000123c 	.word	0x2000123c
 80017dc:	20008304 	.word	0x20008304
 80017e0:	20008308 	.word	0x20008308

080017e4 <acquire_and_process_data>:

void acquire_and_process_data(IN_TYPE* in_data, int j, IN_TYPE* val)
{
 80017e4:	b480      	push	{r7}
 80017e6:	b087      	sub	sp, #28
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	60f8      	str	r0, [r7, #12]
 80017ec:	60b9      	str	r1, [r7, #8]
 80017ee:	607a      	str	r2, [r7, #4]
		for (int i = 0; i < AI_MODEL_IN_1_SIZE; i++)
 80017f0:	2300      	movs	r3, #0
 80017f2:	617b      	str	r3, [r7, #20]
 80017f4:	e00e      	b.n	8001814 <acquire_and_process_data+0x30>
			in_data[i] = val[i+j];
 80017f6:	697a      	ldr	r2, [r7, #20]
 80017f8:	68bb      	ldr	r3, [r7, #8]
 80017fa:	4413      	add	r3, r2
 80017fc:	009b      	lsls	r3, r3, #2
 80017fe:	687a      	ldr	r2, [r7, #4]
 8001800:	441a      	add	r2, r3
 8001802:	697b      	ldr	r3, [r7, #20]
 8001804:	009b      	lsls	r3, r3, #2
 8001806:	68f9      	ldr	r1, [r7, #12]
 8001808:	440b      	add	r3, r1
 800180a:	6812      	ldr	r2, [r2, #0]
 800180c:	601a      	str	r2, [r3, #0]
		for (int i = 0; i < AI_MODEL_IN_1_SIZE; i++)
 800180e:	697b      	ldr	r3, [r7, #20]
 8001810:	3301      	adds	r3, #1
 8001812:	617b      	str	r3, [r7, #20]
 8001814:	697b      	ldr	r3, [r7, #20]
 8001816:	2b62      	cmp	r3, #98	@ 0x62
 8001818:	dded      	ble.n	80017f6 <acquire_and_process_data+0x12>
}
 800181a:	bf00      	nop
 800181c:	bf00      	nop
 800181e:	371c      	adds	r7, #28
 8001820:	46bd      	mov	sp, r7
 8001822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001826:	4770      	bx	lr

08001828 <net_run>:

int net_run(IN_TYPE* in_data, int j, IN_TYPE* val,IN_TYPE* out_data)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b088      	sub	sp, #32
 800182c:	af00      	add	r7, sp, #0
 800182e:	60f8      	str	r0, [r7, #12]
 8001830:	60b9      	str	r1, [r7, #8]
 8001832:	607a      	str	r2, [r7, #4]
 8001834:	603b      	str	r3, [r7, #0]
	ai_float risultato;
	uint16_t et;

	acquire_and_process_data(in_data, j, val);
 8001836:	687a      	ldr	r2, [r7, #4]
 8001838:	68b9      	ldr	r1, [r7, #8]
 800183a:	68f8      	ldr	r0, [r7, #12]
 800183c:	f7ff ffd2 	bl	80017e4 <acquire_and_process_data>

	HAL_TIM_Base_Start(&htim1);
 8001840:	4819      	ldr	r0, [pc, #100]	@ (80018a8 <net_run+0x80>)
 8001842:	f005 f899 	bl	8006978 <HAL_TIM_Base_Start>
	et = __HAL_TIM_GET_COUNTER(&htim1);
 8001846:	4b18      	ldr	r3, [pc, #96]	@ (80018a8 <net_run+0x80>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800184c:	83fb      	strh	r3, [r7, #30]

	aiRun(in_data, out_data);
 800184e:	6839      	ldr	r1, [r7, #0]
 8001850:	68f8      	ldr	r0, [r7, #12]
 8001852:	f7ff ff67 	bl	8001724 <aiRun>

	et = __HAL_TIM_GET_COUNTER(&htim1) - et;
 8001856:	4b14      	ldr	r3, [pc, #80]	@ (80018a8 <net_run+0x80>)
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800185c:	b29a      	uxth	r2, r3
 800185e:	8bfb      	ldrh	r3, [r7, #30]
 8001860:	1ad3      	subs	r3, r2, r3
 8001862:	83fb      	strh	r3, [r7, #30]
    sprintf(buf, "finestra %d : %uus\n", j,  et);
 8001864:	8bfb      	ldrh	r3, [r7, #30]
 8001866:	68ba      	ldr	r2, [r7, #8]
 8001868:	4910      	ldr	r1, [pc, #64]	@ (80018ac <net_run+0x84>)
 800186a:	4811      	ldr	r0, [pc, #68]	@ (80018b0 <net_run+0x88>)
 800186c:	f00b fd08 	bl	800d280 <siprintf>
    int lunghezza_stringa = strlen(buf);
 8001870:	480f      	ldr	r0, [pc, #60]	@ (80018b0 <net_run+0x88>)
 8001872:	f7fe fcc5 	bl	8000200 <strlen>
 8001876:	4603      	mov	r3, r0
 8001878:	61bb      	str	r3, [r7, #24]
    w_report(buf, lunghezza_stringa);
 800187a:	69b9      	ldr	r1, [r7, #24]
 800187c:	480c      	ldr	r0, [pc, #48]	@ (80018b0 <net_run+0x88>)
 800187e:	f000 f89d 	bl	80019bc <w_report>

    if (QUANTIZZAZIONE)
    	risultato = dequan(out_data);
    else
    	risultato = out_data[0];
 8001882:	683b      	ldr	r3, [r7, #0]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	617b      	str	r3, [r7, #20]
    if (STANDARDIZZAZIONE){
    write_to_sd(risultato * 3999.0);}
 8001888:	edd7 7a05 	vldr	s15, [r7, #20]
 800188c:	ed9f 7a09 	vldr	s14, [pc, #36]	@ 80018b4 <net_run+0x8c>
 8001890:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001894:	eeb0 0a67 	vmov.f32	s0, s15
 8001898:	f000 f85c 	bl	8001954 <write_to_sd>
    else{
    write_to_sd(risultato);}

	return 0;
 800189c:	2300      	movs	r3, #0
}
 800189e:	4618      	mov	r0, r3
 80018a0:	3720      	adds	r7, #32
 80018a2:	46bd      	mov	sp, r7
 80018a4:	bd80      	pop	{r7, pc}
 80018a6:	bf00      	nop
 80018a8:	20000afc 	.word	0x20000afc
 80018ac:	0800da98 	.word	0x0800da98
 80018b0:	200011d8 	.word	0x200011d8
 80018b4:	4579f000 	.word	0x4579f000

080018b8 <read_from_sd>:
/*funzione che legge dalla scheda sd con un offset appropriato*/
FRESULT read_from_sd(long int f_to_r, ai_float* valori_letti, int chunk)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b088      	sub	sp, #32
 80018bc:	af00      	add	r7, sp, #0
 80018be:	60f8      	str	r0, [r7, #12]
 80018c0:	60b9      	str	r1, [r7, #8]
 80018c2:	607a      	str	r2, [r7, #4]
	FRESULT er;
	er = f_open(&file_in, F_INPUT , FA_READ);
 80018c4:	2201      	movs	r2, #1
 80018c6:	4921      	ldr	r1, [pc, #132]	@ (800194c <read_from_sd+0x94>)
 80018c8:	4821      	ldr	r0, [pc, #132]	@ (8001950 <read_from_sd+0x98>)
 80018ca:	f008 f905 	bl	8009ad8 <f_open>
 80018ce:	4603      	mov	r3, r0
 80018d0:	77fb      	strb	r3, [r7, #31]
	if(er != FR_OK)
 80018d2:	7ffb      	ldrb	r3, [r7, #31]
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d001      	beq.n	80018dc <read_from_sd+0x24>
	{
		Error_Handler();
 80018d8:	f000 f8a8 	bl	8001a2c <Error_Handler>
	}
	int offset = chunk * 10000 *sizeof(ai_float);
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	f649 4240 	movw	r2, #40000	@ 0x9c40
 80018e2:	fb02 f303 	mul.w	r3, r2, r3
 80018e6:	61bb      	str	r3, [r7, #24]
	er = f_lseek(&file_in, offset);
 80018e8:	69bb      	ldr	r3, [r7, #24]
 80018ea:	4619      	mov	r1, r3
 80018ec:	4818      	ldr	r0, [pc, #96]	@ (8001950 <read_from_sd+0x98>)
 80018ee:	f008 fe09 	bl	800a504 <f_lseek>
 80018f2:	4603      	mov	r3, r0
 80018f4:	77fb      	strb	r3, [r7, #31]
	if(er != FR_OK)
 80018f6:	7ffb      	ldrb	r3, [r7, #31]
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d001      	beq.n	8001900 <read_from_sd+0x48>
	{
		Error_Handler();
 80018fc:	f000 f896 	bl	8001a2c <Error_Handler>
	}

	int br;

	er = f_read(&file_in, valori_letti + AI_MODEL_IN_1_SIZE - 1, sizeof(ai_float) * f_to_r, (void*) &br);
 8001900:	68bb      	ldr	r3, [r7, #8]
 8001902:	f503 71c4 	add.w	r1, r3, #392	@ 0x188
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	009a      	lsls	r2, r3, #2
 800190a:	f107 0314 	add.w	r3, r7, #20
 800190e:	4810      	ldr	r0, [pc, #64]	@ (8001950 <read_from_sd+0x98>)
 8001910:	f008 fa9c 	bl	8009e4c <f_read>
 8001914:	4603      	mov	r3, r0
 8001916:	77fb      	strb	r3, [r7, #31]
	if((er != FR_OK)||br != (sizeof(ai_float) * f_to_r))
 8001918:	7ffb      	ldrb	r3, [r7, #31]
 800191a:	2b00      	cmp	r3, #0
 800191c:	d104      	bne.n	8001928 <read_from_sd+0x70>
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	009b      	lsls	r3, r3, #2
 8001922:	697a      	ldr	r2, [r7, #20]
 8001924:	4293      	cmp	r3, r2
 8001926:	d001      	beq.n	800192c <read_from_sd+0x74>
	{
	   	Error_Handler();
 8001928:	f000 f880 	bl	8001a2c <Error_Handler>
	}
	er = f_close(&file_in);
 800192c:	4808      	ldr	r0, [pc, #32]	@ (8001950 <read_from_sd+0x98>)
 800192e:	f008 fdbf 	bl	800a4b0 <f_close>
 8001932:	4603      	mov	r3, r0
 8001934:	77fb      	strb	r3, [r7, #31]
	if(er != FR_OK)
 8001936:	7ffb      	ldrb	r3, [r7, #31]
 8001938:	2b00      	cmp	r3, #0
 800193a:	d001      	beq.n	8001940 <read_from_sd+0x88>
	{
		Error_Handler();
 800193c:	f000 f876 	bl	8001a2c <Error_Handler>
	}
	return er;
 8001940:	7ffb      	ldrb	r3, [r7, #31]
}
 8001942:	4618      	mov	r0, r3
 8001944:	3720      	adds	r7, #32
 8001946:	46bd      	mov	sp, r7
 8001948:	bd80      	pop	{r7, pc}
 800194a:	bf00      	nop
 800194c:	0800da3c 	.word	0x0800da3c
 8001950:	20000d78 	.word	0x20000d78

08001954 <write_to_sd>:
/*scrittura del risultato in SD*/
void write_to_sd (ai_float num)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	b084      	sub	sp, #16
 8001958:	af00      	add	r7, sp, #0
 800195a:	ed87 0a01 	vstr	s0, [r7, #4]
	FRESULT er;
	int bw;
	er = f_open(&file_out, F_OUT, FA_WRITE | FA_OPEN_APPEND);
 800195e:	2232      	movs	r2, #50	@ 0x32
 8001960:	4914      	ldr	r1, [pc, #80]	@ (80019b4 <write_to_sd+0x60>)
 8001962:	4815      	ldr	r0, [pc, #84]	@ (80019b8 <write_to_sd+0x64>)
 8001964:	f008 f8b8 	bl	8009ad8 <f_open>
 8001968:	4603      	mov	r3, r0
 800196a:	73fb      	strb	r3, [r7, #15]
	if(er != FR_OK)
 800196c:	7bfb      	ldrb	r3, [r7, #15]
 800196e:	2b00      	cmp	r3, #0
 8001970:	d001      	beq.n	8001976 <write_to_sd+0x22>
	{
		 Error_Handler();
 8001972:	f000 f85b 	bl	8001a2c <Error_Handler>
	}
	er = f_write(&file_out, &num, sizeof(num), (void *)&bw);
 8001976:	f107 0308 	add.w	r3, r7, #8
 800197a:	1d39      	adds	r1, r7, #4
 800197c:	2204      	movs	r2, #4
 800197e:	480e      	ldr	r0, [pc, #56]	@ (80019b8 <write_to_sd+0x64>)
 8001980:	f008 fba3 	bl	800a0ca <f_write>
 8001984:	4603      	mov	r3, r0
 8001986:	73fb      	strb	r3, [r7, #15]
	if((er != FR_OK)||(bw == 0))
 8001988:	7bfb      	ldrb	r3, [r7, #15]
 800198a:	2b00      	cmp	r3, #0
 800198c:	d102      	bne.n	8001994 <write_to_sd+0x40>
 800198e:	68bb      	ldr	r3, [r7, #8]
 8001990:	2b00      	cmp	r3, #0
 8001992:	d101      	bne.n	8001998 <write_to_sd+0x44>
	{
		Error_Handler();
 8001994:	f000 f84a 	bl	8001a2c <Error_Handler>
	}
	er = f_close(&file_out);
 8001998:	4807      	ldr	r0, [pc, #28]	@ (80019b8 <write_to_sd+0x64>)
 800199a:	f008 fd89 	bl	800a4b0 <f_close>
 800199e:	4603      	mov	r3, r0
 80019a0:	73fb      	strb	r3, [r7, #15]
	if(er != FR_OK)
 80019a2:	7bfb      	ldrb	r3, [r7, #15]
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d001      	beq.n	80019ac <write_to_sd+0x58>
	{
		 Error_Handler();
 80019a8:	f000 f840 	bl	8001a2c <Error_Handler>
	}

}
 80019ac:	bf00      	nop
 80019ae:	3710      	adds	r7, #16
 80019b0:	46bd      	mov	sp, r7
 80019b2:	bd80      	pop	{r7, pc}
 80019b4:	0800daac 	.word	0x0800daac
 80019b8:	20000b48 	.word	0x20000b48

080019bc <w_report>:
void w_report(char* stringa, int l_str)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	b084      	sub	sp, #16
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
 80019c4:	6039      	str	r1, [r7, #0]
	FRESULT er;
	int bw;
	er = f_open(&f_report, F_REPORT, FA_WRITE | FA_OPEN_APPEND);
 80019c6:	2232      	movs	r2, #50	@ 0x32
 80019c8:	4916      	ldr	r1, [pc, #88]	@ (8001a24 <w_report+0x68>)
 80019ca:	4817      	ldr	r0, [pc, #92]	@ (8001a28 <w_report+0x6c>)
 80019cc:	f008 f884 	bl	8009ad8 <f_open>
 80019d0:	4603      	mov	r3, r0
 80019d2:	73fb      	strb	r3, [r7, #15]
	if(er != FR_OK)
 80019d4:	7bfb      	ldrb	r3, [r7, #15]
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d001      	beq.n	80019de <w_report+0x22>
	{
		Error_Handler();
 80019da:	f000 f827 	bl	8001a2c <Error_Handler>
	}
	er = f_write(&f_report, stringa, l_str, (void *)&bw);
 80019de:	683a      	ldr	r2, [r7, #0]
 80019e0:	f107 0308 	add.w	r3, r7, #8
 80019e4:	6879      	ldr	r1, [r7, #4]
 80019e6:	4810      	ldr	r0, [pc, #64]	@ (8001a28 <w_report+0x6c>)
 80019e8:	f008 fb6f 	bl	800a0ca <f_write>
 80019ec:	4603      	mov	r3, r0
 80019ee:	73fb      	strb	r3, [r7, #15]
	if((er != FR_OK)||(bw != l_str))
 80019f0:	7bfb      	ldrb	r3, [r7, #15]
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d103      	bne.n	80019fe <w_report+0x42>
 80019f6:	68bb      	ldr	r3, [r7, #8]
 80019f8:	683a      	ldr	r2, [r7, #0]
 80019fa:	429a      	cmp	r2, r3
 80019fc:	d001      	beq.n	8001a02 <w_report+0x46>
	{
		Error_Handler();
 80019fe:	f000 f815 	bl	8001a2c <Error_Handler>
	}
	er = f_close(&f_report);
 8001a02:	4809      	ldr	r0, [pc, #36]	@ (8001a28 <w_report+0x6c>)
 8001a04:	f008 fd54 	bl	800a4b0 <f_close>
 8001a08:	4603      	mov	r3, r0
 8001a0a:	73fb      	strb	r3, [r7, #15]
	if((er != FR_OK)||(bw == 0))
 8001a0c:	7bfb      	ldrb	r3, [r7, #15]
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d102      	bne.n	8001a18 <w_report+0x5c>
 8001a12:	68bb      	ldr	r3, [r7, #8]
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d101      	bne.n	8001a1c <w_report+0x60>
	{
		Error_Handler();
 8001a18:	f000 f808 	bl	8001a2c <Error_Handler>
	}
}
 8001a1c:	bf00      	nop
 8001a1e:	3710      	adds	r7, #16
 8001a20:	46bd      	mov	sp, r7
 8001a22:	bd80      	pop	{r7, pc}
 8001a24:	0800dab8 	.word	0x0800dab8
 8001a28:	20000fa8 	.word	0x20000fa8

08001a2c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a30:	b672      	cpsid	i
}
 8001a32:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	  /* User can add his own implementation to report the HAL error return state */
	  __disable_irq();
	  w_report("errore", strlen("errore"));
 8001a34:	2106      	movs	r1, #6
 8001a36:	4805      	ldr	r0, [pc, #20]	@ (8001a4c <Error_Handler+0x20>)
 8001a38:	f7ff ffc0 	bl	80019bc <w_report>
	  HAL_GPIO_WritePin(GPIOE, LED1_Pin|DCDC_2_EN_Pin, GPIO_PIN_RESET);
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	f242 0102 	movw	r1, #8194	@ 0x2002
 8001a42:	4803      	ldr	r0, [pc, #12]	@ (8001a50 <Error_Handler+0x24>)
 8001a44:	f000 fcd6 	bl	80023f4 <HAL_GPIO_WritePin>
	  while (1)
 8001a48:	bf00      	nop
 8001a4a:	e7fd      	b.n	8001a48 <Error_Handler+0x1c>
 8001a4c:	0800dac4 	.word	0x0800dac4
 8001a50:	48001000 	.word	0x48001000

08001a54 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a54:	b480      	push	{r7}
 8001a56:	b083      	sub	sp, #12
 8001a58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a5a:	4b0f      	ldr	r3, [pc, #60]	@ (8001a98 <HAL_MspInit+0x44>)
 8001a5c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001a5e:	4a0e      	ldr	r2, [pc, #56]	@ (8001a98 <HAL_MspInit+0x44>)
 8001a60:	f043 0301 	orr.w	r3, r3, #1
 8001a64:	6613      	str	r3, [r2, #96]	@ 0x60
 8001a66:	4b0c      	ldr	r3, [pc, #48]	@ (8001a98 <HAL_MspInit+0x44>)
 8001a68:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001a6a:	f003 0301 	and.w	r3, r3, #1
 8001a6e:	607b      	str	r3, [r7, #4]
 8001a70:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a72:	4b09      	ldr	r3, [pc, #36]	@ (8001a98 <HAL_MspInit+0x44>)
 8001a74:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a76:	4a08      	ldr	r2, [pc, #32]	@ (8001a98 <HAL_MspInit+0x44>)
 8001a78:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001a7c:	6593      	str	r3, [r2, #88]	@ 0x58
 8001a7e:	4b06      	ldr	r3, [pc, #24]	@ (8001a98 <HAL_MspInit+0x44>)
 8001a80:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a82:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a86:	603b      	str	r3, [r7, #0]
 8001a88:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a8a:	bf00      	nop
 8001a8c:	370c      	adds	r7, #12
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a94:	4770      	bx	lr
 8001a96:	bf00      	nop
 8001a98:	40021000 	.word	0x40021000

08001a9c <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b0b2      	sub	sp, #200	@ 0xc8
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001aa4:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	601a      	str	r2, [r3, #0]
 8001aac:	605a      	str	r2, [r3, #4]
 8001aae:	609a      	str	r2, [r3, #8]
 8001ab0:	60da      	str	r2, [r3, #12]
 8001ab2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001ab4:	f107 0318 	add.w	r3, r7, #24
 8001ab8:	229c      	movs	r2, #156	@ 0x9c
 8001aba:	2100      	movs	r1, #0
 8001abc:	4618      	mov	r0, r3
 8001abe:	f00b fbff 	bl	800d2c0 <memset>
  if(hsd->Instance==SDMMC1)
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	4a37      	ldr	r2, [pc, #220]	@ (8001ba4 <HAL_SD_MspInit+0x108>)
 8001ac8:	4293      	cmp	r3, r2
 8001aca:	d166      	bne.n	8001b9a <HAL_SD_MspInit+0xfe>

  /* USER CODE END SDMMC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SDMMC1;
 8001acc:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8001ad0:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_HSI48;
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001ad8:	f107 0318 	add.w	r3, r7, #24
 8001adc:	4618      	mov	r0, r3
 8001ade:	f001 fc49 	bl	8003374 <HAL_RCCEx_PeriphCLKConfig>
 8001ae2:	4603      	mov	r3, r0
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d001      	beq.n	8001aec <HAL_SD_MspInit+0x50>
    {
      Error_Handler();
 8001ae8:	f7ff ffa0 	bl	8001a2c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8001aec:	4b2e      	ldr	r3, [pc, #184]	@ (8001ba8 <HAL_SD_MspInit+0x10c>)
 8001aee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001af0:	4a2d      	ldr	r2, [pc, #180]	@ (8001ba8 <HAL_SD_MspInit+0x10c>)
 8001af2:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001af6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001af8:	4b2b      	ldr	r3, [pc, #172]	@ (8001ba8 <HAL_SD_MspInit+0x10c>)
 8001afa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001afc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001b00:	617b      	str	r3, [r7, #20]
 8001b02:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b04:	4b28      	ldr	r3, [pc, #160]	@ (8001ba8 <HAL_SD_MspInit+0x10c>)
 8001b06:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b08:	4a27      	ldr	r2, [pc, #156]	@ (8001ba8 <HAL_SD_MspInit+0x10c>)
 8001b0a:	f043 0304 	orr.w	r3, r3, #4
 8001b0e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001b10:	4b25      	ldr	r3, [pc, #148]	@ (8001ba8 <HAL_SD_MspInit+0x10c>)
 8001b12:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b14:	f003 0304 	and.w	r3, r3, #4
 8001b18:	613b      	str	r3, [r7, #16]
 8001b1a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b1c:	4b22      	ldr	r3, [pc, #136]	@ (8001ba8 <HAL_SD_MspInit+0x10c>)
 8001b1e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b20:	4a21      	ldr	r2, [pc, #132]	@ (8001ba8 <HAL_SD_MspInit+0x10c>)
 8001b22:	f043 0308 	orr.w	r3, r3, #8
 8001b26:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001b28:	4b1f      	ldr	r3, [pc, #124]	@ (8001ba8 <HAL_SD_MspInit+0x10c>)
 8001b2a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b2c:	f003 0308 	and.w	r3, r3, #8
 8001b30:	60fb      	str	r3, [r7, #12]
 8001b32:	68fb      	ldr	r3, [r7, #12]
    PC9     ------> SDMMC1_D1
    PD2     ------> SDMMC1_CMD
    PC12     ------> SDMMC1_CK
    PC8     ------> SDMMC1_D0
    */
    GPIO_InitStruct.Pin = SDMMC_D3_Pin|SDMMC_D2_Pin|SDMMC_D1_Pin|SDMMC_CK_Pin
 8001b34:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 8001b38:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
                          |SDMMC_D0_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b3c:	2302      	movs	r3, #2
 8001b3e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b42:	2300      	movs	r3, #0
 8001b44:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b48:	2303      	movs	r3, #3
 8001b4a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001b4e:	230c      	movs	r3, #12
 8001b50:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b54:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 8001b58:	4619      	mov	r1, r3
 8001b5a:	4814      	ldr	r0, [pc, #80]	@ (8001bac <HAL_SD_MspInit+0x110>)
 8001b5c:	f000 faa0 	bl	80020a0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SDMMC_CMD_Pin;
 8001b60:	2304      	movs	r3, #4
 8001b62:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b66:	2302      	movs	r3, #2
 8001b68:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b72:	2303      	movs	r3, #3
 8001b74:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001b78:	230c      	movs	r3, #12
 8001b7a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    HAL_GPIO_Init(SDMMC_CMD_GPIO_Port, &GPIO_InitStruct);
 8001b7e:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 8001b82:	4619      	mov	r1, r3
 8001b84:	480a      	ldr	r0, [pc, #40]	@ (8001bb0 <HAL_SD_MspInit+0x114>)
 8001b86:	f000 fa8b 	bl	80020a0 <HAL_GPIO_Init>

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 0, 0);
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	2100      	movs	r1, #0
 8001b8e:	2031      	movs	r0, #49	@ 0x31
 8001b90:	f000 fa4f 	bl	8002032 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 8001b94:	2031      	movs	r0, #49	@ 0x31
 8001b96:	f000 fa68 	bl	800206a <HAL_NVIC_EnableIRQ>

  /* USER CODE END SDMMC1_MspInit 1 */

  }

}
 8001b9a:	bf00      	nop
 8001b9c:	37c8      	adds	r7, #200	@ 0xc8
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	bd80      	pop	{r7, pc}
 8001ba2:	bf00      	nop
 8001ba4:	50062400 	.word	0x50062400
 8001ba8:	40021000 	.word	0x40021000
 8001bac:	48000800 	.word	0x48000800
 8001bb0:	48000c00 	.word	0x48000c00

08001bb4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	b085      	sub	sp, #20
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	4a0a      	ldr	r2, [pc, #40]	@ (8001bec <HAL_TIM_Base_MspInit+0x38>)
 8001bc2:	4293      	cmp	r3, r2
 8001bc4:	d10b      	bne.n	8001bde <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001bc6:	4b0a      	ldr	r3, [pc, #40]	@ (8001bf0 <HAL_TIM_Base_MspInit+0x3c>)
 8001bc8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001bca:	4a09      	ldr	r2, [pc, #36]	@ (8001bf0 <HAL_TIM_Base_MspInit+0x3c>)
 8001bcc:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001bd0:	6613      	str	r3, [r2, #96]	@ 0x60
 8001bd2:	4b07      	ldr	r3, [pc, #28]	@ (8001bf0 <HAL_TIM_Base_MspInit+0x3c>)
 8001bd4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001bd6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001bda:	60fb      	str	r3, [r7, #12]
 8001bdc:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 8001bde:	bf00      	nop
 8001be0:	3714      	adds	r7, #20
 8001be2:	46bd      	mov	sp, r7
 8001be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be8:	4770      	bx	lr
 8001bea:	bf00      	nop
 8001bec:	40012c00 	.word	0x40012c00
 8001bf0:	40021000 	.word	0x40021000

08001bf4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001bf8:	bf00      	nop
 8001bfa:	e7fd      	b.n	8001bf8 <NMI_Handler+0x4>

08001bfc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001bfc:	b480      	push	{r7}
 8001bfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c00:	bf00      	nop
 8001c02:	e7fd      	b.n	8001c00 <HardFault_Handler+0x4>

08001c04 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c04:	b480      	push	{r7}
 8001c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c08:	bf00      	nop
 8001c0a:	e7fd      	b.n	8001c08 <MemManage_Handler+0x4>

08001c0c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c0c:	b480      	push	{r7}
 8001c0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c10:	bf00      	nop
 8001c12:	e7fd      	b.n	8001c10 <BusFault_Handler+0x4>

08001c14 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c14:	b480      	push	{r7}
 8001c16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c18:	bf00      	nop
 8001c1a:	e7fd      	b.n	8001c18 <UsageFault_Handler+0x4>

08001c1c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c20:	bf00      	nop
 8001c22:	46bd      	mov	sp, r7
 8001c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c28:	4770      	bx	lr

08001c2a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c2a:	b480      	push	{r7}
 8001c2c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c2e:	bf00      	nop
 8001c30:	46bd      	mov	sp, r7
 8001c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c36:	4770      	bx	lr

08001c38 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c38:	b480      	push	{r7}
 8001c3a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c3c:	bf00      	nop
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c44:	4770      	bx	lr

08001c46 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c46:	b580      	push	{r7, lr}
 8001c48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c4a:	f000 f8d3 	bl	8001df4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c4e:	bf00      	nop
 8001c50:	bd80      	pop	{r7, pc}
	...

08001c54 <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 8001c58:	4802      	ldr	r0, [pc, #8]	@ (8001c64 <SDMMC1_IRQHandler+0x10>)
 8001c5a:	f003 fbb9 	bl	80053d0 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 8001c5e:	bf00      	nop
 8001c60:	bd80      	pop	{r7, pc}
 8001c62:	bf00      	nop
 8001c64:	20000a7c 	.word	0x20000a7c

08001c68 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b086      	sub	sp, #24
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c70:	4a14      	ldr	r2, [pc, #80]	@ (8001cc4 <_sbrk+0x5c>)
 8001c72:	4b15      	ldr	r3, [pc, #84]	@ (8001cc8 <_sbrk+0x60>)
 8001c74:	1ad3      	subs	r3, r2, r3
 8001c76:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001c78:	697b      	ldr	r3, [r7, #20]
 8001c7a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c7c:	4b13      	ldr	r3, [pc, #76]	@ (8001ccc <_sbrk+0x64>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d102      	bne.n	8001c8a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c84:	4b11      	ldr	r3, [pc, #68]	@ (8001ccc <_sbrk+0x64>)
 8001c86:	4a12      	ldr	r2, [pc, #72]	@ (8001cd0 <_sbrk+0x68>)
 8001c88:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c8a:	4b10      	ldr	r3, [pc, #64]	@ (8001ccc <_sbrk+0x64>)
 8001c8c:	681a      	ldr	r2, [r3, #0]
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	4413      	add	r3, r2
 8001c92:	693a      	ldr	r2, [r7, #16]
 8001c94:	429a      	cmp	r2, r3
 8001c96:	d207      	bcs.n	8001ca8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001c98:	f00b fb2a 	bl	800d2f0 <__errno>
 8001c9c:	4603      	mov	r3, r0
 8001c9e:	220c      	movs	r2, #12
 8001ca0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001ca2:	f04f 33ff 	mov.w	r3, #4294967295
 8001ca6:	e009      	b.n	8001cbc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001ca8:	4b08      	ldr	r3, [pc, #32]	@ (8001ccc <_sbrk+0x64>)
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001cae:	4b07      	ldr	r3, [pc, #28]	@ (8001ccc <_sbrk+0x64>)
 8001cb0:	681a      	ldr	r2, [r3, #0]
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	4413      	add	r3, r2
 8001cb6:	4a05      	ldr	r2, [pc, #20]	@ (8001ccc <_sbrk+0x64>)
 8001cb8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001cba:	68fb      	ldr	r3, [r7, #12]
}
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	3718      	adds	r7, #24
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	bd80      	pop	{r7, pc}
 8001cc4:	200a0000 	.word	0x200a0000
 8001cc8:	00001000 	.word	0x00001000
 8001ccc:	2000830c 	.word	0x2000830c
 8001cd0:	20040000 	.word	0x20040000

08001cd4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001cd4:	b480      	push	{r7}
 8001cd6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001cd8:	4b06      	ldr	r3, [pc, #24]	@ (8001cf4 <SystemInit+0x20>)
 8001cda:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001cde:	4a05      	ldr	r2, [pc, #20]	@ (8001cf4 <SystemInit+0x20>)
 8001ce0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001ce4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001ce8:	bf00      	nop
 8001cea:	46bd      	mov	sp, r7
 8001cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf0:	4770      	bx	lr
 8001cf2:	bf00      	nop
 8001cf4:	e000ed00 	.word	0xe000ed00

08001cf8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001cf8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001d30 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001cfc:	f7ff ffea 	bl	8001cd4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001d00:	480c      	ldr	r0, [pc, #48]	@ (8001d34 <LoopForever+0x6>)
  ldr r1, =_edata
 8001d02:	490d      	ldr	r1, [pc, #52]	@ (8001d38 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001d04:	4a0d      	ldr	r2, [pc, #52]	@ (8001d3c <LoopForever+0xe>)
  movs r3, #0
 8001d06:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d08:	e002      	b.n	8001d10 <LoopCopyDataInit>

08001d0a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d0a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d0c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d0e:	3304      	adds	r3, #4

08001d10 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d10:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d12:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d14:	d3f9      	bcc.n	8001d0a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d16:	4a0a      	ldr	r2, [pc, #40]	@ (8001d40 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001d18:	4c0a      	ldr	r4, [pc, #40]	@ (8001d44 <LoopForever+0x16>)
  movs r3, #0
 8001d1a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d1c:	e001      	b.n	8001d22 <LoopFillZerobss>

08001d1e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d1e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d20:	3204      	adds	r2, #4

08001d22 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d22:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d24:	d3fb      	bcc.n	8001d1e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001d26:	f00b fae9 	bl	800d2fc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001d2a:	f7fe fedf 	bl	8000aec <main>

08001d2e <LoopForever>:

LoopForever:
    b LoopForever
 8001d2e:	e7fe      	b.n	8001d2e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001d30:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8001d34:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d38:	20000a60 	.word	0x20000a60
  ldr r2, =_sidata
 8001d3c:	0810ccf4 	.word	0x0810ccf4
  ldr r2, =_sbss
 8001d40:	20000a60 	.word	0x20000a60
  ldr r4, =_ebss
 8001d44:	20008760 	.word	0x20008760

08001d48 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001d48:	e7fe      	b.n	8001d48 <ADC1_IRQHandler>

08001d4a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d4a:	b580      	push	{r7, lr}
 8001d4c:	b082      	sub	sp, #8
 8001d4e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001d50:	2300      	movs	r3, #0
 8001d52:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d54:	2003      	movs	r0, #3
 8001d56:	f000 f961 	bl	800201c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001d5a:	2000      	movs	r0, #0
 8001d5c:	f000 f80e 	bl	8001d7c <HAL_InitTick>
 8001d60:	4603      	mov	r3, r0
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d002      	beq.n	8001d6c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001d66:	2301      	movs	r3, #1
 8001d68:	71fb      	strb	r3, [r7, #7]
 8001d6a:	e001      	b.n	8001d70 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001d6c:	f7ff fe72 	bl	8001a54 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001d70:	79fb      	ldrb	r3, [r7, #7]
}
 8001d72:	4618      	mov	r0, r3
 8001d74:	3708      	adds	r7, #8
 8001d76:	46bd      	mov	sp, r7
 8001d78:	bd80      	pop	{r7, pc}
	...

08001d7c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b084      	sub	sp, #16
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001d84:	2300      	movs	r3, #0
 8001d86:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001d88:	4b17      	ldr	r3, [pc, #92]	@ (8001de8 <HAL_InitTick+0x6c>)
 8001d8a:	781b      	ldrb	r3, [r3, #0]
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d023      	beq.n	8001dd8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001d90:	4b16      	ldr	r3, [pc, #88]	@ (8001dec <HAL_InitTick+0x70>)
 8001d92:	681a      	ldr	r2, [r3, #0]
 8001d94:	4b14      	ldr	r3, [pc, #80]	@ (8001de8 <HAL_InitTick+0x6c>)
 8001d96:	781b      	ldrb	r3, [r3, #0]
 8001d98:	4619      	mov	r1, r3
 8001d9a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001d9e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001da2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001da6:	4618      	mov	r0, r3
 8001da8:	f000 f96d 	bl	8002086 <HAL_SYSTICK_Config>
 8001dac:	4603      	mov	r3, r0
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d10f      	bne.n	8001dd2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	2b0f      	cmp	r3, #15
 8001db6:	d809      	bhi.n	8001dcc <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001db8:	2200      	movs	r2, #0
 8001dba:	6879      	ldr	r1, [r7, #4]
 8001dbc:	f04f 30ff 	mov.w	r0, #4294967295
 8001dc0:	f000 f937 	bl	8002032 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001dc4:	4a0a      	ldr	r2, [pc, #40]	@ (8001df0 <HAL_InitTick+0x74>)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	6013      	str	r3, [r2, #0]
 8001dca:	e007      	b.n	8001ddc <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001dcc:	2301      	movs	r3, #1
 8001dce:	73fb      	strb	r3, [r7, #15]
 8001dd0:	e004      	b.n	8001ddc <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001dd2:	2301      	movs	r3, #1
 8001dd4:	73fb      	strb	r3, [r7, #15]
 8001dd6:	e001      	b.n	8001ddc <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001dd8:	2301      	movs	r3, #1
 8001dda:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001ddc:	7bfb      	ldrb	r3, [r7, #15]
}
 8001dde:	4618      	mov	r0, r3
 8001de0:	3710      	adds	r7, #16
 8001de2:	46bd      	mov	sp, r7
 8001de4:	bd80      	pop	{r7, pc}
 8001de6:	bf00      	nop
 8001de8:	20000008 	.word	0x20000008
 8001dec:	20000000 	.word	0x20000000
 8001df0:	20000004 	.word	0x20000004

08001df4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001df4:	b480      	push	{r7}
 8001df6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001df8:	4b06      	ldr	r3, [pc, #24]	@ (8001e14 <HAL_IncTick+0x20>)
 8001dfa:	781b      	ldrb	r3, [r3, #0]
 8001dfc:	461a      	mov	r2, r3
 8001dfe:	4b06      	ldr	r3, [pc, #24]	@ (8001e18 <HAL_IncTick+0x24>)
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	4413      	add	r3, r2
 8001e04:	4a04      	ldr	r2, [pc, #16]	@ (8001e18 <HAL_IncTick+0x24>)
 8001e06:	6013      	str	r3, [r2, #0]
}
 8001e08:	bf00      	nop
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e10:	4770      	bx	lr
 8001e12:	bf00      	nop
 8001e14:	20000008 	.word	0x20000008
 8001e18:	20008310 	.word	0x20008310

08001e1c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e1c:	b480      	push	{r7}
 8001e1e:	af00      	add	r7, sp, #0
  return uwTick;
 8001e20:	4b03      	ldr	r3, [pc, #12]	@ (8001e30 <HAL_GetTick+0x14>)
 8001e22:	681b      	ldr	r3, [r3, #0]
}
 8001e24:	4618      	mov	r0, r3
 8001e26:	46bd      	mov	sp, r7
 8001e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2c:	4770      	bx	lr
 8001e2e:	bf00      	nop
 8001e30:	20008310 	.word	0x20008310

08001e34 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b084      	sub	sp, #16
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e3c:	f7ff ffee 	bl	8001e1c <HAL_GetTick>
 8001e40:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e4c:	d005      	beq.n	8001e5a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001e4e:	4b0a      	ldr	r3, [pc, #40]	@ (8001e78 <HAL_Delay+0x44>)
 8001e50:	781b      	ldrb	r3, [r3, #0]
 8001e52:	461a      	mov	r2, r3
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	4413      	add	r3, r2
 8001e58:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001e5a:	bf00      	nop
 8001e5c:	f7ff ffde 	bl	8001e1c <HAL_GetTick>
 8001e60:	4602      	mov	r2, r0
 8001e62:	68bb      	ldr	r3, [r7, #8]
 8001e64:	1ad3      	subs	r3, r2, r3
 8001e66:	68fa      	ldr	r2, [r7, #12]
 8001e68:	429a      	cmp	r2, r3
 8001e6a:	d8f7      	bhi.n	8001e5c <HAL_Delay+0x28>
  {
  }
}
 8001e6c:	bf00      	nop
 8001e6e:	bf00      	nop
 8001e70:	3710      	adds	r7, #16
 8001e72:	46bd      	mov	sp, r7
 8001e74:	bd80      	pop	{r7, pc}
 8001e76:	bf00      	nop
 8001e78:	20000008 	.word	0x20000008

08001e7c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e7c:	b480      	push	{r7}
 8001e7e:	b085      	sub	sp, #20
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	f003 0307 	and.w	r3, r3, #7
 8001e8a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e8c:	4b0c      	ldr	r3, [pc, #48]	@ (8001ec0 <__NVIC_SetPriorityGrouping+0x44>)
 8001e8e:	68db      	ldr	r3, [r3, #12]
 8001e90:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e92:	68ba      	ldr	r2, [r7, #8]
 8001e94:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001e98:	4013      	ands	r3, r2
 8001e9a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ea0:	68bb      	ldr	r3, [r7, #8]
 8001ea2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ea4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001ea8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001eac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001eae:	4a04      	ldr	r2, [pc, #16]	@ (8001ec0 <__NVIC_SetPriorityGrouping+0x44>)
 8001eb0:	68bb      	ldr	r3, [r7, #8]
 8001eb2:	60d3      	str	r3, [r2, #12]
}
 8001eb4:	bf00      	nop
 8001eb6:	3714      	adds	r7, #20
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ebe:	4770      	bx	lr
 8001ec0:	e000ed00 	.word	0xe000ed00

08001ec4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ec4:	b480      	push	{r7}
 8001ec6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ec8:	4b04      	ldr	r3, [pc, #16]	@ (8001edc <__NVIC_GetPriorityGrouping+0x18>)
 8001eca:	68db      	ldr	r3, [r3, #12]
 8001ecc:	0a1b      	lsrs	r3, r3, #8
 8001ece:	f003 0307 	and.w	r3, r3, #7
}
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eda:	4770      	bx	lr
 8001edc:	e000ed00 	.word	0xe000ed00

08001ee0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ee0:	b480      	push	{r7}
 8001ee2:	b083      	sub	sp, #12
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	4603      	mov	r3, r0
 8001ee8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001eea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	db0b      	blt.n	8001f0a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ef2:	79fb      	ldrb	r3, [r7, #7]
 8001ef4:	f003 021f 	and.w	r2, r3, #31
 8001ef8:	4907      	ldr	r1, [pc, #28]	@ (8001f18 <__NVIC_EnableIRQ+0x38>)
 8001efa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001efe:	095b      	lsrs	r3, r3, #5
 8001f00:	2001      	movs	r0, #1
 8001f02:	fa00 f202 	lsl.w	r2, r0, r2
 8001f06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001f0a:	bf00      	nop
 8001f0c:	370c      	adds	r7, #12
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f14:	4770      	bx	lr
 8001f16:	bf00      	nop
 8001f18:	e000e100 	.word	0xe000e100

08001f1c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f1c:	b480      	push	{r7}
 8001f1e:	b083      	sub	sp, #12
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	4603      	mov	r3, r0
 8001f24:	6039      	str	r1, [r7, #0]
 8001f26:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	db0a      	blt.n	8001f46 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f30:	683b      	ldr	r3, [r7, #0]
 8001f32:	b2da      	uxtb	r2, r3
 8001f34:	490c      	ldr	r1, [pc, #48]	@ (8001f68 <__NVIC_SetPriority+0x4c>)
 8001f36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f3a:	0112      	lsls	r2, r2, #4
 8001f3c:	b2d2      	uxtb	r2, r2
 8001f3e:	440b      	add	r3, r1
 8001f40:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f44:	e00a      	b.n	8001f5c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f46:	683b      	ldr	r3, [r7, #0]
 8001f48:	b2da      	uxtb	r2, r3
 8001f4a:	4908      	ldr	r1, [pc, #32]	@ (8001f6c <__NVIC_SetPriority+0x50>)
 8001f4c:	79fb      	ldrb	r3, [r7, #7]
 8001f4e:	f003 030f 	and.w	r3, r3, #15
 8001f52:	3b04      	subs	r3, #4
 8001f54:	0112      	lsls	r2, r2, #4
 8001f56:	b2d2      	uxtb	r2, r2
 8001f58:	440b      	add	r3, r1
 8001f5a:	761a      	strb	r2, [r3, #24]
}
 8001f5c:	bf00      	nop
 8001f5e:	370c      	adds	r7, #12
 8001f60:	46bd      	mov	sp, r7
 8001f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f66:	4770      	bx	lr
 8001f68:	e000e100 	.word	0xe000e100
 8001f6c:	e000ed00 	.word	0xe000ed00

08001f70 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f70:	b480      	push	{r7}
 8001f72:	b089      	sub	sp, #36	@ 0x24
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	60f8      	str	r0, [r7, #12]
 8001f78:	60b9      	str	r1, [r7, #8]
 8001f7a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	f003 0307 	and.w	r3, r3, #7
 8001f82:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f84:	69fb      	ldr	r3, [r7, #28]
 8001f86:	f1c3 0307 	rsb	r3, r3, #7
 8001f8a:	2b04      	cmp	r3, #4
 8001f8c:	bf28      	it	cs
 8001f8e:	2304      	movcs	r3, #4
 8001f90:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f92:	69fb      	ldr	r3, [r7, #28]
 8001f94:	3304      	adds	r3, #4
 8001f96:	2b06      	cmp	r3, #6
 8001f98:	d902      	bls.n	8001fa0 <NVIC_EncodePriority+0x30>
 8001f9a:	69fb      	ldr	r3, [r7, #28]
 8001f9c:	3b03      	subs	r3, #3
 8001f9e:	e000      	b.n	8001fa2 <NVIC_EncodePriority+0x32>
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fa4:	f04f 32ff 	mov.w	r2, #4294967295
 8001fa8:	69bb      	ldr	r3, [r7, #24]
 8001faa:	fa02 f303 	lsl.w	r3, r2, r3
 8001fae:	43da      	mvns	r2, r3
 8001fb0:	68bb      	ldr	r3, [r7, #8]
 8001fb2:	401a      	ands	r2, r3
 8001fb4:	697b      	ldr	r3, [r7, #20]
 8001fb6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001fb8:	f04f 31ff 	mov.w	r1, #4294967295
 8001fbc:	697b      	ldr	r3, [r7, #20]
 8001fbe:	fa01 f303 	lsl.w	r3, r1, r3
 8001fc2:	43d9      	mvns	r1, r3
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fc8:	4313      	orrs	r3, r2
         );
}
 8001fca:	4618      	mov	r0, r3
 8001fcc:	3724      	adds	r7, #36	@ 0x24
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd4:	4770      	bx	lr
	...

08001fd8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b082      	sub	sp, #8
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	3b01      	subs	r3, #1
 8001fe4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001fe8:	d301      	bcc.n	8001fee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001fea:	2301      	movs	r3, #1
 8001fec:	e00f      	b.n	800200e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001fee:	4a0a      	ldr	r2, [pc, #40]	@ (8002018 <SysTick_Config+0x40>)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	3b01      	subs	r3, #1
 8001ff4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ff6:	210f      	movs	r1, #15
 8001ff8:	f04f 30ff 	mov.w	r0, #4294967295
 8001ffc:	f7ff ff8e 	bl	8001f1c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002000:	4b05      	ldr	r3, [pc, #20]	@ (8002018 <SysTick_Config+0x40>)
 8002002:	2200      	movs	r2, #0
 8002004:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002006:	4b04      	ldr	r3, [pc, #16]	@ (8002018 <SysTick_Config+0x40>)
 8002008:	2207      	movs	r2, #7
 800200a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800200c:	2300      	movs	r3, #0
}
 800200e:	4618      	mov	r0, r3
 8002010:	3708      	adds	r7, #8
 8002012:	46bd      	mov	sp, r7
 8002014:	bd80      	pop	{r7, pc}
 8002016:	bf00      	nop
 8002018:	e000e010 	.word	0xe000e010

0800201c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	b082      	sub	sp, #8
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002024:	6878      	ldr	r0, [r7, #4]
 8002026:	f7ff ff29 	bl	8001e7c <__NVIC_SetPriorityGrouping>
}
 800202a:	bf00      	nop
 800202c:	3708      	adds	r7, #8
 800202e:	46bd      	mov	sp, r7
 8002030:	bd80      	pop	{r7, pc}

08002032 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002032:	b580      	push	{r7, lr}
 8002034:	b086      	sub	sp, #24
 8002036:	af00      	add	r7, sp, #0
 8002038:	4603      	mov	r3, r0
 800203a:	60b9      	str	r1, [r7, #8]
 800203c:	607a      	str	r2, [r7, #4]
 800203e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002040:	2300      	movs	r3, #0
 8002042:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002044:	f7ff ff3e 	bl	8001ec4 <__NVIC_GetPriorityGrouping>
 8002048:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800204a:	687a      	ldr	r2, [r7, #4]
 800204c:	68b9      	ldr	r1, [r7, #8]
 800204e:	6978      	ldr	r0, [r7, #20]
 8002050:	f7ff ff8e 	bl	8001f70 <NVIC_EncodePriority>
 8002054:	4602      	mov	r2, r0
 8002056:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800205a:	4611      	mov	r1, r2
 800205c:	4618      	mov	r0, r3
 800205e:	f7ff ff5d 	bl	8001f1c <__NVIC_SetPriority>
}
 8002062:	bf00      	nop
 8002064:	3718      	adds	r7, #24
 8002066:	46bd      	mov	sp, r7
 8002068:	bd80      	pop	{r7, pc}

0800206a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800206a:	b580      	push	{r7, lr}
 800206c:	b082      	sub	sp, #8
 800206e:	af00      	add	r7, sp, #0
 8002070:	4603      	mov	r3, r0
 8002072:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002074:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002078:	4618      	mov	r0, r3
 800207a:	f7ff ff31 	bl	8001ee0 <__NVIC_EnableIRQ>
}
 800207e:	bf00      	nop
 8002080:	3708      	adds	r7, #8
 8002082:	46bd      	mov	sp, r7
 8002084:	bd80      	pop	{r7, pc}

08002086 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002086:	b580      	push	{r7, lr}
 8002088:	b082      	sub	sp, #8
 800208a:	af00      	add	r7, sp, #0
 800208c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800208e:	6878      	ldr	r0, [r7, #4]
 8002090:	f7ff ffa2 	bl	8001fd8 <SysTick_Config>
 8002094:	4603      	mov	r3, r0
}
 8002096:	4618      	mov	r0, r3
 8002098:	3708      	adds	r7, #8
 800209a:	46bd      	mov	sp, r7
 800209c:	bd80      	pop	{r7, pc}
	...

080020a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80020a0:	b480      	push	{r7}
 80020a2:	b087      	sub	sp, #28
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
 80020a8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80020aa:	2300      	movs	r3, #0
 80020ac:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80020ae:	e166      	b.n	800237e <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	681a      	ldr	r2, [r3, #0]
 80020b4:	2101      	movs	r1, #1
 80020b6:	697b      	ldr	r3, [r7, #20]
 80020b8:	fa01 f303 	lsl.w	r3, r1, r3
 80020bc:	4013      	ands	r3, r2
 80020be:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	f000 8158 	beq.w	8002378 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80020c8:	683b      	ldr	r3, [r7, #0]
 80020ca:	685b      	ldr	r3, [r3, #4]
 80020cc:	f003 0303 	and.w	r3, r3, #3
 80020d0:	2b01      	cmp	r3, #1
 80020d2:	d005      	beq.n	80020e0 <HAL_GPIO_Init+0x40>
 80020d4:	683b      	ldr	r3, [r7, #0]
 80020d6:	685b      	ldr	r3, [r3, #4]
 80020d8:	f003 0303 	and.w	r3, r3, #3
 80020dc:	2b02      	cmp	r3, #2
 80020de:	d130      	bne.n	8002142 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	689b      	ldr	r3, [r3, #8]
 80020e4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80020e6:	697b      	ldr	r3, [r7, #20]
 80020e8:	005b      	lsls	r3, r3, #1
 80020ea:	2203      	movs	r2, #3
 80020ec:	fa02 f303 	lsl.w	r3, r2, r3
 80020f0:	43db      	mvns	r3, r3
 80020f2:	693a      	ldr	r2, [r7, #16]
 80020f4:	4013      	ands	r3, r2
 80020f6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	68da      	ldr	r2, [r3, #12]
 80020fc:	697b      	ldr	r3, [r7, #20]
 80020fe:	005b      	lsls	r3, r3, #1
 8002100:	fa02 f303 	lsl.w	r3, r2, r3
 8002104:	693a      	ldr	r2, [r7, #16]
 8002106:	4313      	orrs	r3, r2
 8002108:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	693a      	ldr	r2, [r7, #16]
 800210e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	685b      	ldr	r3, [r3, #4]
 8002114:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002116:	2201      	movs	r2, #1
 8002118:	697b      	ldr	r3, [r7, #20]
 800211a:	fa02 f303 	lsl.w	r3, r2, r3
 800211e:	43db      	mvns	r3, r3
 8002120:	693a      	ldr	r2, [r7, #16]
 8002122:	4013      	ands	r3, r2
 8002124:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002126:	683b      	ldr	r3, [r7, #0]
 8002128:	685b      	ldr	r3, [r3, #4]
 800212a:	091b      	lsrs	r3, r3, #4
 800212c:	f003 0201 	and.w	r2, r3, #1
 8002130:	697b      	ldr	r3, [r7, #20]
 8002132:	fa02 f303 	lsl.w	r3, r2, r3
 8002136:	693a      	ldr	r2, [r7, #16]
 8002138:	4313      	orrs	r3, r2
 800213a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	693a      	ldr	r2, [r7, #16]
 8002140:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002142:	683b      	ldr	r3, [r7, #0]
 8002144:	685b      	ldr	r3, [r3, #4]
 8002146:	f003 0303 	and.w	r3, r3, #3
 800214a:	2b03      	cmp	r3, #3
 800214c:	d017      	beq.n	800217e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	68db      	ldr	r3, [r3, #12]
 8002152:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002154:	697b      	ldr	r3, [r7, #20]
 8002156:	005b      	lsls	r3, r3, #1
 8002158:	2203      	movs	r2, #3
 800215a:	fa02 f303 	lsl.w	r3, r2, r3
 800215e:	43db      	mvns	r3, r3
 8002160:	693a      	ldr	r2, [r7, #16]
 8002162:	4013      	ands	r3, r2
 8002164:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002166:	683b      	ldr	r3, [r7, #0]
 8002168:	689a      	ldr	r2, [r3, #8]
 800216a:	697b      	ldr	r3, [r7, #20]
 800216c:	005b      	lsls	r3, r3, #1
 800216e:	fa02 f303 	lsl.w	r3, r2, r3
 8002172:	693a      	ldr	r2, [r7, #16]
 8002174:	4313      	orrs	r3, r2
 8002176:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	693a      	ldr	r2, [r7, #16]
 800217c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800217e:	683b      	ldr	r3, [r7, #0]
 8002180:	685b      	ldr	r3, [r3, #4]
 8002182:	f003 0303 	and.w	r3, r3, #3
 8002186:	2b02      	cmp	r3, #2
 8002188:	d123      	bne.n	80021d2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800218a:	697b      	ldr	r3, [r7, #20]
 800218c:	08da      	lsrs	r2, r3, #3
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	3208      	adds	r2, #8
 8002192:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002196:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002198:	697b      	ldr	r3, [r7, #20]
 800219a:	f003 0307 	and.w	r3, r3, #7
 800219e:	009b      	lsls	r3, r3, #2
 80021a0:	220f      	movs	r2, #15
 80021a2:	fa02 f303 	lsl.w	r3, r2, r3
 80021a6:	43db      	mvns	r3, r3
 80021a8:	693a      	ldr	r2, [r7, #16]
 80021aa:	4013      	ands	r3, r2
 80021ac:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80021ae:	683b      	ldr	r3, [r7, #0]
 80021b0:	691a      	ldr	r2, [r3, #16]
 80021b2:	697b      	ldr	r3, [r7, #20]
 80021b4:	f003 0307 	and.w	r3, r3, #7
 80021b8:	009b      	lsls	r3, r3, #2
 80021ba:	fa02 f303 	lsl.w	r3, r2, r3
 80021be:	693a      	ldr	r2, [r7, #16]
 80021c0:	4313      	orrs	r3, r2
 80021c2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80021c4:	697b      	ldr	r3, [r7, #20]
 80021c6:	08da      	lsrs	r2, r3, #3
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	3208      	adds	r2, #8
 80021cc:	6939      	ldr	r1, [r7, #16]
 80021ce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80021d8:	697b      	ldr	r3, [r7, #20]
 80021da:	005b      	lsls	r3, r3, #1
 80021dc:	2203      	movs	r2, #3
 80021de:	fa02 f303 	lsl.w	r3, r2, r3
 80021e2:	43db      	mvns	r3, r3
 80021e4:	693a      	ldr	r2, [r7, #16]
 80021e6:	4013      	ands	r3, r2
 80021e8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80021ea:	683b      	ldr	r3, [r7, #0]
 80021ec:	685b      	ldr	r3, [r3, #4]
 80021ee:	f003 0203 	and.w	r2, r3, #3
 80021f2:	697b      	ldr	r3, [r7, #20]
 80021f4:	005b      	lsls	r3, r3, #1
 80021f6:	fa02 f303 	lsl.w	r3, r2, r3
 80021fa:	693a      	ldr	r2, [r7, #16]
 80021fc:	4313      	orrs	r3, r2
 80021fe:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	693a      	ldr	r2, [r7, #16]
 8002204:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002206:	683b      	ldr	r3, [r7, #0]
 8002208:	685b      	ldr	r3, [r3, #4]
 800220a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800220e:	2b00      	cmp	r3, #0
 8002210:	f000 80b2 	beq.w	8002378 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002214:	4b61      	ldr	r3, [pc, #388]	@ (800239c <HAL_GPIO_Init+0x2fc>)
 8002216:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002218:	4a60      	ldr	r2, [pc, #384]	@ (800239c <HAL_GPIO_Init+0x2fc>)
 800221a:	f043 0301 	orr.w	r3, r3, #1
 800221e:	6613      	str	r3, [r2, #96]	@ 0x60
 8002220:	4b5e      	ldr	r3, [pc, #376]	@ (800239c <HAL_GPIO_Init+0x2fc>)
 8002222:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002224:	f003 0301 	and.w	r3, r3, #1
 8002228:	60bb      	str	r3, [r7, #8]
 800222a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800222c:	4a5c      	ldr	r2, [pc, #368]	@ (80023a0 <HAL_GPIO_Init+0x300>)
 800222e:	697b      	ldr	r3, [r7, #20]
 8002230:	089b      	lsrs	r3, r3, #2
 8002232:	3302      	adds	r3, #2
 8002234:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002238:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800223a:	697b      	ldr	r3, [r7, #20]
 800223c:	f003 0303 	and.w	r3, r3, #3
 8002240:	009b      	lsls	r3, r3, #2
 8002242:	220f      	movs	r2, #15
 8002244:	fa02 f303 	lsl.w	r3, r2, r3
 8002248:	43db      	mvns	r3, r3
 800224a:	693a      	ldr	r2, [r7, #16]
 800224c:	4013      	ands	r3, r2
 800224e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002256:	d02b      	beq.n	80022b0 <HAL_GPIO_Init+0x210>
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	4a52      	ldr	r2, [pc, #328]	@ (80023a4 <HAL_GPIO_Init+0x304>)
 800225c:	4293      	cmp	r3, r2
 800225e:	d025      	beq.n	80022ac <HAL_GPIO_Init+0x20c>
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	4a51      	ldr	r2, [pc, #324]	@ (80023a8 <HAL_GPIO_Init+0x308>)
 8002264:	4293      	cmp	r3, r2
 8002266:	d01f      	beq.n	80022a8 <HAL_GPIO_Init+0x208>
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	4a50      	ldr	r2, [pc, #320]	@ (80023ac <HAL_GPIO_Init+0x30c>)
 800226c:	4293      	cmp	r3, r2
 800226e:	d019      	beq.n	80022a4 <HAL_GPIO_Init+0x204>
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	4a4f      	ldr	r2, [pc, #316]	@ (80023b0 <HAL_GPIO_Init+0x310>)
 8002274:	4293      	cmp	r3, r2
 8002276:	d013      	beq.n	80022a0 <HAL_GPIO_Init+0x200>
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	4a4e      	ldr	r2, [pc, #312]	@ (80023b4 <HAL_GPIO_Init+0x314>)
 800227c:	4293      	cmp	r3, r2
 800227e:	d00d      	beq.n	800229c <HAL_GPIO_Init+0x1fc>
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	4a4d      	ldr	r2, [pc, #308]	@ (80023b8 <HAL_GPIO_Init+0x318>)
 8002284:	4293      	cmp	r3, r2
 8002286:	d007      	beq.n	8002298 <HAL_GPIO_Init+0x1f8>
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	4a4c      	ldr	r2, [pc, #304]	@ (80023bc <HAL_GPIO_Init+0x31c>)
 800228c:	4293      	cmp	r3, r2
 800228e:	d101      	bne.n	8002294 <HAL_GPIO_Init+0x1f4>
 8002290:	2307      	movs	r3, #7
 8002292:	e00e      	b.n	80022b2 <HAL_GPIO_Init+0x212>
 8002294:	2308      	movs	r3, #8
 8002296:	e00c      	b.n	80022b2 <HAL_GPIO_Init+0x212>
 8002298:	2306      	movs	r3, #6
 800229a:	e00a      	b.n	80022b2 <HAL_GPIO_Init+0x212>
 800229c:	2305      	movs	r3, #5
 800229e:	e008      	b.n	80022b2 <HAL_GPIO_Init+0x212>
 80022a0:	2304      	movs	r3, #4
 80022a2:	e006      	b.n	80022b2 <HAL_GPIO_Init+0x212>
 80022a4:	2303      	movs	r3, #3
 80022a6:	e004      	b.n	80022b2 <HAL_GPIO_Init+0x212>
 80022a8:	2302      	movs	r3, #2
 80022aa:	e002      	b.n	80022b2 <HAL_GPIO_Init+0x212>
 80022ac:	2301      	movs	r3, #1
 80022ae:	e000      	b.n	80022b2 <HAL_GPIO_Init+0x212>
 80022b0:	2300      	movs	r3, #0
 80022b2:	697a      	ldr	r2, [r7, #20]
 80022b4:	f002 0203 	and.w	r2, r2, #3
 80022b8:	0092      	lsls	r2, r2, #2
 80022ba:	4093      	lsls	r3, r2
 80022bc:	693a      	ldr	r2, [r7, #16]
 80022be:	4313      	orrs	r3, r2
 80022c0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80022c2:	4937      	ldr	r1, [pc, #220]	@ (80023a0 <HAL_GPIO_Init+0x300>)
 80022c4:	697b      	ldr	r3, [r7, #20]
 80022c6:	089b      	lsrs	r3, r3, #2
 80022c8:	3302      	adds	r3, #2
 80022ca:	693a      	ldr	r2, [r7, #16]
 80022cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80022d0:	4b3b      	ldr	r3, [pc, #236]	@ (80023c0 <HAL_GPIO_Init+0x320>)
 80022d2:	689b      	ldr	r3, [r3, #8]
 80022d4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	43db      	mvns	r3, r3
 80022da:	693a      	ldr	r2, [r7, #16]
 80022dc:	4013      	ands	r3, r2
 80022de:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	685b      	ldr	r3, [r3, #4]
 80022e4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d003      	beq.n	80022f4 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 80022ec:	693a      	ldr	r2, [r7, #16]
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	4313      	orrs	r3, r2
 80022f2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80022f4:	4a32      	ldr	r2, [pc, #200]	@ (80023c0 <HAL_GPIO_Init+0x320>)
 80022f6:	693b      	ldr	r3, [r7, #16]
 80022f8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80022fa:	4b31      	ldr	r3, [pc, #196]	@ (80023c0 <HAL_GPIO_Init+0x320>)
 80022fc:	68db      	ldr	r3, [r3, #12]
 80022fe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	43db      	mvns	r3, r3
 8002304:	693a      	ldr	r2, [r7, #16]
 8002306:	4013      	ands	r3, r2
 8002308:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800230a:	683b      	ldr	r3, [r7, #0]
 800230c:	685b      	ldr	r3, [r3, #4]
 800230e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002312:	2b00      	cmp	r3, #0
 8002314:	d003      	beq.n	800231e <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8002316:	693a      	ldr	r2, [r7, #16]
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	4313      	orrs	r3, r2
 800231c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800231e:	4a28      	ldr	r2, [pc, #160]	@ (80023c0 <HAL_GPIO_Init+0x320>)
 8002320:	693b      	ldr	r3, [r7, #16]
 8002322:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002324:	4b26      	ldr	r3, [pc, #152]	@ (80023c0 <HAL_GPIO_Init+0x320>)
 8002326:	685b      	ldr	r3, [r3, #4]
 8002328:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	43db      	mvns	r3, r3
 800232e:	693a      	ldr	r2, [r7, #16]
 8002330:	4013      	ands	r3, r2
 8002332:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	685b      	ldr	r3, [r3, #4]
 8002338:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800233c:	2b00      	cmp	r3, #0
 800233e:	d003      	beq.n	8002348 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8002340:	693a      	ldr	r2, [r7, #16]
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	4313      	orrs	r3, r2
 8002346:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002348:	4a1d      	ldr	r2, [pc, #116]	@ (80023c0 <HAL_GPIO_Init+0x320>)
 800234a:	693b      	ldr	r3, [r7, #16]
 800234c:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800234e:	4b1c      	ldr	r3, [pc, #112]	@ (80023c0 <HAL_GPIO_Init+0x320>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	43db      	mvns	r3, r3
 8002358:	693a      	ldr	r2, [r7, #16]
 800235a:	4013      	ands	r3, r2
 800235c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800235e:	683b      	ldr	r3, [r7, #0]
 8002360:	685b      	ldr	r3, [r3, #4]
 8002362:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002366:	2b00      	cmp	r3, #0
 8002368:	d003      	beq.n	8002372 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 800236a:	693a      	ldr	r2, [r7, #16]
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	4313      	orrs	r3, r2
 8002370:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002372:	4a13      	ldr	r2, [pc, #76]	@ (80023c0 <HAL_GPIO_Init+0x320>)
 8002374:	693b      	ldr	r3, [r7, #16]
 8002376:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002378:	697b      	ldr	r3, [r7, #20]
 800237a:	3301      	adds	r3, #1
 800237c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800237e:	683b      	ldr	r3, [r7, #0]
 8002380:	681a      	ldr	r2, [r3, #0]
 8002382:	697b      	ldr	r3, [r7, #20]
 8002384:	fa22 f303 	lsr.w	r3, r2, r3
 8002388:	2b00      	cmp	r3, #0
 800238a:	f47f ae91 	bne.w	80020b0 <HAL_GPIO_Init+0x10>
  }
}
 800238e:	bf00      	nop
 8002390:	bf00      	nop
 8002392:	371c      	adds	r7, #28
 8002394:	46bd      	mov	sp, r7
 8002396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239a:	4770      	bx	lr
 800239c:	40021000 	.word	0x40021000
 80023a0:	40010000 	.word	0x40010000
 80023a4:	48000400 	.word	0x48000400
 80023a8:	48000800 	.word	0x48000800
 80023ac:	48000c00 	.word	0x48000c00
 80023b0:	48001000 	.word	0x48001000
 80023b4:	48001400 	.word	0x48001400
 80023b8:	48001800 	.word	0x48001800
 80023bc:	48001c00 	.word	0x48001c00
 80023c0:	40010400 	.word	0x40010400

080023c4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80023c4:	b480      	push	{r7}
 80023c6:	b085      	sub	sp, #20
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]
 80023cc:	460b      	mov	r3, r1
 80023ce:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	691a      	ldr	r2, [r3, #16]
 80023d4:	887b      	ldrh	r3, [r7, #2]
 80023d6:	4013      	ands	r3, r2
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d002      	beq.n	80023e2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80023dc:	2301      	movs	r3, #1
 80023de:	73fb      	strb	r3, [r7, #15]
 80023e0:	e001      	b.n	80023e6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80023e2:	2300      	movs	r3, #0
 80023e4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80023e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80023e8:	4618      	mov	r0, r3
 80023ea:	3714      	adds	r7, #20
 80023ec:	46bd      	mov	sp, r7
 80023ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f2:	4770      	bx	lr

080023f4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80023f4:	b480      	push	{r7}
 80023f6:	b083      	sub	sp, #12
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
 80023fc:	460b      	mov	r3, r1
 80023fe:	807b      	strh	r3, [r7, #2]
 8002400:	4613      	mov	r3, r2
 8002402:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002404:	787b      	ldrb	r3, [r7, #1]
 8002406:	2b00      	cmp	r3, #0
 8002408:	d003      	beq.n	8002412 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800240a:	887a      	ldrh	r2, [r7, #2]
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002410:	e002      	b.n	8002418 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002412:	887a      	ldrh	r2, [r7, #2]
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002418:	bf00      	nop
 800241a:	370c      	adds	r7, #12
 800241c:	46bd      	mov	sp, r7
 800241e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002422:	4770      	bx	lr

08002424 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002424:	b480      	push	{r7}
 8002426:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002428:	4b0d      	ldr	r3, [pc, #52]	@ (8002460 <HAL_PWREx_GetVoltageRange+0x3c>)
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002430:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002434:	d102      	bne.n	800243c <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8002436:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800243a:	e00b      	b.n	8002454 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 800243c:	4b08      	ldr	r3, [pc, #32]	@ (8002460 <HAL_PWREx_GetVoltageRange+0x3c>)
 800243e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002442:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002446:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800244a:	d102      	bne.n	8002452 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 800244c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002450:	e000      	b.n	8002454 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8002452:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8002454:	4618      	mov	r0, r3
 8002456:	46bd      	mov	sp, r7
 8002458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245c:	4770      	bx	lr
 800245e:	bf00      	nop
 8002460:	40007000 	.word	0x40007000

08002464 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002464:	b480      	push	{r7}
 8002466:	b085      	sub	sp, #20
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	2b00      	cmp	r3, #0
 8002470:	d141      	bne.n	80024f6 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002472:	4b4b      	ldr	r3, [pc, #300]	@ (80025a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800247a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800247e:	d131      	bne.n	80024e4 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002480:	4b47      	ldr	r3, [pc, #284]	@ (80025a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002482:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002486:	4a46      	ldr	r2, [pc, #280]	@ (80025a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002488:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800248c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002490:	4b43      	ldr	r3, [pc, #268]	@ (80025a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002498:	4a41      	ldr	r2, [pc, #260]	@ (80025a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800249a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800249e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80024a0:	4b40      	ldr	r3, [pc, #256]	@ (80025a4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	2232      	movs	r2, #50	@ 0x32
 80024a6:	fb02 f303 	mul.w	r3, r2, r3
 80024aa:	4a3f      	ldr	r2, [pc, #252]	@ (80025a8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80024ac:	fba2 2303 	umull	r2, r3, r2, r3
 80024b0:	0c9b      	lsrs	r3, r3, #18
 80024b2:	3301      	adds	r3, #1
 80024b4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80024b6:	e002      	b.n	80024be <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	3b01      	subs	r3, #1
 80024bc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80024be:	4b38      	ldr	r3, [pc, #224]	@ (80025a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80024c0:	695b      	ldr	r3, [r3, #20]
 80024c2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80024c6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80024ca:	d102      	bne.n	80024d2 <HAL_PWREx_ControlVoltageScaling+0x6e>
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d1f2      	bne.n	80024b8 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80024d2:	4b33      	ldr	r3, [pc, #204]	@ (80025a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80024d4:	695b      	ldr	r3, [r3, #20]
 80024d6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80024da:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80024de:	d158      	bne.n	8002592 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80024e0:	2303      	movs	r3, #3
 80024e2:	e057      	b.n	8002594 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80024e4:	4b2e      	ldr	r3, [pc, #184]	@ (80025a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80024e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80024ea:	4a2d      	ldr	r2, [pc, #180]	@ (80025a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80024ec:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80024f0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80024f4:	e04d      	b.n	8002592 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80024fc:	d141      	bne.n	8002582 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80024fe:	4b28      	ldr	r3, [pc, #160]	@ (80025a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002506:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800250a:	d131      	bne.n	8002570 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800250c:	4b24      	ldr	r3, [pc, #144]	@ (80025a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800250e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002512:	4a23      	ldr	r2, [pc, #140]	@ (80025a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002514:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002518:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800251c:	4b20      	ldr	r3, [pc, #128]	@ (80025a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002524:	4a1e      	ldr	r2, [pc, #120]	@ (80025a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002526:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800252a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 800252c:	4b1d      	ldr	r3, [pc, #116]	@ (80025a4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	2232      	movs	r2, #50	@ 0x32
 8002532:	fb02 f303 	mul.w	r3, r2, r3
 8002536:	4a1c      	ldr	r2, [pc, #112]	@ (80025a8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002538:	fba2 2303 	umull	r2, r3, r2, r3
 800253c:	0c9b      	lsrs	r3, r3, #18
 800253e:	3301      	adds	r3, #1
 8002540:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002542:	e002      	b.n	800254a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	3b01      	subs	r3, #1
 8002548:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800254a:	4b15      	ldr	r3, [pc, #84]	@ (80025a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800254c:	695b      	ldr	r3, [r3, #20]
 800254e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002552:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002556:	d102      	bne.n	800255e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	2b00      	cmp	r3, #0
 800255c:	d1f2      	bne.n	8002544 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800255e:	4b10      	ldr	r3, [pc, #64]	@ (80025a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002560:	695b      	ldr	r3, [r3, #20]
 8002562:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002566:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800256a:	d112      	bne.n	8002592 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800256c:	2303      	movs	r3, #3
 800256e:	e011      	b.n	8002594 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002570:	4b0b      	ldr	r3, [pc, #44]	@ (80025a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002572:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002576:	4a0a      	ldr	r2, [pc, #40]	@ (80025a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002578:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800257c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8002580:	e007      	b.n	8002592 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002582:	4b07      	ldr	r3, [pc, #28]	@ (80025a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800258a:	4a05      	ldr	r2, [pc, #20]	@ (80025a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800258c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002590:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002592:	2300      	movs	r3, #0
}
 8002594:	4618      	mov	r0, r3
 8002596:	3714      	adds	r7, #20
 8002598:	46bd      	mov	sp, r7
 800259a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259e:	4770      	bx	lr
 80025a0:	40007000 	.word	0x40007000
 80025a4:	20000000 	.word	0x20000000
 80025a8:	431bde83 	.word	0x431bde83

080025ac <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 80025ac:	b480      	push	{r7}
 80025ae:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 80025b0:	4b05      	ldr	r3, [pc, #20]	@ (80025c8 <HAL_PWREx_EnableVddIO2+0x1c>)
 80025b2:	685b      	ldr	r3, [r3, #4]
 80025b4:	4a04      	ldr	r2, [pc, #16]	@ (80025c8 <HAL_PWREx_EnableVddIO2+0x1c>)
 80025b6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80025ba:	6053      	str	r3, [r2, #4]
}
 80025bc:	bf00      	nop
 80025be:	46bd      	mov	sp, r7
 80025c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c4:	4770      	bx	lr
 80025c6:	bf00      	nop
 80025c8:	40007000 	.word	0x40007000

080025cc <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b088      	sub	sp, #32
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d102      	bne.n	80025e0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80025da:	2301      	movs	r3, #1
 80025dc:	f000 bc08 	b.w	8002df0 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80025e0:	4b96      	ldr	r3, [pc, #600]	@ (800283c <HAL_RCC_OscConfig+0x270>)
 80025e2:	689b      	ldr	r3, [r3, #8]
 80025e4:	f003 030c 	and.w	r3, r3, #12
 80025e8:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80025ea:	4b94      	ldr	r3, [pc, #592]	@ (800283c <HAL_RCC_OscConfig+0x270>)
 80025ec:	68db      	ldr	r3, [r3, #12]
 80025ee:	f003 0303 	and.w	r3, r3, #3
 80025f2:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f003 0310 	and.w	r3, r3, #16
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	f000 80e4 	beq.w	80027ca <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002602:	69bb      	ldr	r3, [r7, #24]
 8002604:	2b00      	cmp	r3, #0
 8002606:	d007      	beq.n	8002618 <HAL_RCC_OscConfig+0x4c>
 8002608:	69bb      	ldr	r3, [r7, #24]
 800260a:	2b0c      	cmp	r3, #12
 800260c:	f040 808b 	bne.w	8002726 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002610:	697b      	ldr	r3, [r7, #20]
 8002612:	2b01      	cmp	r3, #1
 8002614:	f040 8087 	bne.w	8002726 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002618:	4b88      	ldr	r3, [pc, #544]	@ (800283c <HAL_RCC_OscConfig+0x270>)
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f003 0302 	and.w	r3, r3, #2
 8002620:	2b00      	cmp	r3, #0
 8002622:	d005      	beq.n	8002630 <HAL_RCC_OscConfig+0x64>
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	699b      	ldr	r3, [r3, #24]
 8002628:	2b00      	cmp	r3, #0
 800262a:	d101      	bne.n	8002630 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 800262c:	2301      	movs	r3, #1
 800262e:	e3df      	b.n	8002df0 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	6a1a      	ldr	r2, [r3, #32]
 8002634:	4b81      	ldr	r3, [pc, #516]	@ (800283c <HAL_RCC_OscConfig+0x270>)
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f003 0308 	and.w	r3, r3, #8
 800263c:	2b00      	cmp	r3, #0
 800263e:	d004      	beq.n	800264a <HAL_RCC_OscConfig+0x7e>
 8002640:	4b7e      	ldr	r3, [pc, #504]	@ (800283c <HAL_RCC_OscConfig+0x270>)
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002648:	e005      	b.n	8002656 <HAL_RCC_OscConfig+0x8a>
 800264a:	4b7c      	ldr	r3, [pc, #496]	@ (800283c <HAL_RCC_OscConfig+0x270>)
 800264c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002650:	091b      	lsrs	r3, r3, #4
 8002652:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002656:	4293      	cmp	r3, r2
 8002658:	d223      	bcs.n	80026a2 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	6a1b      	ldr	r3, [r3, #32]
 800265e:	4618      	mov	r0, r3
 8002660:	f000 fdca 	bl	80031f8 <RCC_SetFlashLatencyFromMSIRange>
 8002664:	4603      	mov	r3, r0
 8002666:	2b00      	cmp	r3, #0
 8002668:	d001      	beq.n	800266e <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800266a:	2301      	movs	r3, #1
 800266c:	e3c0      	b.n	8002df0 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800266e:	4b73      	ldr	r3, [pc, #460]	@ (800283c <HAL_RCC_OscConfig+0x270>)
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	4a72      	ldr	r2, [pc, #456]	@ (800283c <HAL_RCC_OscConfig+0x270>)
 8002674:	f043 0308 	orr.w	r3, r3, #8
 8002678:	6013      	str	r3, [r2, #0]
 800267a:	4b70      	ldr	r3, [pc, #448]	@ (800283c <HAL_RCC_OscConfig+0x270>)
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	6a1b      	ldr	r3, [r3, #32]
 8002686:	496d      	ldr	r1, [pc, #436]	@ (800283c <HAL_RCC_OscConfig+0x270>)
 8002688:	4313      	orrs	r3, r2
 800268a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800268c:	4b6b      	ldr	r3, [pc, #428]	@ (800283c <HAL_RCC_OscConfig+0x270>)
 800268e:	685b      	ldr	r3, [r3, #4]
 8002690:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	69db      	ldr	r3, [r3, #28]
 8002698:	021b      	lsls	r3, r3, #8
 800269a:	4968      	ldr	r1, [pc, #416]	@ (800283c <HAL_RCC_OscConfig+0x270>)
 800269c:	4313      	orrs	r3, r2
 800269e:	604b      	str	r3, [r1, #4]
 80026a0:	e025      	b.n	80026ee <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80026a2:	4b66      	ldr	r3, [pc, #408]	@ (800283c <HAL_RCC_OscConfig+0x270>)
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	4a65      	ldr	r2, [pc, #404]	@ (800283c <HAL_RCC_OscConfig+0x270>)
 80026a8:	f043 0308 	orr.w	r3, r3, #8
 80026ac:	6013      	str	r3, [r2, #0]
 80026ae:	4b63      	ldr	r3, [pc, #396]	@ (800283c <HAL_RCC_OscConfig+0x270>)
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	6a1b      	ldr	r3, [r3, #32]
 80026ba:	4960      	ldr	r1, [pc, #384]	@ (800283c <HAL_RCC_OscConfig+0x270>)
 80026bc:	4313      	orrs	r3, r2
 80026be:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80026c0:	4b5e      	ldr	r3, [pc, #376]	@ (800283c <HAL_RCC_OscConfig+0x270>)
 80026c2:	685b      	ldr	r3, [r3, #4]
 80026c4:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	69db      	ldr	r3, [r3, #28]
 80026cc:	021b      	lsls	r3, r3, #8
 80026ce:	495b      	ldr	r1, [pc, #364]	@ (800283c <HAL_RCC_OscConfig+0x270>)
 80026d0:	4313      	orrs	r3, r2
 80026d2:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80026d4:	69bb      	ldr	r3, [r7, #24]
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d109      	bne.n	80026ee <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	6a1b      	ldr	r3, [r3, #32]
 80026de:	4618      	mov	r0, r3
 80026e0:	f000 fd8a 	bl	80031f8 <RCC_SetFlashLatencyFromMSIRange>
 80026e4:	4603      	mov	r3, r0
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d001      	beq.n	80026ee <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80026ea:	2301      	movs	r3, #1
 80026ec:	e380      	b.n	8002df0 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80026ee:	f000 fcc1 	bl	8003074 <HAL_RCC_GetSysClockFreq>
 80026f2:	4602      	mov	r2, r0
 80026f4:	4b51      	ldr	r3, [pc, #324]	@ (800283c <HAL_RCC_OscConfig+0x270>)
 80026f6:	689b      	ldr	r3, [r3, #8]
 80026f8:	091b      	lsrs	r3, r3, #4
 80026fa:	f003 030f 	and.w	r3, r3, #15
 80026fe:	4950      	ldr	r1, [pc, #320]	@ (8002840 <HAL_RCC_OscConfig+0x274>)
 8002700:	5ccb      	ldrb	r3, [r1, r3]
 8002702:	f003 031f 	and.w	r3, r3, #31
 8002706:	fa22 f303 	lsr.w	r3, r2, r3
 800270a:	4a4e      	ldr	r2, [pc, #312]	@ (8002844 <HAL_RCC_OscConfig+0x278>)
 800270c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800270e:	4b4e      	ldr	r3, [pc, #312]	@ (8002848 <HAL_RCC_OscConfig+0x27c>)
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	4618      	mov	r0, r3
 8002714:	f7ff fb32 	bl	8001d7c <HAL_InitTick>
 8002718:	4603      	mov	r3, r0
 800271a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800271c:	7bfb      	ldrb	r3, [r7, #15]
 800271e:	2b00      	cmp	r3, #0
 8002720:	d052      	beq.n	80027c8 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8002722:	7bfb      	ldrb	r3, [r7, #15]
 8002724:	e364      	b.n	8002df0 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	699b      	ldr	r3, [r3, #24]
 800272a:	2b00      	cmp	r3, #0
 800272c:	d032      	beq.n	8002794 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800272e:	4b43      	ldr	r3, [pc, #268]	@ (800283c <HAL_RCC_OscConfig+0x270>)
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	4a42      	ldr	r2, [pc, #264]	@ (800283c <HAL_RCC_OscConfig+0x270>)
 8002734:	f043 0301 	orr.w	r3, r3, #1
 8002738:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800273a:	f7ff fb6f 	bl	8001e1c <HAL_GetTick>
 800273e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002740:	e008      	b.n	8002754 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002742:	f7ff fb6b 	bl	8001e1c <HAL_GetTick>
 8002746:	4602      	mov	r2, r0
 8002748:	693b      	ldr	r3, [r7, #16]
 800274a:	1ad3      	subs	r3, r2, r3
 800274c:	2b02      	cmp	r3, #2
 800274e:	d901      	bls.n	8002754 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8002750:	2303      	movs	r3, #3
 8002752:	e34d      	b.n	8002df0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002754:	4b39      	ldr	r3, [pc, #228]	@ (800283c <HAL_RCC_OscConfig+0x270>)
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f003 0302 	and.w	r3, r3, #2
 800275c:	2b00      	cmp	r3, #0
 800275e:	d0f0      	beq.n	8002742 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002760:	4b36      	ldr	r3, [pc, #216]	@ (800283c <HAL_RCC_OscConfig+0x270>)
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	4a35      	ldr	r2, [pc, #212]	@ (800283c <HAL_RCC_OscConfig+0x270>)
 8002766:	f043 0308 	orr.w	r3, r3, #8
 800276a:	6013      	str	r3, [r2, #0]
 800276c:	4b33      	ldr	r3, [pc, #204]	@ (800283c <HAL_RCC_OscConfig+0x270>)
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	6a1b      	ldr	r3, [r3, #32]
 8002778:	4930      	ldr	r1, [pc, #192]	@ (800283c <HAL_RCC_OscConfig+0x270>)
 800277a:	4313      	orrs	r3, r2
 800277c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800277e:	4b2f      	ldr	r3, [pc, #188]	@ (800283c <HAL_RCC_OscConfig+0x270>)
 8002780:	685b      	ldr	r3, [r3, #4]
 8002782:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	69db      	ldr	r3, [r3, #28]
 800278a:	021b      	lsls	r3, r3, #8
 800278c:	492b      	ldr	r1, [pc, #172]	@ (800283c <HAL_RCC_OscConfig+0x270>)
 800278e:	4313      	orrs	r3, r2
 8002790:	604b      	str	r3, [r1, #4]
 8002792:	e01a      	b.n	80027ca <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002794:	4b29      	ldr	r3, [pc, #164]	@ (800283c <HAL_RCC_OscConfig+0x270>)
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	4a28      	ldr	r2, [pc, #160]	@ (800283c <HAL_RCC_OscConfig+0x270>)
 800279a:	f023 0301 	bic.w	r3, r3, #1
 800279e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80027a0:	f7ff fb3c 	bl	8001e1c <HAL_GetTick>
 80027a4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80027a6:	e008      	b.n	80027ba <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80027a8:	f7ff fb38 	bl	8001e1c <HAL_GetTick>
 80027ac:	4602      	mov	r2, r0
 80027ae:	693b      	ldr	r3, [r7, #16]
 80027b0:	1ad3      	subs	r3, r2, r3
 80027b2:	2b02      	cmp	r3, #2
 80027b4:	d901      	bls.n	80027ba <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80027b6:	2303      	movs	r3, #3
 80027b8:	e31a      	b.n	8002df0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80027ba:	4b20      	ldr	r3, [pc, #128]	@ (800283c <HAL_RCC_OscConfig+0x270>)
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f003 0302 	and.w	r3, r3, #2
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d1f0      	bne.n	80027a8 <HAL_RCC_OscConfig+0x1dc>
 80027c6:	e000      	b.n	80027ca <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80027c8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f003 0301 	and.w	r3, r3, #1
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d073      	beq.n	80028be <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80027d6:	69bb      	ldr	r3, [r7, #24]
 80027d8:	2b08      	cmp	r3, #8
 80027da:	d005      	beq.n	80027e8 <HAL_RCC_OscConfig+0x21c>
 80027dc:	69bb      	ldr	r3, [r7, #24]
 80027de:	2b0c      	cmp	r3, #12
 80027e0:	d10e      	bne.n	8002800 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80027e2:	697b      	ldr	r3, [r7, #20]
 80027e4:	2b03      	cmp	r3, #3
 80027e6:	d10b      	bne.n	8002800 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027e8:	4b14      	ldr	r3, [pc, #80]	@ (800283c <HAL_RCC_OscConfig+0x270>)
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d063      	beq.n	80028bc <HAL_RCC_OscConfig+0x2f0>
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	685b      	ldr	r3, [r3, #4]
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d15f      	bne.n	80028bc <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80027fc:	2301      	movs	r3, #1
 80027fe:	e2f7      	b.n	8002df0 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	685b      	ldr	r3, [r3, #4]
 8002804:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002808:	d106      	bne.n	8002818 <HAL_RCC_OscConfig+0x24c>
 800280a:	4b0c      	ldr	r3, [pc, #48]	@ (800283c <HAL_RCC_OscConfig+0x270>)
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	4a0b      	ldr	r2, [pc, #44]	@ (800283c <HAL_RCC_OscConfig+0x270>)
 8002810:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002814:	6013      	str	r3, [r2, #0]
 8002816:	e025      	b.n	8002864 <HAL_RCC_OscConfig+0x298>
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	685b      	ldr	r3, [r3, #4]
 800281c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002820:	d114      	bne.n	800284c <HAL_RCC_OscConfig+0x280>
 8002822:	4b06      	ldr	r3, [pc, #24]	@ (800283c <HAL_RCC_OscConfig+0x270>)
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	4a05      	ldr	r2, [pc, #20]	@ (800283c <HAL_RCC_OscConfig+0x270>)
 8002828:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800282c:	6013      	str	r3, [r2, #0]
 800282e:	4b03      	ldr	r3, [pc, #12]	@ (800283c <HAL_RCC_OscConfig+0x270>)
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	4a02      	ldr	r2, [pc, #8]	@ (800283c <HAL_RCC_OscConfig+0x270>)
 8002834:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002838:	6013      	str	r3, [r2, #0]
 800283a:	e013      	b.n	8002864 <HAL_RCC_OscConfig+0x298>
 800283c:	40021000 	.word	0x40021000
 8002840:	0800db40 	.word	0x0800db40
 8002844:	20000000 	.word	0x20000000
 8002848:	20000004 	.word	0x20000004
 800284c:	4ba0      	ldr	r3, [pc, #640]	@ (8002ad0 <HAL_RCC_OscConfig+0x504>)
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	4a9f      	ldr	r2, [pc, #636]	@ (8002ad0 <HAL_RCC_OscConfig+0x504>)
 8002852:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002856:	6013      	str	r3, [r2, #0]
 8002858:	4b9d      	ldr	r3, [pc, #628]	@ (8002ad0 <HAL_RCC_OscConfig+0x504>)
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	4a9c      	ldr	r2, [pc, #624]	@ (8002ad0 <HAL_RCC_OscConfig+0x504>)
 800285e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002862:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	685b      	ldr	r3, [r3, #4]
 8002868:	2b00      	cmp	r3, #0
 800286a:	d013      	beq.n	8002894 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800286c:	f7ff fad6 	bl	8001e1c <HAL_GetTick>
 8002870:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002872:	e008      	b.n	8002886 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002874:	f7ff fad2 	bl	8001e1c <HAL_GetTick>
 8002878:	4602      	mov	r2, r0
 800287a:	693b      	ldr	r3, [r7, #16]
 800287c:	1ad3      	subs	r3, r2, r3
 800287e:	2b64      	cmp	r3, #100	@ 0x64
 8002880:	d901      	bls.n	8002886 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002882:	2303      	movs	r3, #3
 8002884:	e2b4      	b.n	8002df0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002886:	4b92      	ldr	r3, [pc, #584]	@ (8002ad0 <HAL_RCC_OscConfig+0x504>)
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800288e:	2b00      	cmp	r3, #0
 8002890:	d0f0      	beq.n	8002874 <HAL_RCC_OscConfig+0x2a8>
 8002892:	e014      	b.n	80028be <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002894:	f7ff fac2 	bl	8001e1c <HAL_GetTick>
 8002898:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800289a:	e008      	b.n	80028ae <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800289c:	f7ff fabe 	bl	8001e1c <HAL_GetTick>
 80028a0:	4602      	mov	r2, r0
 80028a2:	693b      	ldr	r3, [r7, #16]
 80028a4:	1ad3      	subs	r3, r2, r3
 80028a6:	2b64      	cmp	r3, #100	@ 0x64
 80028a8:	d901      	bls.n	80028ae <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80028aa:	2303      	movs	r3, #3
 80028ac:	e2a0      	b.n	8002df0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80028ae:	4b88      	ldr	r3, [pc, #544]	@ (8002ad0 <HAL_RCC_OscConfig+0x504>)
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d1f0      	bne.n	800289c <HAL_RCC_OscConfig+0x2d0>
 80028ba:	e000      	b.n	80028be <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f003 0302 	and.w	r3, r3, #2
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d060      	beq.n	800298c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80028ca:	69bb      	ldr	r3, [r7, #24]
 80028cc:	2b04      	cmp	r3, #4
 80028ce:	d005      	beq.n	80028dc <HAL_RCC_OscConfig+0x310>
 80028d0:	69bb      	ldr	r3, [r7, #24]
 80028d2:	2b0c      	cmp	r3, #12
 80028d4:	d119      	bne.n	800290a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80028d6:	697b      	ldr	r3, [r7, #20]
 80028d8:	2b02      	cmp	r3, #2
 80028da:	d116      	bne.n	800290a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80028dc:	4b7c      	ldr	r3, [pc, #496]	@ (8002ad0 <HAL_RCC_OscConfig+0x504>)
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d005      	beq.n	80028f4 <HAL_RCC_OscConfig+0x328>
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	68db      	ldr	r3, [r3, #12]
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d101      	bne.n	80028f4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80028f0:	2301      	movs	r3, #1
 80028f2:	e27d      	b.n	8002df0 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028f4:	4b76      	ldr	r3, [pc, #472]	@ (8002ad0 <HAL_RCC_OscConfig+0x504>)
 80028f6:	685b      	ldr	r3, [r3, #4]
 80028f8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	691b      	ldr	r3, [r3, #16]
 8002900:	061b      	lsls	r3, r3, #24
 8002902:	4973      	ldr	r1, [pc, #460]	@ (8002ad0 <HAL_RCC_OscConfig+0x504>)
 8002904:	4313      	orrs	r3, r2
 8002906:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002908:	e040      	b.n	800298c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	68db      	ldr	r3, [r3, #12]
 800290e:	2b00      	cmp	r3, #0
 8002910:	d023      	beq.n	800295a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002912:	4b6f      	ldr	r3, [pc, #444]	@ (8002ad0 <HAL_RCC_OscConfig+0x504>)
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	4a6e      	ldr	r2, [pc, #440]	@ (8002ad0 <HAL_RCC_OscConfig+0x504>)
 8002918:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800291c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800291e:	f7ff fa7d 	bl	8001e1c <HAL_GetTick>
 8002922:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002924:	e008      	b.n	8002938 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002926:	f7ff fa79 	bl	8001e1c <HAL_GetTick>
 800292a:	4602      	mov	r2, r0
 800292c:	693b      	ldr	r3, [r7, #16]
 800292e:	1ad3      	subs	r3, r2, r3
 8002930:	2b02      	cmp	r3, #2
 8002932:	d901      	bls.n	8002938 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002934:	2303      	movs	r3, #3
 8002936:	e25b      	b.n	8002df0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002938:	4b65      	ldr	r3, [pc, #404]	@ (8002ad0 <HAL_RCC_OscConfig+0x504>)
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002940:	2b00      	cmp	r3, #0
 8002942:	d0f0      	beq.n	8002926 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002944:	4b62      	ldr	r3, [pc, #392]	@ (8002ad0 <HAL_RCC_OscConfig+0x504>)
 8002946:	685b      	ldr	r3, [r3, #4]
 8002948:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	691b      	ldr	r3, [r3, #16]
 8002950:	061b      	lsls	r3, r3, #24
 8002952:	495f      	ldr	r1, [pc, #380]	@ (8002ad0 <HAL_RCC_OscConfig+0x504>)
 8002954:	4313      	orrs	r3, r2
 8002956:	604b      	str	r3, [r1, #4]
 8002958:	e018      	b.n	800298c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800295a:	4b5d      	ldr	r3, [pc, #372]	@ (8002ad0 <HAL_RCC_OscConfig+0x504>)
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	4a5c      	ldr	r2, [pc, #368]	@ (8002ad0 <HAL_RCC_OscConfig+0x504>)
 8002960:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002964:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002966:	f7ff fa59 	bl	8001e1c <HAL_GetTick>
 800296a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800296c:	e008      	b.n	8002980 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800296e:	f7ff fa55 	bl	8001e1c <HAL_GetTick>
 8002972:	4602      	mov	r2, r0
 8002974:	693b      	ldr	r3, [r7, #16]
 8002976:	1ad3      	subs	r3, r2, r3
 8002978:	2b02      	cmp	r3, #2
 800297a:	d901      	bls.n	8002980 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800297c:	2303      	movs	r3, #3
 800297e:	e237      	b.n	8002df0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002980:	4b53      	ldr	r3, [pc, #332]	@ (8002ad0 <HAL_RCC_OscConfig+0x504>)
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002988:	2b00      	cmp	r3, #0
 800298a:	d1f0      	bne.n	800296e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f003 0308 	and.w	r3, r3, #8
 8002994:	2b00      	cmp	r3, #0
 8002996:	d03c      	beq.n	8002a12 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	695b      	ldr	r3, [r3, #20]
 800299c:	2b00      	cmp	r3, #0
 800299e:	d01c      	beq.n	80029da <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80029a0:	4b4b      	ldr	r3, [pc, #300]	@ (8002ad0 <HAL_RCC_OscConfig+0x504>)
 80029a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80029a6:	4a4a      	ldr	r2, [pc, #296]	@ (8002ad0 <HAL_RCC_OscConfig+0x504>)
 80029a8:	f043 0301 	orr.w	r3, r3, #1
 80029ac:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029b0:	f7ff fa34 	bl	8001e1c <HAL_GetTick>
 80029b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80029b6:	e008      	b.n	80029ca <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80029b8:	f7ff fa30 	bl	8001e1c <HAL_GetTick>
 80029bc:	4602      	mov	r2, r0
 80029be:	693b      	ldr	r3, [r7, #16]
 80029c0:	1ad3      	subs	r3, r2, r3
 80029c2:	2b02      	cmp	r3, #2
 80029c4:	d901      	bls.n	80029ca <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80029c6:	2303      	movs	r3, #3
 80029c8:	e212      	b.n	8002df0 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80029ca:	4b41      	ldr	r3, [pc, #260]	@ (8002ad0 <HAL_RCC_OscConfig+0x504>)
 80029cc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80029d0:	f003 0302 	and.w	r3, r3, #2
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d0ef      	beq.n	80029b8 <HAL_RCC_OscConfig+0x3ec>
 80029d8:	e01b      	b.n	8002a12 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80029da:	4b3d      	ldr	r3, [pc, #244]	@ (8002ad0 <HAL_RCC_OscConfig+0x504>)
 80029dc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80029e0:	4a3b      	ldr	r2, [pc, #236]	@ (8002ad0 <HAL_RCC_OscConfig+0x504>)
 80029e2:	f023 0301 	bic.w	r3, r3, #1
 80029e6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029ea:	f7ff fa17 	bl	8001e1c <HAL_GetTick>
 80029ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80029f0:	e008      	b.n	8002a04 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80029f2:	f7ff fa13 	bl	8001e1c <HAL_GetTick>
 80029f6:	4602      	mov	r2, r0
 80029f8:	693b      	ldr	r3, [r7, #16]
 80029fa:	1ad3      	subs	r3, r2, r3
 80029fc:	2b02      	cmp	r3, #2
 80029fe:	d901      	bls.n	8002a04 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002a00:	2303      	movs	r3, #3
 8002a02:	e1f5      	b.n	8002df0 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002a04:	4b32      	ldr	r3, [pc, #200]	@ (8002ad0 <HAL_RCC_OscConfig+0x504>)
 8002a06:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002a0a:	f003 0302 	and.w	r3, r3, #2
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d1ef      	bne.n	80029f2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f003 0304 	and.w	r3, r3, #4
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	f000 80a6 	beq.w	8002b6c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a20:	2300      	movs	r3, #0
 8002a22:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002a24:	4b2a      	ldr	r3, [pc, #168]	@ (8002ad0 <HAL_RCC_OscConfig+0x504>)
 8002a26:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a28:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d10d      	bne.n	8002a4c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a30:	4b27      	ldr	r3, [pc, #156]	@ (8002ad0 <HAL_RCC_OscConfig+0x504>)
 8002a32:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a34:	4a26      	ldr	r2, [pc, #152]	@ (8002ad0 <HAL_RCC_OscConfig+0x504>)
 8002a36:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002a3a:	6593      	str	r3, [r2, #88]	@ 0x58
 8002a3c:	4b24      	ldr	r3, [pc, #144]	@ (8002ad0 <HAL_RCC_OscConfig+0x504>)
 8002a3e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a40:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a44:	60bb      	str	r3, [r7, #8]
 8002a46:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a48:	2301      	movs	r3, #1
 8002a4a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002a4c:	4b21      	ldr	r3, [pc, #132]	@ (8002ad4 <HAL_RCC_OscConfig+0x508>)
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d118      	bne.n	8002a8a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002a58:	4b1e      	ldr	r3, [pc, #120]	@ (8002ad4 <HAL_RCC_OscConfig+0x508>)
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	4a1d      	ldr	r2, [pc, #116]	@ (8002ad4 <HAL_RCC_OscConfig+0x508>)
 8002a5e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002a62:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a64:	f7ff f9da 	bl	8001e1c <HAL_GetTick>
 8002a68:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002a6a:	e008      	b.n	8002a7e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a6c:	f7ff f9d6 	bl	8001e1c <HAL_GetTick>
 8002a70:	4602      	mov	r2, r0
 8002a72:	693b      	ldr	r3, [r7, #16]
 8002a74:	1ad3      	subs	r3, r2, r3
 8002a76:	2b02      	cmp	r3, #2
 8002a78:	d901      	bls.n	8002a7e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002a7a:	2303      	movs	r3, #3
 8002a7c:	e1b8      	b.n	8002df0 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002a7e:	4b15      	ldr	r3, [pc, #84]	@ (8002ad4 <HAL_RCC_OscConfig+0x508>)
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d0f0      	beq.n	8002a6c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	689b      	ldr	r3, [r3, #8]
 8002a8e:	2b01      	cmp	r3, #1
 8002a90:	d108      	bne.n	8002aa4 <HAL_RCC_OscConfig+0x4d8>
 8002a92:	4b0f      	ldr	r3, [pc, #60]	@ (8002ad0 <HAL_RCC_OscConfig+0x504>)
 8002a94:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a98:	4a0d      	ldr	r2, [pc, #52]	@ (8002ad0 <HAL_RCC_OscConfig+0x504>)
 8002a9a:	f043 0301 	orr.w	r3, r3, #1
 8002a9e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002aa2:	e029      	b.n	8002af8 <HAL_RCC_OscConfig+0x52c>
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	689b      	ldr	r3, [r3, #8]
 8002aa8:	2b05      	cmp	r3, #5
 8002aaa:	d115      	bne.n	8002ad8 <HAL_RCC_OscConfig+0x50c>
 8002aac:	4b08      	ldr	r3, [pc, #32]	@ (8002ad0 <HAL_RCC_OscConfig+0x504>)
 8002aae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ab2:	4a07      	ldr	r2, [pc, #28]	@ (8002ad0 <HAL_RCC_OscConfig+0x504>)
 8002ab4:	f043 0304 	orr.w	r3, r3, #4
 8002ab8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002abc:	4b04      	ldr	r3, [pc, #16]	@ (8002ad0 <HAL_RCC_OscConfig+0x504>)
 8002abe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ac2:	4a03      	ldr	r2, [pc, #12]	@ (8002ad0 <HAL_RCC_OscConfig+0x504>)
 8002ac4:	f043 0301 	orr.w	r3, r3, #1
 8002ac8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002acc:	e014      	b.n	8002af8 <HAL_RCC_OscConfig+0x52c>
 8002ace:	bf00      	nop
 8002ad0:	40021000 	.word	0x40021000
 8002ad4:	40007000 	.word	0x40007000
 8002ad8:	4b9d      	ldr	r3, [pc, #628]	@ (8002d50 <HAL_RCC_OscConfig+0x784>)
 8002ada:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ade:	4a9c      	ldr	r2, [pc, #624]	@ (8002d50 <HAL_RCC_OscConfig+0x784>)
 8002ae0:	f023 0301 	bic.w	r3, r3, #1
 8002ae4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002ae8:	4b99      	ldr	r3, [pc, #612]	@ (8002d50 <HAL_RCC_OscConfig+0x784>)
 8002aea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002aee:	4a98      	ldr	r2, [pc, #608]	@ (8002d50 <HAL_RCC_OscConfig+0x784>)
 8002af0:	f023 0304 	bic.w	r3, r3, #4
 8002af4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	689b      	ldr	r3, [r3, #8]
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d016      	beq.n	8002b2e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b00:	f7ff f98c 	bl	8001e1c <HAL_GetTick>
 8002b04:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002b06:	e00a      	b.n	8002b1e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b08:	f7ff f988 	bl	8001e1c <HAL_GetTick>
 8002b0c:	4602      	mov	r2, r0
 8002b0e:	693b      	ldr	r3, [r7, #16]
 8002b10:	1ad3      	subs	r3, r2, r3
 8002b12:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b16:	4293      	cmp	r3, r2
 8002b18:	d901      	bls.n	8002b1e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002b1a:	2303      	movs	r3, #3
 8002b1c:	e168      	b.n	8002df0 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002b1e:	4b8c      	ldr	r3, [pc, #560]	@ (8002d50 <HAL_RCC_OscConfig+0x784>)
 8002b20:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b24:	f003 0302 	and.w	r3, r3, #2
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d0ed      	beq.n	8002b08 <HAL_RCC_OscConfig+0x53c>
 8002b2c:	e015      	b.n	8002b5a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b2e:	f7ff f975 	bl	8001e1c <HAL_GetTick>
 8002b32:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002b34:	e00a      	b.n	8002b4c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b36:	f7ff f971 	bl	8001e1c <HAL_GetTick>
 8002b3a:	4602      	mov	r2, r0
 8002b3c:	693b      	ldr	r3, [r7, #16]
 8002b3e:	1ad3      	subs	r3, r2, r3
 8002b40:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b44:	4293      	cmp	r3, r2
 8002b46:	d901      	bls.n	8002b4c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002b48:	2303      	movs	r3, #3
 8002b4a:	e151      	b.n	8002df0 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002b4c:	4b80      	ldr	r3, [pc, #512]	@ (8002d50 <HAL_RCC_OscConfig+0x784>)
 8002b4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b52:	f003 0302 	and.w	r3, r3, #2
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d1ed      	bne.n	8002b36 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002b5a:	7ffb      	ldrb	r3, [r7, #31]
 8002b5c:	2b01      	cmp	r3, #1
 8002b5e:	d105      	bne.n	8002b6c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b60:	4b7b      	ldr	r3, [pc, #492]	@ (8002d50 <HAL_RCC_OscConfig+0x784>)
 8002b62:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b64:	4a7a      	ldr	r2, [pc, #488]	@ (8002d50 <HAL_RCC_OscConfig+0x784>)
 8002b66:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002b6a:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f003 0320 	and.w	r3, r3, #32
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d03c      	beq.n	8002bf2 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d01c      	beq.n	8002bba <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002b80:	4b73      	ldr	r3, [pc, #460]	@ (8002d50 <HAL_RCC_OscConfig+0x784>)
 8002b82:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002b86:	4a72      	ldr	r2, [pc, #456]	@ (8002d50 <HAL_RCC_OscConfig+0x784>)
 8002b88:	f043 0301 	orr.w	r3, r3, #1
 8002b8c:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b90:	f7ff f944 	bl	8001e1c <HAL_GetTick>
 8002b94:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002b96:	e008      	b.n	8002baa <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002b98:	f7ff f940 	bl	8001e1c <HAL_GetTick>
 8002b9c:	4602      	mov	r2, r0
 8002b9e:	693b      	ldr	r3, [r7, #16]
 8002ba0:	1ad3      	subs	r3, r2, r3
 8002ba2:	2b02      	cmp	r3, #2
 8002ba4:	d901      	bls.n	8002baa <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8002ba6:	2303      	movs	r3, #3
 8002ba8:	e122      	b.n	8002df0 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002baa:	4b69      	ldr	r3, [pc, #420]	@ (8002d50 <HAL_RCC_OscConfig+0x784>)
 8002bac:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002bb0:	f003 0302 	and.w	r3, r3, #2
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d0ef      	beq.n	8002b98 <HAL_RCC_OscConfig+0x5cc>
 8002bb8:	e01b      	b.n	8002bf2 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002bba:	4b65      	ldr	r3, [pc, #404]	@ (8002d50 <HAL_RCC_OscConfig+0x784>)
 8002bbc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002bc0:	4a63      	ldr	r2, [pc, #396]	@ (8002d50 <HAL_RCC_OscConfig+0x784>)
 8002bc2:	f023 0301 	bic.w	r3, r3, #1
 8002bc6:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bca:	f7ff f927 	bl	8001e1c <HAL_GetTick>
 8002bce:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002bd0:	e008      	b.n	8002be4 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002bd2:	f7ff f923 	bl	8001e1c <HAL_GetTick>
 8002bd6:	4602      	mov	r2, r0
 8002bd8:	693b      	ldr	r3, [r7, #16]
 8002bda:	1ad3      	subs	r3, r2, r3
 8002bdc:	2b02      	cmp	r3, #2
 8002bde:	d901      	bls.n	8002be4 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8002be0:	2303      	movs	r3, #3
 8002be2:	e105      	b.n	8002df0 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002be4:	4b5a      	ldr	r3, [pc, #360]	@ (8002d50 <HAL_RCC_OscConfig+0x784>)
 8002be6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002bea:	f003 0302 	and.w	r3, r3, #2
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d1ef      	bne.n	8002bd2 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	f000 80f9 	beq.w	8002dee <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c00:	2b02      	cmp	r3, #2
 8002c02:	f040 80cf 	bne.w	8002da4 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002c06:	4b52      	ldr	r3, [pc, #328]	@ (8002d50 <HAL_RCC_OscConfig+0x784>)
 8002c08:	68db      	ldr	r3, [r3, #12]
 8002c0a:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c0c:	697b      	ldr	r3, [r7, #20]
 8002c0e:	f003 0203 	and.w	r2, r3, #3
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c16:	429a      	cmp	r2, r3
 8002c18:	d12c      	bne.n	8002c74 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002c1a:	697b      	ldr	r3, [r7, #20]
 8002c1c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c24:	3b01      	subs	r3, #1
 8002c26:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c28:	429a      	cmp	r2, r3
 8002c2a:	d123      	bne.n	8002c74 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002c2c:	697b      	ldr	r3, [r7, #20]
 8002c2e:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c36:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002c38:	429a      	cmp	r2, r3
 8002c3a:	d11b      	bne.n	8002c74 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002c3c:	697b      	ldr	r3, [r7, #20]
 8002c3e:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c46:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002c48:	429a      	cmp	r2, r3
 8002c4a:	d113      	bne.n	8002c74 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002c4c:	697b      	ldr	r3, [r7, #20]
 8002c4e:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c56:	085b      	lsrs	r3, r3, #1
 8002c58:	3b01      	subs	r3, #1
 8002c5a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002c5c:	429a      	cmp	r2, r3
 8002c5e:	d109      	bne.n	8002c74 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002c60:	697b      	ldr	r3, [r7, #20]
 8002c62:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c6a:	085b      	lsrs	r3, r3, #1
 8002c6c:	3b01      	subs	r3, #1
 8002c6e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002c70:	429a      	cmp	r2, r3
 8002c72:	d071      	beq.n	8002d58 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002c74:	69bb      	ldr	r3, [r7, #24]
 8002c76:	2b0c      	cmp	r3, #12
 8002c78:	d068      	beq.n	8002d4c <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002c7a:	4b35      	ldr	r3, [pc, #212]	@ (8002d50 <HAL_RCC_OscConfig+0x784>)
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d105      	bne.n	8002c92 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002c86:	4b32      	ldr	r3, [pc, #200]	@ (8002d50 <HAL_RCC_OscConfig+0x784>)
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d001      	beq.n	8002c96 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8002c92:	2301      	movs	r3, #1
 8002c94:	e0ac      	b.n	8002df0 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002c96:	4b2e      	ldr	r3, [pc, #184]	@ (8002d50 <HAL_RCC_OscConfig+0x784>)
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	4a2d      	ldr	r2, [pc, #180]	@ (8002d50 <HAL_RCC_OscConfig+0x784>)
 8002c9c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002ca0:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002ca2:	f7ff f8bb 	bl	8001e1c <HAL_GetTick>
 8002ca6:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002ca8:	e008      	b.n	8002cbc <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002caa:	f7ff f8b7 	bl	8001e1c <HAL_GetTick>
 8002cae:	4602      	mov	r2, r0
 8002cb0:	693b      	ldr	r3, [r7, #16]
 8002cb2:	1ad3      	subs	r3, r2, r3
 8002cb4:	2b02      	cmp	r3, #2
 8002cb6:	d901      	bls.n	8002cbc <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8002cb8:	2303      	movs	r3, #3
 8002cba:	e099      	b.n	8002df0 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002cbc:	4b24      	ldr	r3, [pc, #144]	@ (8002d50 <HAL_RCC_OscConfig+0x784>)
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d1f0      	bne.n	8002caa <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002cc8:	4b21      	ldr	r3, [pc, #132]	@ (8002d50 <HAL_RCC_OscConfig+0x784>)
 8002cca:	68da      	ldr	r2, [r3, #12]
 8002ccc:	4b21      	ldr	r3, [pc, #132]	@ (8002d54 <HAL_RCC_OscConfig+0x788>)
 8002cce:	4013      	ands	r3, r2
 8002cd0:	687a      	ldr	r2, [r7, #4]
 8002cd2:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8002cd4:	687a      	ldr	r2, [r7, #4]
 8002cd6:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002cd8:	3a01      	subs	r2, #1
 8002cda:	0112      	lsls	r2, r2, #4
 8002cdc:	4311      	orrs	r1, r2
 8002cde:	687a      	ldr	r2, [r7, #4]
 8002ce0:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002ce2:	0212      	lsls	r2, r2, #8
 8002ce4:	4311      	orrs	r1, r2
 8002ce6:	687a      	ldr	r2, [r7, #4]
 8002ce8:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002cea:	0852      	lsrs	r2, r2, #1
 8002cec:	3a01      	subs	r2, #1
 8002cee:	0552      	lsls	r2, r2, #21
 8002cf0:	4311      	orrs	r1, r2
 8002cf2:	687a      	ldr	r2, [r7, #4]
 8002cf4:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002cf6:	0852      	lsrs	r2, r2, #1
 8002cf8:	3a01      	subs	r2, #1
 8002cfa:	0652      	lsls	r2, r2, #25
 8002cfc:	4311      	orrs	r1, r2
 8002cfe:	687a      	ldr	r2, [r7, #4]
 8002d00:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002d02:	06d2      	lsls	r2, r2, #27
 8002d04:	430a      	orrs	r2, r1
 8002d06:	4912      	ldr	r1, [pc, #72]	@ (8002d50 <HAL_RCC_OscConfig+0x784>)
 8002d08:	4313      	orrs	r3, r2
 8002d0a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002d0c:	4b10      	ldr	r3, [pc, #64]	@ (8002d50 <HAL_RCC_OscConfig+0x784>)
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	4a0f      	ldr	r2, [pc, #60]	@ (8002d50 <HAL_RCC_OscConfig+0x784>)
 8002d12:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002d16:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002d18:	4b0d      	ldr	r3, [pc, #52]	@ (8002d50 <HAL_RCC_OscConfig+0x784>)
 8002d1a:	68db      	ldr	r3, [r3, #12]
 8002d1c:	4a0c      	ldr	r2, [pc, #48]	@ (8002d50 <HAL_RCC_OscConfig+0x784>)
 8002d1e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002d22:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002d24:	f7ff f87a 	bl	8001e1c <HAL_GetTick>
 8002d28:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d2a:	e008      	b.n	8002d3e <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d2c:	f7ff f876 	bl	8001e1c <HAL_GetTick>
 8002d30:	4602      	mov	r2, r0
 8002d32:	693b      	ldr	r3, [r7, #16]
 8002d34:	1ad3      	subs	r3, r2, r3
 8002d36:	2b02      	cmp	r3, #2
 8002d38:	d901      	bls.n	8002d3e <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8002d3a:	2303      	movs	r3, #3
 8002d3c:	e058      	b.n	8002df0 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d3e:	4b04      	ldr	r3, [pc, #16]	@ (8002d50 <HAL_RCC_OscConfig+0x784>)
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d0f0      	beq.n	8002d2c <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002d4a:	e050      	b.n	8002dee <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002d4c:	2301      	movs	r3, #1
 8002d4e:	e04f      	b.n	8002df0 <HAL_RCC_OscConfig+0x824>
 8002d50:	40021000 	.word	0x40021000
 8002d54:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d58:	4b27      	ldr	r3, [pc, #156]	@ (8002df8 <HAL_RCC_OscConfig+0x82c>)
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d144      	bne.n	8002dee <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002d64:	4b24      	ldr	r3, [pc, #144]	@ (8002df8 <HAL_RCC_OscConfig+0x82c>)
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	4a23      	ldr	r2, [pc, #140]	@ (8002df8 <HAL_RCC_OscConfig+0x82c>)
 8002d6a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002d6e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002d70:	4b21      	ldr	r3, [pc, #132]	@ (8002df8 <HAL_RCC_OscConfig+0x82c>)
 8002d72:	68db      	ldr	r3, [r3, #12]
 8002d74:	4a20      	ldr	r2, [pc, #128]	@ (8002df8 <HAL_RCC_OscConfig+0x82c>)
 8002d76:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002d7a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002d7c:	f7ff f84e 	bl	8001e1c <HAL_GetTick>
 8002d80:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d82:	e008      	b.n	8002d96 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d84:	f7ff f84a 	bl	8001e1c <HAL_GetTick>
 8002d88:	4602      	mov	r2, r0
 8002d8a:	693b      	ldr	r3, [r7, #16]
 8002d8c:	1ad3      	subs	r3, r2, r3
 8002d8e:	2b02      	cmp	r3, #2
 8002d90:	d901      	bls.n	8002d96 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8002d92:	2303      	movs	r3, #3
 8002d94:	e02c      	b.n	8002df0 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d96:	4b18      	ldr	r3, [pc, #96]	@ (8002df8 <HAL_RCC_OscConfig+0x82c>)
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d0f0      	beq.n	8002d84 <HAL_RCC_OscConfig+0x7b8>
 8002da2:	e024      	b.n	8002dee <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002da4:	69bb      	ldr	r3, [r7, #24]
 8002da6:	2b0c      	cmp	r3, #12
 8002da8:	d01f      	beq.n	8002dea <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002daa:	4b13      	ldr	r3, [pc, #76]	@ (8002df8 <HAL_RCC_OscConfig+0x82c>)
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	4a12      	ldr	r2, [pc, #72]	@ (8002df8 <HAL_RCC_OscConfig+0x82c>)
 8002db0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002db4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002db6:	f7ff f831 	bl	8001e1c <HAL_GetTick>
 8002dba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002dbc:	e008      	b.n	8002dd0 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002dbe:	f7ff f82d 	bl	8001e1c <HAL_GetTick>
 8002dc2:	4602      	mov	r2, r0
 8002dc4:	693b      	ldr	r3, [r7, #16]
 8002dc6:	1ad3      	subs	r3, r2, r3
 8002dc8:	2b02      	cmp	r3, #2
 8002dca:	d901      	bls.n	8002dd0 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8002dcc:	2303      	movs	r3, #3
 8002dce:	e00f      	b.n	8002df0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002dd0:	4b09      	ldr	r3, [pc, #36]	@ (8002df8 <HAL_RCC_OscConfig+0x82c>)
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d1f0      	bne.n	8002dbe <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002ddc:	4b06      	ldr	r3, [pc, #24]	@ (8002df8 <HAL_RCC_OscConfig+0x82c>)
 8002dde:	68da      	ldr	r2, [r3, #12]
 8002de0:	4905      	ldr	r1, [pc, #20]	@ (8002df8 <HAL_RCC_OscConfig+0x82c>)
 8002de2:	4b06      	ldr	r3, [pc, #24]	@ (8002dfc <HAL_RCC_OscConfig+0x830>)
 8002de4:	4013      	ands	r3, r2
 8002de6:	60cb      	str	r3, [r1, #12]
 8002de8:	e001      	b.n	8002dee <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002dea:	2301      	movs	r3, #1
 8002dec:	e000      	b.n	8002df0 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8002dee:	2300      	movs	r3, #0
}
 8002df0:	4618      	mov	r0, r3
 8002df2:	3720      	adds	r7, #32
 8002df4:	46bd      	mov	sp, r7
 8002df6:	bd80      	pop	{r7, pc}
 8002df8:	40021000 	.word	0x40021000
 8002dfc:	feeefffc 	.word	0xfeeefffc

08002e00 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e00:	b580      	push	{r7, lr}
 8002e02:	b086      	sub	sp, #24
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	6078      	str	r0, [r7, #4]
 8002e08:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8002e0a:	2300      	movs	r3, #0
 8002e0c:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d101      	bne.n	8002e18 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002e14:	2301      	movs	r3, #1
 8002e16:	e11d      	b.n	8003054 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002e18:	4b90      	ldr	r3, [pc, #576]	@ (800305c <HAL_RCC_ClockConfig+0x25c>)
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f003 030f 	and.w	r3, r3, #15
 8002e20:	683a      	ldr	r2, [r7, #0]
 8002e22:	429a      	cmp	r2, r3
 8002e24:	d910      	bls.n	8002e48 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e26:	4b8d      	ldr	r3, [pc, #564]	@ (800305c <HAL_RCC_ClockConfig+0x25c>)
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f023 020f 	bic.w	r2, r3, #15
 8002e2e:	498b      	ldr	r1, [pc, #556]	@ (800305c <HAL_RCC_ClockConfig+0x25c>)
 8002e30:	683b      	ldr	r3, [r7, #0]
 8002e32:	4313      	orrs	r3, r2
 8002e34:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e36:	4b89      	ldr	r3, [pc, #548]	@ (800305c <HAL_RCC_ClockConfig+0x25c>)
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f003 030f 	and.w	r3, r3, #15
 8002e3e:	683a      	ldr	r2, [r7, #0]
 8002e40:	429a      	cmp	r2, r3
 8002e42:	d001      	beq.n	8002e48 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002e44:	2301      	movs	r3, #1
 8002e46:	e105      	b.n	8003054 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f003 0302 	and.w	r3, r3, #2
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d010      	beq.n	8002e76 <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	689a      	ldr	r2, [r3, #8]
 8002e58:	4b81      	ldr	r3, [pc, #516]	@ (8003060 <HAL_RCC_ClockConfig+0x260>)
 8002e5a:	689b      	ldr	r3, [r3, #8]
 8002e5c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002e60:	429a      	cmp	r2, r3
 8002e62:	d908      	bls.n	8002e76 <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e64:	4b7e      	ldr	r3, [pc, #504]	@ (8003060 <HAL_RCC_ClockConfig+0x260>)
 8002e66:	689b      	ldr	r3, [r3, #8]
 8002e68:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	689b      	ldr	r3, [r3, #8]
 8002e70:	497b      	ldr	r1, [pc, #492]	@ (8003060 <HAL_RCC_ClockConfig+0x260>)
 8002e72:	4313      	orrs	r3, r2
 8002e74:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f003 0301 	and.w	r3, r3, #1
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d079      	beq.n	8002f76 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	685b      	ldr	r3, [r3, #4]
 8002e86:	2b03      	cmp	r3, #3
 8002e88:	d11e      	bne.n	8002ec8 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e8a:	4b75      	ldr	r3, [pc, #468]	@ (8003060 <HAL_RCC_ClockConfig+0x260>)
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d101      	bne.n	8002e9a <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 8002e96:	2301      	movs	r3, #1
 8002e98:	e0dc      	b.n	8003054 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8002e9a:	f000 fa07 	bl	80032ac <RCC_GetSysClockFreqFromPLLSource>
 8002e9e:	4603      	mov	r3, r0
 8002ea0:	4a70      	ldr	r2, [pc, #448]	@ (8003064 <HAL_RCC_ClockConfig+0x264>)
 8002ea2:	4293      	cmp	r3, r2
 8002ea4:	d946      	bls.n	8002f34 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8002ea6:	4b6e      	ldr	r3, [pc, #440]	@ (8003060 <HAL_RCC_ClockConfig+0x260>)
 8002ea8:	689b      	ldr	r3, [r3, #8]
 8002eaa:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d140      	bne.n	8002f34 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002eb2:	4b6b      	ldr	r3, [pc, #428]	@ (8003060 <HAL_RCC_ClockConfig+0x260>)
 8002eb4:	689b      	ldr	r3, [r3, #8]
 8002eb6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002eba:	4a69      	ldr	r2, [pc, #420]	@ (8003060 <HAL_RCC_ClockConfig+0x260>)
 8002ebc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002ec0:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002ec2:	2380      	movs	r3, #128	@ 0x80
 8002ec4:	617b      	str	r3, [r7, #20]
 8002ec6:	e035      	b.n	8002f34 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	685b      	ldr	r3, [r3, #4]
 8002ecc:	2b02      	cmp	r3, #2
 8002ece:	d107      	bne.n	8002ee0 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002ed0:	4b63      	ldr	r3, [pc, #396]	@ (8003060 <HAL_RCC_ClockConfig+0x260>)
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d115      	bne.n	8002f08 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8002edc:	2301      	movs	r3, #1
 8002ede:	e0b9      	b.n	8003054 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	685b      	ldr	r3, [r3, #4]
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d107      	bne.n	8002ef8 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002ee8:	4b5d      	ldr	r3, [pc, #372]	@ (8003060 <HAL_RCC_ClockConfig+0x260>)
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f003 0302 	and.w	r3, r3, #2
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d109      	bne.n	8002f08 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8002ef4:	2301      	movs	r3, #1
 8002ef6:	e0ad      	b.n	8003054 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002ef8:	4b59      	ldr	r3, [pc, #356]	@ (8003060 <HAL_RCC_ClockConfig+0x260>)
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d101      	bne.n	8002f08 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8002f04:	2301      	movs	r3, #1
 8002f06:	e0a5      	b.n	8003054 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8002f08:	f000 f8b4 	bl	8003074 <HAL_RCC_GetSysClockFreq>
 8002f0c:	4603      	mov	r3, r0
 8002f0e:	4a55      	ldr	r2, [pc, #340]	@ (8003064 <HAL_RCC_ClockConfig+0x264>)
 8002f10:	4293      	cmp	r3, r2
 8002f12:	d90f      	bls.n	8002f34 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8002f14:	4b52      	ldr	r3, [pc, #328]	@ (8003060 <HAL_RCC_ClockConfig+0x260>)
 8002f16:	689b      	ldr	r3, [r3, #8]
 8002f18:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d109      	bne.n	8002f34 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002f20:	4b4f      	ldr	r3, [pc, #316]	@ (8003060 <HAL_RCC_ClockConfig+0x260>)
 8002f22:	689b      	ldr	r3, [r3, #8]
 8002f24:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002f28:	4a4d      	ldr	r2, [pc, #308]	@ (8003060 <HAL_RCC_ClockConfig+0x260>)
 8002f2a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002f2e:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002f30:	2380      	movs	r3, #128	@ 0x80
 8002f32:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002f34:	4b4a      	ldr	r3, [pc, #296]	@ (8003060 <HAL_RCC_ClockConfig+0x260>)
 8002f36:	689b      	ldr	r3, [r3, #8]
 8002f38:	f023 0203 	bic.w	r2, r3, #3
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	685b      	ldr	r3, [r3, #4]
 8002f40:	4947      	ldr	r1, [pc, #284]	@ (8003060 <HAL_RCC_ClockConfig+0x260>)
 8002f42:	4313      	orrs	r3, r2
 8002f44:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f46:	f7fe ff69 	bl	8001e1c <HAL_GetTick>
 8002f4a:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f4c:	e00a      	b.n	8002f64 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f4e:	f7fe ff65 	bl	8001e1c <HAL_GetTick>
 8002f52:	4602      	mov	r2, r0
 8002f54:	693b      	ldr	r3, [r7, #16]
 8002f56:	1ad3      	subs	r3, r2, r3
 8002f58:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f5c:	4293      	cmp	r3, r2
 8002f5e:	d901      	bls.n	8002f64 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8002f60:	2303      	movs	r3, #3
 8002f62:	e077      	b.n	8003054 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f64:	4b3e      	ldr	r3, [pc, #248]	@ (8003060 <HAL_RCC_ClockConfig+0x260>)
 8002f66:	689b      	ldr	r3, [r3, #8]
 8002f68:	f003 020c 	and.w	r2, r3, #12
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	685b      	ldr	r3, [r3, #4]
 8002f70:	009b      	lsls	r3, r3, #2
 8002f72:	429a      	cmp	r2, r3
 8002f74:	d1eb      	bne.n	8002f4e <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8002f76:	697b      	ldr	r3, [r7, #20]
 8002f78:	2b80      	cmp	r3, #128	@ 0x80
 8002f7a:	d105      	bne.n	8002f88 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002f7c:	4b38      	ldr	r3, [pc, #224]	@ (8003060 <HAL_RCC_ClockConfig+0x260>)
 8002f7e:	689b      	ldr	r3, [r3, #8]
 8002f80:	4a37      	ldr	r2, [pc, #220]	@ (8003060 <HAL_RCC_ClockConfig+0x260>)
 8002f82:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002f86:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f003 0302 	and.w	r3, r3, #2
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d010      	beq.n	8002fb6 <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	689a      	ldr	r2, [r3, #8]
 8002f98:	4b31      	ldr	r3, [pc, #196]	@ (8003060 <HAL_RCC_ClockConfig+0x260>)
 8002f9a:	689b      	ldr	r3, [r3, #8]
 8002f9c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002fa0:	429a      	cmp	r2, r3
 8002fa2:	d208      	bcs.n	8002fb6 <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002fa4:	4b2e      	ldr	r3, [pc, #184]	@ (8003060 <HAL_RCC_ClockConfig+0x260>)
 8002fa6:	689b      	ldr	r3, [r3, #8]
 8002fa8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	689b      	ldr	r3, [r3, #8]
 8002fb0:	492b      	ldr	r1, [pc, #172]	@ (8003060 <HAL_RCC_ClockConfig+0x260>)
 8002fb2:	4313      	orrs	r3, r2
 8002fb4:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002fb6:	4b29      	ldr	r3, [pc, #164]	@ (800305c <HAL_RCC_ClockConfig+0x25c>)
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f003 030f 	and.w	r3, r3, #15
 8002fbe:	683a      	ldr	r2, [r7, #0]
 8002fc0:	429a      	cmp	r2, r3
 8002fc2:	d210      	bcs.n	8002fe6 <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fc4:	4b25      	ldr	r3, [pc, #148]	@ (800305c <HAL_RCC_ClockConfig+0x25c>)
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f023 020f 	bic.w	r2, r3, #15
 8002fcc:	4923      	ldr	r1, [pc, #140]	@ (800305c <HAL_RCC_ClockConfig+0x25c>)
 8002fce:	683b      	ldr	r3, [r7, #0]
 8002fd0:	4313      	orrs	r3, r2
 8002fd2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fd4:	4b21      	ldr	r3, [pc, #132]	@ (800305c <HAL_RCC_ClockConfig+0x25c>)
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f003 030f 	and.w	r3, r3, #15
 8002fdc:	683a      	ldr	r2, [r7, #0]
 8002fde:	429a      	cmp	r2, r3
 8002fe0:	d001      	beq.n	8002fe6 <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 8002fe2:	2301      	movs	r3, #1
 8002fe4:	e036      	b.n	8003054 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f003 0304 	and.w	r3, r3, #4
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d008      	beq.n	8003004 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ff2:	4b1b      	ldr	r3, [pc, #108]	@ (8003060 <HAL_RCC_ClockConfig+0x260>)
 8002ff4:	689b      	ldr	r3, [r3, #8]
 8002ff6:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	68db      	ldr	r3, [r3, #12]
 8002ffe:	4918      	ldr	r1, [pc, #96]	@ (8003060 <HAL_RCC_ClockConfig+0x260>)
 8003000:	4313      	orrs	r3, r2
 8003002:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f003 0308 	and.w	r3, r3, #8
 800300c:	2b00      	cmp	r3, #0
 800300e:	d009      	beq.n	8003024 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003010:	4b13      	ldr	r3, [pc, #76]	@ (8003060 <HAL_RCC_ClockConfig+0x260>)
 8003012:	689b      	ldr	r3, [r3, #8]
 8003014:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	691b      	ldr	r3, [r3, #16]
 800301c:	00db      	lsls	r3, r3, #3
 800301e:	4910      	ldr	r1, [pc, #64]	@ (8003060 <HAL_RCC_ClockConfig+0x260>)
 8003020:	4313      	orrs	r3, r2
 8003022:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003024:	f000 f826 	bl	8003074 <HAL_RCC_GetSysClockFreq>
 8003028:	4602      	mov	r2, r0
 800302a:	4b0d      	ldr	r3, [pc, #52]	@ (8003060 <HAL_RCC_ClockConfig+0x260>)
 800302c:	689b      	ldr	r3, [r3, #8]
 800302e:	091b      	lsrs	r3, r3, #4
 8003030:	f003 030f 	and.w	r3, r3, #15
 8003034:	490c      	ldr	r1, [pc, #48]	@ (8003068 <HAL_RCC_ClockConfig+0x268>)
 8003036:	5ccb      	ldrb	r3, [r1, r3]
 8003038:	f003 031f 	and.w	r3, r3, #31
 800303c:	fa22 f303 	lsr.w	r3, r2, r3
 8003040:	4a0a      	ldr	r2, [pc, #40]	@ (800306c <HAL_RCC_ClockConfig+0x26c>)
 8003042:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003044:	4b0a      	ldr	r3, [pc, #40]	@ (8003070 <HAL_RCC_ClockConfig+0x270>)
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	4618      	mov	r0, r3
 800304a:	f7fe fe97 	bl	8001d7c <HAL_InitTick>
 800304e:	4603      	mov	r3, r0
 8003050:	73fb      	strb	r3, [r7, #15]

  return status;
 8003052:	7bfb      	ldrb	r3, [r7, #15]
}
 8003054:	4618      	mov	r0, r3
 8003056:	3718      	adds	r7, #24
 8003058:	46bd      	mov	sp, r7
 800305a:	bd80      	pop	{r7, pc}
 800305c:	40022000 	.word	0x40022000
 8003060:	40021000 	.word	0x40021000
 8003064:	04c4b400 	.word	0x04c4b400
 8003068:	0800db40 	.word	0x0800db40
 800306c:	20000000 	.word	0x20000000
 8003070:	20000004 	.word	0x20000004

08003074 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003074:	b480      	push	{r7}
 8003076:	b089      	sub	sp, #36	@ 0x24
 8003078:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800307a:	2300      	movs	r3, #0
 800307c:	61fb      	str	r3, [r7, #28]
 800307e:	2300      	movs	r3, #0
 8003080:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003082:	4b3e      	ldr	r3, [pc, #248]	@ (800317c <HAL_RCC_GetSysClockFreq+0x108>)
 8003084:	689b      	ldr	r3, [r3, #8]
 8003086:	f003 030c 	and.w	r3, r3, #12
 800308a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800308c:	4b3b      	ldr	r3, [pc, #236]	@ (800317c <HAL_RCC_GetSysClockFreq+0x108>)
 800308e:	68db      	ldr	r3, [r3, #12]
 8003090:	f003 0303 	and.w	r3, r3, #3
 8003094:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003096:	693b      	ldr	r3, [r7, #16]
 8003098:	2b00      	cmp	r3, #0
 800309a:	d005      	beq.n	80030a8 <HAL_RCC_GetSysClockFreq+0x34>
 800309c:	693b      	ldr	r3, [r7, #16]
 800309e:	2b0c      	cmp	r3, #12
 80030a0:	d121      	bne.n	80030e6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	2b01      	cmp	r3, #1
 80030a6:	d11e      	bne.n	80030e6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80030a8:	4b34      	ldr	r3, [pc, #208]	@ (800317c <HAL_RCC_GetSysClockFreq+0x108>)
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f003 0308 	and.w	r3, r3, #8
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d107      	bne.n	80030c4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80030b4:	4b31      	ldr	r3, [pc, #196]	@ (800317c <HAL_RCC_GetSysClockFreq+0x108>)
 80030b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80030ba:	0a1b      	lsrs	r3, r3, #8
 80030bc:	f003 030f 	and.w	r3, r3, #15
 80030c0:	61fb      	str	r3, [r7, #28]
 80030c2:	e005      	b.n	80030d0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80030c4:	4b2d      	ldr	r3, [pc, #180]	@ (800317c <HAL_RCC_GetSysClockFreq+0x108>)
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	091b      	lsrs	r3, r3, #4
 80030ca:	f003 030f 	and.w	r3, r3, #15
 80030ce:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80030d0:	4a2b      	ldr	r2, [pc, #172]	@ (8003180 <HAL_RCC_GetSysClockFreq+0x10c>)
 80030d2:	69fb      	ldr	r3, [r7, #28]
 80030d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80030d8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80030da:	693b      	ldr	r3, [r7, #16]
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d10d      	bne.n	80030fc <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80030e0:	69fb      	ldr	r3, [r7, #28]
 80030e2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80030e4:	e00a      	b.n	80030fc <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80030e6:	693b      	ldr	r3, [r7, #16]
 80030e8:	2b04      	cmp	r3, #4
 80030ea:	d102      	bne.n	80030f2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80030ec:	4b25      	ldr	r3, [pc, #148]	@ (8003184 <HAL_RCC_GetSysClockFreq+0x110>)
 80030ee:	61bb      	str	r3, [r7, #24]
 80030f0:	e004      	b.n	80030fc <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80030f2:	693b      	ldr	r3, [r7, #16]
 80030f4:	2b08      	cmp	r3, #8
 80030f6:	d101      	bne.n	80030fc <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80030f8:	4b22      	ldr	r3, [pc, #136]	@ (8003184 <HAL_RCC_GetSysClockFreq+0x110>)
 80030fa:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80030fc:	693b      	ldr	r3, [r7, #16]
 80030fe:	2b0c      	cmp	r3, #12
 8003100:	d134      	bne.n	800316c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003102:	4b1e      	ldr	r3, [pc, #120]	@ (800317c <HAL_RCC_GetSysClockFreq+0x108>)
 8003104:	68db      	ldr	r3, [r3, #12]
 8003106:	f003 0303 	and.w	r3, r3, #3
 800310a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800310c:	68bb      	ldr	r3, [r7, #8]
 800310e:	2b02      	cmp	r3, #2
 8003110:	d003      	beq.n	800311a <HAL_RCC_GetSysClockFreq+0xa6>
 8003112:	68bb      	ldr	r3, [r7, #8]
 8003114:	2b03      	cmp	r3, #3
 8003116:	d003      	beq.n	8003120 <HAL_RCC_GetSysClockFreq+0xac>
 8003118:	e005      	b.n	8003126 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800311a:	4b1a      	ldr	r3, [pc, #104]	@ (8003184 <HAL_RCC_GetSysClockFreq+0x110>)
 800311c:	617b      	str	r3, [r7, #20]
      break;
 800311e:	e005      	b.n	800312c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003120:	4b18      	ldr	r3, [pc, #96]	@ (8003184 <HAL_RCC_GetSysClockFreq+0x110>)
 8003122:	617b      	str	r3, [r7, #20]
      break;
 8003124:	e002      	b.n	800312c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003126:	69fb      	ldr	r3, [r7, #28]
 8003128:	617b      	str	r3, [r7, #20]
      break;
 800312a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800312c:	4b13      	ldr	r3, [pc, #76]	@ (800317c <HAL_RCC_GetSysClockFreq+0x108>)
 800312e:	68db      	ldr	r3, [r3, #12]
 8003130:	091b      	lsrs	r3, r3, #4
 8003132:	f003 030f 	and.w	r3, r3, #15
 8003136:	3301      	adds	r3, #1
 8003138:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800313a:	4b10      	ldr	r3, [pc, #64]	@ (800317c <HAL_RCC_GetSysClockFreq+0x108>)
 800313c:	68db      	ldr	r3, [r3, #12]
 800313e:	0a1b      	lsrs	r3, r3, #8
 8003140:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003144:	697a      	ldr	r2, [r7, #20]
 8003146:	fb03 f202 	mul.w	r2, r3, r2
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003150:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003152:	4b0a      	ldr	r3, [pc, #40]	@ (800317c <HAL_RCC_GetSysClockFreq+0x108>)
 8003154:	68db      	ldr	r3, [r3, #12]
 8003156:	0e5b      	lsrs	r3, r3, #25
 8003158:	f003 0303 	and.w	r3, r3, #3
 800315c:	3301      	adds	r3, #1
 800315e:	005b      	lsls	r3, r3, #1
 8003160:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003162:	697a      	ldr	r2, [r7, #20]
 8003164:	683b      	ldr	r3, [r7, #0]
 8003166:	fbb2 f3f3 	udiv	r3, r2, r3
 800316a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800316c:	69bb      	ldr	r3, [r7, #24]
}
 800316e:	4618      	mov	r0, r3
 8003170:	3724      	adds	r7, #36	@ 0x24
 8003172:	46bd      	mov	sp, r7
 8003174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003178:	4770      	bx	lr
 800317a:	bf00      	nop
 800317c:	40021000 	.word	0x40021000
 8003180:	0800db58 	.word	0x0800db58
 8003184:	00f42400 	.word	0x00f42400

08003188 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003188:	b480      	push	{r7}
 800318a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800318c:	4b03      	ldr	r3, [pc, #12]	@ (800319c <HAL_RCC_GetHCLKFreq+0x14>)
 800318e:	681b      	ldr	r3, [r3, #0]
}
 8003190:	4618      	mov	r0, r3
 8003192:	46bd      	mov	sp, r7
 8003194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003198:	4770      	bx	lr
 800319a:	bf00      	nop
 800319c:	20000000 	.word	0x20000000

080031a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80031a0:	b580      	push	{r7, lr}
 80031a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80031a4:	f7ff fff0 	bl	8003188 <HAL_RCC_GetHCLKFreq>
 80031a8:	4602      	mov	r2, r0
 80031aa:	4b06      	ldr	r3, [pc, #24]	@ (80031c4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80031ac:	689b      	ldr	r3, [r3, #8]
 80031ae:	0a1b      	lsrs	r3, r3, #8
 80031b0:	f003 0307 	and.w	r3, r3, #7
 80031b4:	4904      	ldr	r1, [pc, #16]	@ (80031c8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80031b6:	5ccb      	ldrb	r3, [r1, r3]
 80031b8:	f003 031f 	and.w	r3, r3, #31
 80031bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80031c0:	4618      	mov	r0, r3
 80031c2:	bd80      	pop	{r7, pc}
 80031c4:	40021000 	.word	0x40021000
 80031c8:	0800db50 	.word	0x0800db50

080031cc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80031cc:	b580      	push	{r7, lr}
 80031ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80031d0:	f7ff ffda 	bl	8003188 <HAL_RCC_GetHCLKFreq>
 80031d4:	4602      	mov	r2, r0
 80031d6:	4b06      	ldr	r3, [pc, #24]	@ (80031f0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80031d8:	689b      	ldr	r3, [r3, #8]
 80031da:	0adb      	lsrs	r3, r3, #11
 80031dc:	f003 0307 	and.w	r3, r3, #7
 80031e0:	4904      	ldr	r1, [pc, #16]	@ (80031f4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80031e2:	5ccb      	ldrb	r3, [r1, r3]
 80031e4:	f003 031f 	and.w	r3, r3, #31
 80031e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80031ec:	4618      	mov	r0, r3
 80031ee:	bd80      	pop	{r7, pc}
 80031f0:	40021000 	.word	0x40021000
 80031f4:	0800db50 	.word	0x0800db50

080031f8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80031f8:	b580      	push	{r7, lr}
 80031fa:	b086      	sub	sp, #24
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003200:	2300      	movs	r3, #0
 8003202:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003204:	4b27      	ldr	r3, [pc, #156]	@ (80032a4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003206:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003208:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800320c:	2b00      	cmp	r3, #0
 800320e:	d003      	beq.n	8003218 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003210:	f7ff f908 	bl	8002424 <HAL_PWREx_GetVoltageRange>
 8003214:	6178      	str	r0, [r7, #20]
 8003216:	e014      	b.n	8003242 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003218:	4b22      	ldr	r3, [pc, #136]	@ (80032a4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800321a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800321c:	4a21      	ldr	r2, [pc, #132]	@ (80032a4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800321e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003222:	6593      	str	r3, [r2, #88]	@ 0x58
 8003224:	4b1f      	ldr	r3, [pc, #124]	@ (80032a4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003226:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003228:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800322c:	60fb      	str	r3, [r7, #12]
 800322e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003230:	f7ff f8f8 	bl	8002424 <HAL_PWREx_GetVoltageRange>
 8003234:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003236:	4b1b      	ldr	r3, [pc, #108]	@ (80032a4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003238:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800323a:	4a1a      	ldr	r2, [pc, #104]	@ (80032a4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800323c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003240:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003242:	697b      	ldr	r3, [r7, #20]
 8003244:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003248:	d10b      	bne.n	8003262 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	2b80      	cmp	r3, #128	@ 0x80
 800324e:	d913      	bls.n	8003278 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	2ba0      	cmp	r3, #160	@ 0xa0
 8003254:	d902      	bls.n	800325c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003256:	2302      	movs	r3, #2
 8003258:	613b      	str	r3, [r7, #16]
 800325a:	e00d      	b.n	8003278 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800325c:	2301      	movs	r3, #1
 800325e:	613b      	str	r3, [r7, #16]
 8003260:	e00a      	b.n	8003278 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	2b7f      	cmp	r3, #127	@ 0x7f
 8003266:	d902      	bls.n	800326e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8003268:	2302      	movs	r3, #2
 800326a:	613b      	str	r3, [r7, #16]
 800326c:	e004      	b.n	8003278 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	2b70      	cmp	r3, #112	@ 0x70
 8003272:	d101      	bne.n	8003278 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003274:	2301      	movs	r3, #1
 8003276:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003278:	4b0b      	ldr	r3, [pc, #44]	@ (80032a8 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f023 020f 	bic.w	r2, r3, #15
 8003280:	4909      	ldr	r1, [pc, #36]	@ (80032a8 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8003282:	693b      	ldr	r3, [r7, #16]
 8003284:	4313      	orrs	r3, r2
 8003286:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003288:	4b07      	ldr	r3, [pc, #28]	@ (80032a8 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f003 030f 	and.w	r3, r3, #15
 8003290:	693a      	ldr	r2, [r7, #16]
 8003292:	429a      	cmp	r2, r3
 8003294:	d001      	beq.n	800329a <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8003296:	2301      	movs	r3, #1
 8003298:	e000      	b.n	800329c <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 800329a:	2300      	movs	r3, #0
}
 800329c:	4618      	mov	r0, r3
 800329e:	3718      	adds	r7, #24
 80032a0:	46bd      	mov	sp, r7
 80032a2:	bd80      	pop	{r7, pc}
 80032a4:	40021000 	.word	0x40021000
 80032a8:	40022000 	.word	0x40022000

080032ac <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80032ac:	b480      	push	{r7}
 80032ae:	b087      	sub	sp, #28
 80032b0:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80032b2:	4b2d      	ldr	r3, [pc, #180]	@ (8003368 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80032b4:	68db      	ldr	r3, [r3, #12]
 80032b6:	f003 0303 	and.w	r3, r3, #3
 80032ba:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	2b03      	cmp	r3, #3
 80032c0:	d00b      	beq.n	80032da <RCC_GetSysClockFreqFromPLLSource+0x2e>
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	2b03      	cmp	r3, #3
 80032c6:	d825      	bhi.n	8003314 <RCC_GetSysClockFreqFromPLLSource+0x68>
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	2b01      	cmp	r3, #1
 80032cc:	d008      	beq.n	80032e0 <RCC_GetSysClockFreqFromPLLSource+0x34>
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	2b02      	cmp	r3, #2
 80032d2:	d11f      	bne.n	8003314 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 80032d4:	4b25      	ldr	r3, [pc, #148]	@ (800336c <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80032d6:	613b      	str	r3, [r7, #16]
    break;
 80032d8:	e01f      	b.n	800331a <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 80032da:	4b24      	ldr	r3, [pc, #144]	@ (800336c <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80032dc:	613b      	str	r3, [r7, #16]
    break;
 80032de:	e01c      	b.n	800331a <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80032e0:	4b21      	ldr	r3, [pc, #132]	@ (8003368 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f003 0308 	and.w	r3, r3, #8
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d107      	bne.n	80032fc <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80032ec:	4b1e      	ldr	r3, [pc, #120]	@ (8003368 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80032ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80032f2:	0a1b      	lsrs	r3, r3, #8
 80032f4:	f003 030f 	and.w	r3, r3, #15
 80032f8:	617b      	str	r3, [r7, #20]
 80032fa:	e005      	b.n	8003308 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80032fc:	4b1a      	ldr	r3, [pc, #104]	@ (8003368 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	091b      	lsrs	r3, r3, #4
 8003302:	f003 030f 	and.w	r3, r3, #15
 8003306:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8003308:	4a19      	ldr	r2, [pc, #100]	@ (8003370 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 800330a:	697b      	ldr	r3, [r7, #20]
 800330c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003310:	613b      	str	r3, [r7, #16]
    break;
 8003312:	e002      	b.n	800331a <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8003314:	2300      	movs	r3, #0
 8003316:	613b      	str	r3, [r7, #16]
    break;
 8003318:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800331a:	4b13      	ldr	r3, [pc, #76]	@ (8003368 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800331c:	68db      	ldr	r3, [r3, #12]
 800331e:	091b      	lsrs	r3, r3, #4
 8003320:	f003 030f 	and.w	r3, r3, #15
 8003324:	3301      	adds	r3, #1
 8003326:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003328:	4b0f      	ldr	r3, [pc, #60]	@ (8003368 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800332a:	68db      	ldr	r3, [r3, #12]
 800332c:	0a1b      	lsrs	r3, r3, #8
 800332e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003332:	693a      	ldr	r2, [r7, #16]
 8003334:	fb03 f202 	mul.w	r2, r3, r2
 8003338:	68bb      	ldr	r3, [r7, #8]
 800333a:	fbb2 f3f3 	udiv	r3, r2, r3
 800333e:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003340:	4b09      	ldr	r3, [pc, #36]	@ (8003368 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003342:	68db      	ldr	r3, [r3, #12]
 8003344:	0e5b      	lsrs	r3, r3, #25
 8003346:	f003 0303 	and.w	r3, r3, #3
 800334a:	3301      	adds	r3, #1
 800334c:	005b      	lsls	r3, r3, #1
 800334e:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8003350:	693a      	ldr	r2, [r7, #16]
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	fbb2 f3f3 	udiv	r3, r2, r3
 8003358:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 800335a:	683b      	ldr	r3, [r7, #0]
}
 800335c:	4618      	mov	r0, r3
 800335e:	371c      	adds	r7, #28
 8003360:	46bd      	mov	sp, r7
 8003362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003366:	4770      	bx	lr
 8003368:	40021000 	.word	0x40021000
 800336c:	00f42400 	.word	0x00f42400
 8003370:	0800db58 	.word	0x0800db58

08003374 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003374:	b580      	push	{r7, lr}
 8003376:	b086      	sub	sp, #24
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800337c:	2300      	movs	r3, #0
 800337e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003380:	2300      	movs	r3, #0
 8003382:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800338c:	2b00      	cmp	r3, #0
 800338e:	d040      	beq.n	8003412 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003394:	2b80      	cmp	r3, #128	@ 0x80
 8003396:	d02a      	beq.n	80033ee <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003398:	2b80      	cmp	r3, #128	@ 0x80
 800339a:	d825      	bhi.n	80033e8 <HAL_RCCEx_PeriphCLKConfig+0x74>
 800339c:	2b60      	cmp	r3, #96	@ 0x60
 800339e:	d026      	beq.n	80033ee <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80033a0:	2b60      	cmp	r3, #96	@ 0x60
 80033a2:	d821      	bhi.n	80033e8 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80033a4:	2b40      	cmp	r3, #64	@ 0x40
 80033a6:	d006      	beq.n	80033b6 <HAL_RCCEx_PeriphCLKConfig+0x42>
 80033a8:	2b40      	cmp	r3, #64	@ 0x40
 80033aa:	d81d      	bhi.n	80033e8 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d009      	beq.n	80033c4 <HAL_RCCEx_PeriphCLKConfig+0x50>
 80033b0:	2b20      	cmp	r3, #32
 80033b2:	d010      	beq.n	80033d6 <HAL_RCCEx_PeriphCLKConfig+0x62>
 80033b4:	e018      	b.n	80033e8 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80033b6:	4b89      	ldr	r3, [pc, #548]	@ (80035dc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80033b8:	68db      	ldr	r3, [r3, #12]
 80033ba:	4a88      	ldr	r2, [pc, #544]	@ (80035dc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80033bc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80033c0:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80033c2:	e015      	b.n	80033f0 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	3304      	adds	r3, #4
 80033c8:	2100      	movs	r1, #0
 80033ca:	4618      	mov	r0, r3
 80033cc:	f001 fa82 	bl	80048d4 <RCCEx_PLLSAI1_Config>
 80033d0:	4603      	mov	r3, r0
 80033d2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80033d4:	e00c      	b.n	80033f0 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	3320      	adds	r3, #32
 80033da:	2100      	movs	r1, #0
 80033dc:	4618      	mov	r0, r3
 80033de:	f001 fb6d 	bl	8004abc <RCCEx_PLLSAI2_Config>
 80033e2:	4603      	mov	r3, r0
 80033e4:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80033e6:	e003      	b.n	80033f0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80033e8:	2301      	movs	r3, #1
 80033ea:	74fb      	strb	r3, [r7, #19]
      break;
 80033ec:	e000      	b.n	80033f0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 80033ee:	bf00      	nop
    }

    if(ret == HAL_OK)
 80033f0:	7cfb      	ldrb	r3, [r7, #19]
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d10b      	bne.n	800340e <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80033f6:	4b79      	ldr	r3, [pc, #484]	@ (80035dc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80033f8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80033fc:	f023 02e0 	bic.w	r2, r3, #224	@ 0xe0
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003404:	4975      	ldr	r1, [pc, #468]	@ (80035dc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003406:	4313      	orrs	r3, r2
 8003408:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 800340c:	e001      	b.n	8003412 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800340e:	7cfb      	ldrb	r3, [r7, #19]
 8003410:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800341a:	2b00      	cmp	r3, #0
 800341c:	d047      	beq.n	80034ae <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003422:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003426:	d030      	beq.n	800348a <HAL_RCCEx_PeriphCLKConfig+0x116>
 8003428:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800342c:	d82a      	bhi.n	8003484 <HAL_RCCEx_PeriphCLKConfig+0x110>
 800342e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003432:	d02a      	beq.n	800348a <HAL_RCCEx_PeriphCLKConfig+0x116>
 8003434:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003438:	d824      	bhi.n	8003484 <HAL_RCCEx_PeriphCLKConfig+0x110>
 800343a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800343e:	d008      	beq.n	8003452 <HAL_RCCEx_PeriphCLKConfig+0xde>
 8003440:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003444:	d81e      	bhi.n	8003484 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8003446:	2b00      	cmp	r3, #0
 8003448:	d00a      	beq.n	8003460 <HAL_RCCEx_PeriphCLKConfig+0xec>
 800344a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800344e:	d010      	beq.n	8003472 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8003450:	e018      	b.n	8003484 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003452:	4b62      	ldr	r3, [pc, #392]	@ (80035dc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003454:	68db      	ldr	r3, [r3, #12]
 8003456:	4a61      	ldr	r2, [pc, #388]	@ (80035dc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003458:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800345c:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800345e:	e015      	b.n	800348c <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	3304      	adds	r3, #4
 8003464:	2100      	movs	r1, #0
 8003466:	4618      	mov	r0, r3
 8003468:	f001 fa34 	bl	80048d4 <RCCEx_PLLSAI1_Config>
 800346c:	4603      	mov	r3, r0
 800346e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003470:	e00c      	b.n	800348c <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	3320      	adds	r3, #32
 8003476:	2100      	movs	r1, #0
 8003478:	4618      	mov	r0, r3
 800347a:	f001 fb1f 	bl	8004abc <RCCEx_PLLSAI2_Config>
 800347e:	4603      	mov	r3, r0
 8003480:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003482:	e003      	b.n	800348c <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003484:	2301      	movs	r3, #1
 8003486:	74fb      	strb	r3, [r7, #19]
      break;
 8003488:	e000      	b.n	800348c <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 800348a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800348c:	7cfb      	ldrb	r3, [r7, #19]
 800348e:	2b00      	cmp	r3, #0
 8003490:	d10b      	bne.n	80034aa <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003492:	4b52      	ldr	r3, [pc, #328]	@ (80035dc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003494:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003498:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80034a0:	494e      	ldr	r1, [pc, #312]	@ (80035dc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80034a2:	4313      	orrs	r3, r2
 80034a4:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 80034a8:	e001      	b.n	80034ae <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034aa:	7cfb      	ldrb	r3, [r7, #19]
 80034ac:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	f000 809f 	beq.w	80035fa <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 80034bc:	2300      	movs	r3, #0
 80034be:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80034c0:	4b46      	ldr	r3, [pc, #280]	@ (80035dc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80034c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80034c4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d101      	bne.n	80034d0 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 80034cc:	2301      	movs	r3, #1
 80034ce:	e000      	b.n	80034d2 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 80034d0:	2300      	movs	r3, #0
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d00d      	beq.n	80034f2 <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80034d6:	4b41      	ldr	r3, [pc, #260]	@ (80035dc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80034d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80034da:	4a40      	ldr	r2, [pc, #256]	@ (80035dc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80034dc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80034e0:	6593      	str	r3, [r2, #88]	@ 0x58
 80034e2:	4b3e      	ldr	r3, [pc, #248]	@ (80035dc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80034e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80034e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80034ea:	60bb      	str	r3, [r7, #8]
 80034ec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80034ee:	2301      	movs	r3, #1
 80034f0:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80034f2:	4b3b      	ldr	r3, [pc, #236]	@ (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	4a3a      	ldr	r2, [pc, #232]	@ (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80034f8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80034fc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80034fe:	f7fe fc8d 	bl	8001e1c <HAL_GetTick>
 8003502:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003504:	e009      	b.n	800351a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003506:	f7fe fc89 	bl	8001e1c <HAL_GetTick>
 800350a:	4602      	mov	r2, r0
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	1ad3      	subs	r3, r2, r3
 8003510:	2b02      	cmp	r3, #2
 8003512:	d902      	bls.n	800351a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 8003514:	2303      	movs	r3, #3
 8003516:	74fb      	strb	r3, [r7, #19]
        break;
 8003518:	e005      	b.n	8003526 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800351a:	4b31      	ldr	r3, [pc, #196]	@ (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003522:	2b00      	cmp	r3, #0
 8003524:	d0ef      	beq.n	8003506 <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 8003526:	7cfb      	ldrb	r3, [r7, #19]
 8003528:	2b00      	cmp	r3, #0
 800352a:	d15b      	bne.n	80035e4 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800352c:	4b2b      	ldr	r3, [pc, #172]	@ (80035dc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800352e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003532:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003536:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003538:	697b      	ldr	r3, [r7, #20]
 800353a:	2b00      	cmp	r3, #0
 800353c:	d01f      	beq.n	800357e <HAL_RCCEx_PeriphCLKConfig+0x20a>
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003544:	697a      	ldr	r2, [r7, #20]
 8003546:	429a      	cmp	r2, r3
 8003548:	d019      	beq.n	800357e <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800354a:	4b24      	ldr	r3, [pc, #144]	@ (80035dc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800354c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003550:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003554:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003556:	4b21      	ldr	r3, [pc, #132]	@ (80035dc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003558:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800355c:	4a1f      	ldr	r2, [pc, #124]	@ (80035dc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800355e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003562:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003566:	4b1d      	ldr	r3, [pc, #116]	@ (80035dc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003568:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800356c:	4a1b      	ldr	r2, [pc, #108]	@ (80035dc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800356e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003572:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003576:	4a19      	ldr	r2, [pc, #100]	@ (80035dc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003578:	697b      	ldr	r3, [r7, #20]
 800357a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800357e:	697b      	ldr	r3, [r7, #20]
 8003580:	f003 0301 	and.w	r3, r3, #1
 8003584:	2b00      	cmp	r3, #0
 8003586:	d016      	beq.n	80035b6 <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003588:	f7fe fc48 	bl	8001e1c <HAL_GetTick>
 800358c:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800358e:	e00b      	b.n	80035a8 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003590:	f7fe fc44 	bl	8001e1c <HAL_GetTick>
 8003594:	4602      	mov	r2, r0
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	1ad3      	subs	r3, r2, r3
 800359a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800359e:	4293      	cmp	r3, r2
 80035a0:	d902      	bls.n	80035a8 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 80035a2:	2303      	movs	r3, #3
 80035a4:	74fb      	strb	r3, [r7, #19]
            break;
 80035a6:	e006      	b.n	80035b6 <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80035a8:	4b0c      	ldr	r3, [pc, #48]	@ (80035dc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80035aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80035ae:	f003 0302 	and.w	r3, r3, #2
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d0ec      	beq.n	8003590 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 80035b6:	7cfb      	ldrb	r3, [r7, #19]
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d10c      	bne.n	80035d6 <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80035bc:	4b07      	ldr	r3, [pc, #28]	@ (80035dc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80035be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80035c2:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80035cc:	4903      	ldr	r1, [pc, #12]	@ (80035dc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80035ce:	4313      	orrs	r3, r2
 80035d0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80035d4:	e008      	b.n	80035e8 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80035d6:	7cfb      	ldrb	r3, [r7, #19]
 80035d8:	74bb      	strb	r3, [r7, #18]
 80035da:	e005      	b.n	80035e8 <HAL_RCCEx_PeriphCLKConfig+0x274>
 80035dc:	40021000 	.word	0x40021000
 80035e0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035e4:	7cfb      	ldrb	r3, [r7, #19]
 80035e6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80035e8:	7c7b      	ldrb	r3, [r7, #17]
 80035ea:	2b01      	cmp	r3, #1
 80035ec:	d105      	bne.n	80035fa <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80035ee:	4ba0      	ldr	r3, [pc, #640]	@ (8003870 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80035f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035f2:	4a9f      	ldr	r2, [pc, #636]	@ (8003870 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80035f4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80035f8:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f003 0301 	and.w	r3, r3, #1
 8003602:	2b00      	cmp	r3, #0
 8003604:	d00a      	beq.n	800361c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003606:	4b9a      	ldr	r3, [pc, #616]	@ (8003870 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003608:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800360c:	f023 0203 	bic.w	r2, r3, #3
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003614:	4996      	ldr	r1, [pc, #600]	@ (8003870 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003616:	4313      	orrs	r3, r2
 8003618:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f003 0302 	and.w	r3, r3, #2
 8003624:	2b00      	cmp	r3, #0
 8003626:	d00a      	beq.n	800363e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003628:	4b91      	ldr	r3, [pc, #580]	@ (8003870 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800362a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800362e:	f023 020c 	bic.w	r2, r3, #12
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003636:	498e      	ldr	r1, [pc, #568]	@ (8003870 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003638:	4313      	orrs	r3, r2
 800363a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f003 0304 	and.w	r3, r3, #4
 8003646:	2b00      	cmp	r3, #0
 8003648:	d00a      	beq.n	8003660 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800364a:	4b89      	ldr	r3, [pc, #548]	@ (8003870 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800364c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003650:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003658:	4985      	ldr	r1, [pc, #532]	@ (8003870 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800365a:	4313      	orrs	r3, r2
 800365c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f003 0308 	and.w	r3, r3, #8
 8003668:	2b00      	cmp	r3, #0
 800366a:	d00a      	beq.n	8003682 <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800366c:	4b80      	ldr	r3, [pc, #512]	@ (8003870 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800366e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003672:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800367a:	497d      	ldr	r1, [pc, #500]	@ (8003870 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800367c:	4313      	orrs	r3, r2
 800367e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f003 0310 	and.w	r3, r3, #16
 800368a:	2b00      	cmp	r3, #0
 800368c:	d00a      	beq.n	80036a4 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800368e:	4b78      	ldr	r3, [pc, #480]	@ (8003870 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003690:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003694:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800369c:	4974      	ldr	r1, [pc, #464]	@ (8003870 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800369e:	4313      	orrs	r3, r2
 80036a0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f003 0320 	and.w	r3, r3, #32
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d00a      	beq.n	80036c6 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80036b0:	4b6f      	ldr	r3, [pc, #444]	@ (8003870 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80036b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80036b6:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80036be:	496c      	ldr	r1, [pc, #432]	@ (8003870 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80036c0:	4313      	orrs	r3, r2
 80036c2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d00a      	beq.n	80036e8 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80036d2:	4b67      	ldr	r3, [pc, #412]	@ (8003870 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80036d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80036d8:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80036e0:	4963      	ldr	r1, [pc, #396]	@ (8003870 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80036e2:	4313      	orrs	r3, r2
 80036e4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d00a      	beq.n	800370a <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80036f4:	4b5e      	ldr	r3, [pc, #376]	@ (8003870 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80036f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80036fa:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003702:	495b      	ldr	r1, [pc, #364]	@ (8003870 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003704:	4313      	orrs	r3, r2
 8003706:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003712:	2b00      	cmp	r3, #0
 8003714:	d00a      	beq.n	800372c <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003716:	4b56      	ldr	r3, [pc, #344]	@ (8003870 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003718:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800371c:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003724:	4952      	ldr	r1, [pc, #328]	@ (8003870 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003726:	4313      	orrs	r3, r2
 8003728:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003734:	2b00      	cmp	r3, #0
 8003736:	d00a      	beq.n	800374e <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003738:	4b4d      	ldr	r3, [pc, #308]	@ (8003870 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800373a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800373e:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003746:	494a      	ldr	r1, [pc, #296]	@ (8003870 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003748:	4313      	orrs	r3, r2
 800374a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003756:	2b00      	cmp	r3, #0
 8003758:	d00a      	beq.n	8003770 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800375a:	4b45      	ldr	r3, [pc, #276]	@ (8003870 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800375c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003760:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003768:	4941      	ldr	r1, [pc, #260]	@ (8003870 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800376a:	4313      	orrs	r3, r2
 800376c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003778:	2b00      	cmp	r3, #0
 800377a:	d00a      	beq.n	8003792 <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800377c:	4b3c      	ldr	r3, [pc, #240]	@ (8003870 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800377e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003782:	f023 0203 	bic.w	r2, r3, #3
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800378a:	4939      	ldr	r1, [pc, #228]	@ (8003870 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800378c:	4313      	orrs	r3, r2
 800378e:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800379a:	2b00      	cmp	r3, #0
 800379c:	d028      	beq.n	80037f0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800379e:	4b34      	ldr	r3, [pc, #208]	@ (8003870 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80037a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80037a4:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80037ac:	4930      	ldr	r1, [pc, #192]	@ (8003870 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80037ae:	4313      	orrs	r3, r2
 80037b0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80037b8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80037bc:	d106      	bne.n	80037cc <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80037be:	4b2c      	ldr	r3, [pc, #176]	@ (8003870 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80037c0:	68db      	ldr	r3, [r3, #12]
 80037c2:	4a2b      	ldr	r2, [pc, #172]	@ (8003870 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80037c4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80037c8:	60d3      	str	r3, [r2, #12]
 80037ca:	e011      	b.n	80037f0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80037d0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80037d4:	d10c      	bne.n	80037f0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	3304      	adds	r3, #4
 80037da:	2101      	movs	r1, #1
 80037dc:	4618      	mov	r0, r3
 80037de:	f001 f879 	bl	80048d4 <RCCEx_PLLSAI1_Config>
 80037e2:	4603      	mov	r3, r0
 80037e4:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80037e6:	7cfb      	ldrb	r3, [r7, #19]
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d001      	beq.n	80037f0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 80037ec:	7cfb      	ldrb	r3, [r7, #19]
 80037ee:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d04d      	beq.n	8003898 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003800:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003804:	d108      	bne.n	8003818 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8003806:	4b1a      	ldr	r3, [pc, #104]	@ (8003870 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003808:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800380c:	4a18      	ldr	r2, [pc, #96]	@ (8003870 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800380e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003812:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8003816:	e012      	b.n	800383e <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8003818:	4b15      	ldr	r3, [pc, #84]	@ (8003870 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800381a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800381e:	4a14      	ldr	r2, [pc, #80]	@ (8003870 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003820:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003824:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8003828:	4b11      	ldr	r3, [pc, #68]	@ (8003870 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800382a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800382e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003836:	490e      	ldr	r1, [pc, #56]	@ (8003870 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003838:	4313      	orrs	r3, r2
 800383a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003842:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003846:	d106      	bne.n	8003856 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003848:	4b09      	ldr	r3, [pc, #36]	@ (8003870 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800384a:	68db      	ldr	r3, [r3, #12]
 800384c:	4a08      	ldr	r2, [pc, #32]	@ (8003870 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800384e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003852:	60d3      	str	r3, [r2, #12]
 8003854:	e020      	b.n	8003898 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800385a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800385e:	d109      	bne.n	8003874 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003860:	4b03      	ldr	r3, [pc, #12]	@ (8003870 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003862:	68db      	ldr	r3, [r3, #12]
 8003864:	4a02      	ldr	r2, [pc, #8]	@ (8003870 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003866:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800386a:	60d3      	str	r3, [r2, #12]
 800386c:	e014      	b.n	8003898 <HAL_RCCEx_PeriphCLKConfig+0x524>
 800386e:	bf00      	nop
 8003870:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003878:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800387c:	d10c      	bne.n	8003898 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	3304      	adds	r3, #4
 8003882:	2101      	movs	r1, #1
 8003884:	4618      	mov	r0, r3
 8003886:	f001 f825 	bl	80048d4 <RCCEx_PLLSAI1_Config>
 800388a:	4603      	mov	r3, r0
 800388c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800388e:	7cfb      	ldrb	r3, [r7, #19]
 8003890:	2b00      	cmp	r3, #0
 8003892:	d001      	beq.n	8003898 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 8003894:	7cfb      	ldrb	r3, [r7, #19]
 8003896:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d028      	beq.n	80038f6 <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80038a4:	4b7a      	ldr	r3, [pc, #488]	@ (8003a90 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80038a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80038aa:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80038b2:	4977      	ldr	r1, [pc, #476]	@ (8003a90 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80038b4:	4313      	orrs	r3, r2
 80038b6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80038be:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80038c2:	d106      	bne.n	80038d2 <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80038c4:	4b72      	ldr	r3, [pc, #456]	@ (8003a90 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80038c6:	68db      	ldr	r3, [r3, #12]
 80038c8:	4a71      	ldr	r2, [pc, #452]	@ (8003a90 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80038ca:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80038ce:	60d3      	str	r3, [r2, #12]
 80038d0:	e011      	b.n	80038f6 <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80038d6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80038da:	d10c      	bne.n	80038f6 <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	3304      	adds	r3, #4
 80038e0:	2101      	movs	r1, #1
 80038e2:	4618      	mov	r0, r3
 80038e4:	f000 fff6 	bl	80048d4 <RCCEx_PLLSAI1_Config>
 80038e8:	4603      	mov	r3, r0
 80038ea:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80038ec:	7cfb      	ldrb	r3, [r7, #19]
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d001      	beq.n	80038f6 <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 80038f2:	7cfb      	ldrb	r3, [r7, #19]
 80038f4:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d01e      	beq.n	8003940 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003902:	4b63      	ldr	r3, [pc, #396]	@ (8003a90 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8003904:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003908:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003912:	495f      	ldr	r1, [pc, #380]	@ (8003a90 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8003914:	4313      	orrs	r3, r2
 8003916:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003920:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003924:	d10c      	bne.n	8003940 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	3304      	adds	r3, #4
 800392a:	2102      	movs	r1, #2
 800392c:	4618      	mov	r0, r3
 800392e:	f000 ffd1 	bl	80048d4 <RCCEx_PLLSAI1_Config>
 8003932:	4603      	mov	r3, r0
 8003934:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003936:	7cfb      	ldrb	r3, [r7, #19]
 8003938:	2b00      	cmp	r3, #0
 800393a:	d001      	beq.n	8003940 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 800393c:	7cfb      	ldrb	r3, [r7, #19]
 800393e:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003948:	2b00      	cmp	r3, #0
 800394a:	d00b      	beq.n	8003964 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800394c:	4b50      	ldr	r3, [pc, #320]	@ (8003a90 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800394e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003952:	f023 0204 	bic.w	r2, r3, #4
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800395c:	494c      	ldr	r1, [pc, #304]	@ (8003a90 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800395e:	4313      	orrs	r3, r2
 8003960:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800396c:	2b00      	cmp	r3, #0
 800396e:	d00b      	beq.n	8003988 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8003970:	4b47      	ldr	r3, [pc, #284]	@ (8003a90 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8003972:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003976:	f023 0218 	bic.w	r2, r3, #24
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003980:	4943      	ldr	r1, [pc, #268]	@ (8003a90 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8003982:	4313      	orrs	r3, r2
 8003984:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* DFSDM1_Filter0 */

#if defined(LTDC)

  /*-------------------------- LTDC clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003990:	2b00      	cmp	r3, #0
 8003992:	d035      	beq.n	8003a00 <HAL_RCCEx_PeriphCLKConfig+0x68c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LTDCCLKSOURCE(PeriphClkInit->LtdcClockSelection));

    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003994:	4b3e      	ldr	r3, [pc, #248]	@ (8003a90 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	4a3d      	ldr	r2, [pc, #244]	@ (8003a90 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800399a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800399e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80039a0:	f7fe fa3c 	bl	8001e1c <HAL_GetTick>
 80039a4:	60f8      	str	r0, [r7, #12]

    /* Wait till PLLSAI2 is ready */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80039a6:	e009      	b.n	80039bc <HAL_RCCEx_PeriphCLKConfig+0x648>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80039a8:	f7fe fa38 	bl	8001e1c <HAL_GetTick>
 80039ac:	4602      	mov	r2, r0
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	1ad3      	subs	r3, r2, r3
 80039b2:	2b02      	cmp	r3, #2
 80039b4:	d902      	bls.n	80039bc <HAL_RCCEx_PeriphCLKConfig+0x648>
      {
        ret = HAL_TIMEOUT;
 80039b6:	2303      	movs	r3, #3
 80039b8:	74fb      	strb	r3, [r7, #19]
        break;
 80039ba:	e005      	b.n	80039c8 <HAL_RCCEx_PeriphCLKConfig+0x654>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80039bc:	4b34      	ldr	r3, [pc, #208]	@ (8003a90 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d1ef      	bne.n	80039a8 <HAL_RCCEx_PeriphCLKConfig+0x634>
      }
    }

    if(ret == HAL_OK)
 80039c8:	7cfb      	ldrb	r3, [r7, #19]
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d113      	bne.n	80039f6 <HAL_RCCEx_PeriphCLKConfig+0x682>
    {
      /* Configure the LTDC clock source */
      __HAL_RCC_LTDC_CONFIG(PeriphClkInit->LtdcClockSelection);
 80039ce:	4b30      	ldr	r3, [pc, #192]	@ (8003a90 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80039d0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80039d4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80039de:	492c      	ldr	r1, [pc, #176]	@ (8003a90 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80039e0:	4313      	orrs	r3, r2
 80039e2:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	3320      	adds	r3, #32
 80039ea:	2102      	movs	r1, #2
 80039ec:	4618      	mov	r0, r3
 80039ee:	f001 f865 	bl	8004abc <RCCEx_PLLSAI2_Config>
 80039f2:	4603      	mov	r3, r0
 80039f4:	74fb      	strb	r3, [r7, #19]
    }

    if(ret != HAL_OK)
 80039f6:	7cfb      	ldrb	r3, [r7, #19]
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d001      	beq.n	8003a00 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* set overall return value */
      status = ret;
 80039fc:	7cfb      	ldrb	r3, [r7, #19]
 80039fe:	74bb      	strb	r3, [r7, #18]
#endif /* LTDC */

#if defined(DSI)

  /*-------------------------- DSI clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d01e      	beq.n	8003a4a <HAL_RCCEx_PeriphCLKConfig+0x6d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DSICLKSOURCE(PeriphClkInit->DsiClockSelection));

    /* Configure the DSI clock source */
    __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 8003a0c:	4b20      	ldr	r3, [pc, #128]	@ (8003a90 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8003a0e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003a12:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a1c:	491c      	ldr	r1, [pc, #112]	@ (8003a90 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8003a1e:	4313      	orrs	r3, r2
 8003a20:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->DsiClockSelection == RCC_DSICLKSOURCE_PLLSAI2)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a2a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003a2e:	d10c      	bne.n	8003a4a <HAL_RCCEx_PeriphCLKConfig+0x6d6>
    {
      /* PLLSAI2 input clock, parameters M, N & Q configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_Q_UPDATE);
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	3320      	adds	r3, #32
 8003a34:	2101      	movs	r1, #1
 8003a36:	4618      	mov	r0, r3
 8003a38:	f001 f840 	bl	8004abc <RCCEx_PLLSAI2_Config>
 8003a3c:	4603      	mov	r3, r0
 8003a3e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003a40:	7cfb      	ldrb	r3, [r7, #19]
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d001      	beq.n	8003a4a <HAL_RCCEx_PeriphCLKConfig+0x6d6>
      {
        /* set overall return value */
        status = ret;
 8003a46:	7cfb      	ldrb	r3, [r7, #19]
 8003a48:	74bb      	strb	r3, [r7, #18]
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d017      	beq.n	8003a86 <HAL_RCCEx_PeriphCLKConfig+0x712>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8003a56:	4b0e      	ldr	r3, [pc, #56]	@ (8003a90 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8003a58:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003a5c:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003a66:	490a      	ldr	r1, [pc, #40]	@ (8003a90 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8003a68:	4313      	orrs	r3, r2
 8003a6a:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003a74:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003a78:	d105      	bne.n	8003a86 <HAL_RCCEx_PeriphCLKConfig+0x712>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003a7a:	4b05      	ldr	r3, [pc, #20]	@ (8003a90 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8003a7c:	68db      	ldr	r3, [r3, #12]
 8003a7e:	4a04      	ldr	r2, [pc, #16]	@ (8003a90 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8003a80:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003a84:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003a86:	7cbb      	ldrb	r3, [r7, #18]
}
 8003a88:	4618      	mov	r0, r3
 8003a8a:	3718      	adds	r7, #24
 8003a8c:	46bd      	mov	sp, r7
 8003a8e:	bd80      	pop	{r7, pc}
 8003a90:	40021000 	.word	0x40021000

08003a94 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_OSPI  OctoSPI peripheral clock (only for devices with OctoSPI)
  @endif
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003a94:	b580      	push	{r7, lr}
 8003a96:	b088      	sub	sp, #32
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;
 8003a9c:	2300      	movs	r3, #0
 8003a9e:	61fb      	str	r3, [r7, #28]
#endif

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if(PeriphClk == RCC_PERIPHCLK_RTC)
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003aa6:	d13e      	bne.n	8003b26 <HAL_RCCEx_GetPeriphCLKFreq+0x92>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8003aa8:	4bb6      	ldr	r3, [pc, #728]	@ (8003d84 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8003aaa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003aae:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003ab2:	60fb      	str	r3, [r7, #12]

    switch(srcclk)
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003aba:	d028      	beq.n	8003b0e <HAL_RCCEx_GetPeriphCLKFreq+0x7a>
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003ac2:	f200 86f2 	bhi.w	80048aa <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003acc:	d005      	beq.n	8003ada <HAL_RCCEx_GetPeriphCLKFreq+0x46>
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003ad4:	d00e      	beq.n	8003af4 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
        frequency = HSE_VALUE / 32U;
      }
      break;
    default:
      /* No clock source, frequency default init at 0 */
      break;
 8003ad6:	f000 bee8 	b.w	80048aa <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8003ada:	4baa      	ldr	r3, [pc, #680]	@ (8003d84 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8003adc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ae0:	f003 0302 	and.w	r3, r3, #2
 8003ae4:	2b02      	cmp	r3, #2
 8003ae6:	f040 86e2 	bne.w	80048ae <HAL_RCCEx_GetPeriphCLKFreq+0xe1a>
        frequency = LSE_VALUE;
 8003aea:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003aee:	61fb      	str	r3, [r7, #28]
      break;
 8003af0:	f000 bedd 	b.w	80048ae <HAL_RCCEx_GetPeriphCLKFreq+0xe1a>
      if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8003af4:	4ba3      	ldr	r3, [pc, #652]	@ (8003d84 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8003af6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003afa:	f003 0302 	and.w	r3, r3, #2
 8003afe:	2b02      	cmp	r3, #2
 8003b00:	f040 86d7 	bne.w	80048b2 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
          frequency = LSI_VALUE;
 8003b04:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8003b08:	61fb      	str	r3, [r7, #28]
      break;
 8003b0a:	f000 bed2 	b.w	80048b2 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8003b0e:	4b9d      	ldr	r3, [pc, #628]	@ (8003d84 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b16:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003b1a:	f040 86cc 	bne.w	80048b6 <HAL_RCCEx_GetPeriphCLKFreq+0xe22>
        frequency = HSE_VALUE / 32U;
 8003b1e:	4b9a      	ldr	r3, [pc, #616]	@ (8003d88 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8003b20:	61fb      	str	r3, [r7, #28]
      break;
 8003b22:	f000 bec8 	b.w	80048b6 <HAL_RCCEx_GetPeriphCLKFreq+0xe22>
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003b26:	4b97      	ldr	r3, [pc, #604]	@ (8003d84 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8003b28:	68db      	ldr	r3, [r3, #12]
 8003b2a:	f003 0303 	and.w	r3, r3, #3
 8003b2e:	613b      	str	r3, [r7, #16]

    /* Compute PLL clock input */
    switch(pll_oscsource)
 8003b30:	693b      	ldr	r3, [r7, #16]
 8003b32:	2b03      	cmp	r3, #3
 8003b34:	d036      	beq.n	8003ba4 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 8003b36:	693b      	ldr	r3, [r7, #16]
 8003b38:	2b03      	cmp	r3, #3
 8003b3a:	d840      	bhi.n	8003bbe <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
 8003b3c:	693b      	ldr	r3, [r7, #16]
 8003b3e:	2b01      	cmp	r3, #1
 8003b40:	d003      	beq.n	8003b4a <HAL_RCCEx_GetPeriphCLKFreq+0xb6>
 8003b42:	693b      	ldr	r3, [r7, #16]
 8003b44:	2b02      	cmp	r3, #2
 8003b46:	d020      	beq.n	8003b8a <HAL_RCCEx_GetPeriphCLKFreq+0xf6>
 8003b48:	e039      	b.n	8003bbe <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
    {
    case RCC_PLLSOURCE_MSI:   /* MSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8003b4a:	4b8e      	ldr	r3, [pc, #568]	@ (8003d84 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f003 0302 	and.w	r3, r3, #2
 8003b52:	2b02      	cmp	r3, #2
 8003b54:	d116      	bne.n	8003b84 <HAL_RCCEx_GetPeriphCLKFreq+0xf0>
      {
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8003b56:	4b8b      	ldr	r3, [pc, #556]	@ (8003d84 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f003 0308 	and.w	r3, r3, #8
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d005      	beq.n	8003b6e <HAL_RCCEx_GetPeriphCLKFreq+0xda>
 8003b62:	4b88      	ldr	r3, [pc, #544]	@ (8003d84 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	091b      	lsrs	r3, r3, #4
 8003b68:	f003 030f 	and.w	r3, r3, #15
 8003b6c:	e005      	b.n	8003b7a <HAL_RCCEx_GetPeriphCLKFreq+0xe6>
 8003b6e:	4b85      	ldr	r3, [pc, #532]	@ (8003d84 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8003b70:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003b74:	0a1b      	lsrs	r3, r3, #8
 8003b76:	f003 030f 	and.w	r3, r3, #15
 8003b7a:	4a84      	ldr	r2, [pc, #528]	@ (8003d8c <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8003b7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b80:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8003b82:	e01f      	b.n	8003bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 8003b84:	2300      	movs	r3, #0
 8003b86:	61bb      	str	r3, [r7, #24]
      break;
 8003b88:	e01c      	b.n	8003bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSI:   /* HSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8003b8a:	4b7e      	ldr	r3, [pc, #504]	@ (8003d84 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003b92:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003b96:	d102      	bne.n	8003b9e <HAL_RCCEx_GetPeriphCLKFreq+0x10a>
      {
        pllvco = HSI_VALUE;
 8003b98:	4b7d      	ldr	r3, [pc, #500]	@ (8003d90 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 8003b9a:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8003b9c:	e012      	b.n	8003bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 8003b9e:	2300      	movs	r3, #0
 8003ba0:	61bb      	str	r3, [r7, #24]
      break;
 8003ba2:	e00f      	b.n	8003bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSE:   /* HSE ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8003ba4:	4b77      	ldr	r3, [pc, #476]	@ (8003d84 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003bac:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003bb0:	d102      	bne.n	8003bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
      {
        pllvco = HSE_VALUE;
 8003bb2:	4b77      	ldr	r3, [pc, #476]	@ (8003d90 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 8003bb4:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8003bb6:	e005      	b.n	8003bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 8003bb8:	2300      	movs	r3, #0
 8003bba:	61bb      	str	r3, [r7, #24]
      break;
 8003bbc:	e002      	b.n	8003bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    default:
      /* No source */
      pllvco = 0U;
 8003bbe:	2300      	movs	r3, #0
 8003bc0:	61bb      	str	r3, [r7, #24]
      break;
 8003bc2:	bf00      	nop
    }

    switch(PeriphClk)
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003bca:	f000 8604 	beq.w	80047d6 <HAL_RCCEx_GetPeriphCLKFreq+0xd42>
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003bd4:	f200 8671 	bhi.w	80048ba <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003bde:	f000 8467 	beq.w	80044b0 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003be8:	f200 8667 	bhi.w	80048ba <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003bf2:	f000 852f 	beq.w	8004654 <HAL_RCCEx_GetPeriphCLKFreq+0xbc0>
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003bfc:	f200 865d 	bhi.w	80048ba <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003c06:	f000 8185 	beq.w	8003f14 <HAL_RCCEx_GetPeriphCLKFreq+0x480>
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003c10:	f200 8653 	bhi.w	80048ba <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003c1a:	f000 80cb 	beq.w	8003db4 <HAL_RCCEx_GetPeriphCLKFreq+0x320>
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003c24:	f200 8649 	bhi.w	80048ba <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003c2e:	f000 842e 	beq.w	800448e <HAL_RCCEx_GetPeriphCLKFreq+0x9fa>
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003c38:	f200 863f 	bhi.w	80048ba <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003c42:	f000 83e2 	beq.w	800440a <HAL_RCCEx_GetPeriphCLKFreq+0x976>
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003c4c:	f200 8635 	bhi.w	80048ba <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003c56:	f000 80ad 	beq.w	8003db4 <HAL_RCCEx_GetPeriphCLKFreq+0x320>
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003c60:	f200 862b 	bhi.w	80048ba <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003c6a:	f000 809b 	beq.w	8003da4 <HAL_RCCEx_GetPeriphCLKFreq+0x310>
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003c74:	f200 8621 	bhi.w	80048ba <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003c7e:	f000 8089 	beq.w	8003d94 <HAL_RCCEx_GetPeriphCLKFreq+0x300>
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003c88:	f200 8617 	bhi.w	80048ba <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003c92:	f000 8552 	beq.w	800473a <HAL_RCCEx_GetPeriphCLKFreq+0xca6>
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003c9c:	f200 860d 	bhi.w	80048ba <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003ca6:	f000 84fe 	beq.w	80046a6 <HAL_RCCEx_GetPeriphCLKFreq+0xc12>
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003cb0:	f200 8603 	bhi.w	80048ba <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003cba:	f000 849f 	beq.w	80045fc <HAL_RCCEx_GetPeriphCLKFreq+0xb68>
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003cc4:	f200 85f9 	bhi.w	80048ba <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	2b80      	cmp	r3, #128	@ 0x80
 8003ccc:	f000 846a 	beq.w	80045a4 <HAL_RCCEx_GetPeriphCLKFreq+0xb10>
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	2b80      	cmp	r3, #128	@ 0x80
 8003cd4:	f200 85f1 	bhi.w	80048ba <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	2b20      	cmp	r3, #32
 8003cdc:	d84c      	bhi.n	8003d78 <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	f000 85ea 	beq.w	80048ba <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	3b01      	subs	r3, #1
 8003cea:	2b1f      	cmp	r3, #31
 8003cec:	f200 85e5 	bhi.w	80048ba <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8003cf0:	a201      	add	r2, pc, #4	@ (adr r2, 8003cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x264>)
 8003cf2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cf6:	bf00      	nop
 8003cf8:	08004109 	.word	0x08004109
 8003cfc:	08004177 	.word	0x08004177
 8003d00:	080048bb 	.word	0x080048bb
 8003d04:	0800420b 	.word	0x0800420b
 8003d08:	080048bb 	.word	0x080048bb
 8003d0c:	080048bb 	.word	0x080048bb
 8003d10:	080048bb 	.word	0x080048bb
 8003d14:	08004283 	.word	0x08004283
 8003d18:	080048bb 	.word	0x080048bb
 8003d1c:	080048bb 	.word	0x080048bb
 8003d20:	080048bb 	.word	0x080048bb
 8003d24:	080048bb 	.word	0x080048bb
 8003d28:	080048bb 	.word	0x080048bb
 8003d2c:	080048bb 	.word	0x080048bb
 8003d30:	080048bb 	.word	0x080048bb
 8003d34:	08004307 	.word	0x08004307
 8003d38:	080048bb 	.word	0x080048bb
 8003d3c:	080048bb 	.word	0x080048bb
 8003d40:	080048bb 	.word	0x080048bb
 8003d44:	080048bb 	.word	0x080048bb
 8003d48:	080048bb 	.word	0x080048bb
 8003d4c:	080048bb 	.word	0x080048bb
 8003d50:	080048bb 	.word	0x080048bb
 8003d54:	080048bb 	.word	0x080048bb
 8003d58:	080048bb 	.word	0x080048bb
 8003d5c:	080048bb 	.word	0x080048bb
 8003d60:	080048bb 	.word	0x080048bb
 8003d64:	080048bb 	.word	0x080048bb
 8003d68:	080048bb 	.word	0x080048bb
 8003d6c:	080048bb 	.word	0x080048bb
 8003d70:	080048bb 	.word	0x080048bb
 8003d74:	08004389 	.word	0x08004389
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	2b40      	cmp	r3, #64	@ 0x40
 8003d7c:	f000 83e6 	beq.w	800454c <HAL_RCCEx_GetPeriphCLKFreq+0xab8>
      }

#endif /* OCTOSPI1 || OCTOSPI2 */

    default:
      break;
 8003d80:	f000 bd9b 	b.w	80048ba <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8003d84:	40021000 	.word	0x40021000
 8003d88:	0007a120 	.word	0x0007a120
 8003d8c:	0800db58 	.word	0x0800db58
 8003d90:	00f42400 	.word	0x00f42400
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 8003d94:	69b9      	ldr	r1, [r7, #24]
 8003d96:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8003d9a:	f000 ff83 	bl	8004ca4 <RCCEx_GetSAIxPeriphCLKFreq>
 8003d9e:	61f8      	str	r0, [r7, #28]
      break;
 8003da0:	f000 bd8e 	b.w	80048c0 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI2, pllvco);
 8003da4:	69b9      	ldr	r1, [r7, #24]
 8003da6:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8003daa:	f000 ff7b 	bl	8004ca4 <RCCEx_GetSAIxPeriphCLKFreq>
 8003dae:	61f8      	str	r0, [r7, #28]
      break;
 8003db0:	f000 bd86 	b.w	80048c0 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 8003db4:	4b9a      	ldr	r3, [pc, #616]	@ (8004020 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8003db6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003dba:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 8003dbe:	60fb      	str	r3, [r7, #12]
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8003dc6:	d015      	beq.n	8003df4 <HAL_RCCEx_GetPeriphCLKFreq+0x360>
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8003dce:	f200 8092 	bhi.w	8003ef6 <HAL_RCCEx_GetPeriphCLKFreq+0x462>
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003dd8:	d029      	beq.n	8003e2e <HAL_RCCEx_GetPeriphCLKFreq+0x39a>
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003de0:	f200 8089 	bhi.w	8003ef6 <HAL_RCCEx_GetPeriphCLKFreq+0x462>
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d07b      	beq.n	8003ee2 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003df0:	d04a      	beq.n	8003e88 <HAL_RCCEx_GetPeriphCLKFreq+0x3f4>
          break;
 8003df2:	e080      	b.n	8003ef6 <HAL_RCCEx_GetPeriphCLKFreq+0x462>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8003df4:	4b8a      	ldr	r3, [pc, #552]	@ (8004020 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f003 0302 	and.w	r3, r3, #2
 8003dfc:	2b02      	cmp	r3, #2
 8003dfe:	d17d      	bne.n	8003efc <HAL_RCCEx_GetPeriphCLKFreq+0x468>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8003e00:	4b87      	ldr	r3, [pc, #540]	@ (8004020 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	f003 0308 	and.w	r3, r3, #8
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d005      	beq.n	8003e18 <HAL_RCCEx_GetPeriphCLKFreq+0x384>
 8003e0c:	4b84      	ldr	r3, [pc, #528]	@ (8004020 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	091b      	lsrs	r3, r3, #4
 8003e12:	f003 030f 	and.w	r3, r3, #15
 8003e16:	e005      	b.n	8003e24 <HAL_RCCEx_GetPeriphCLKFreq+0x390>
 8003e18:	4b81      	ldr	r3, [pc, #516]	@ (8004020 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8003e1a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003e1e:	0a1b      	lsrs	r3, r3, #8
 8003e20:	f003 030f 	and.w	r3, r3, #15
 8003e24:	4a7f      	ldr	r2, [pc, #508]	@ (8004024 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8003e26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e2a:	61fb      	str	r3, [r7, #28]
          break;
 8003e2c:	e066      	b.n	8003efc <HAL_RCCEx_GetPeriphCLKFreq+0x468>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8003e2e:	4b7c      	ldr	r3, [pc, #496]	@ (8004020 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e36:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003e3a:	d162      	bne.n	8003f02 <HAL_RCCEx_GetPeriphCLKFreq+0x46e>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 8003e3c:	4b78      	ldr	r3, [pc, #480]	@ (8004020 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8003e3e:	68db      	ldr	r3, [r3, #12]
 8003e40:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003e44:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003e48:	d15b      	bne.n	8003f02 <HAL_RCCEx_GetPeriphCLKFreq+0x46e>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8003e4a:	4b75      	ldr	r3, [pc, #468]	@ (8004020 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8003e4c:	68db      	ldr	r3, [r3, #12]
 8003e4e:	0a1b      	lsrs	r3, r3, #8
 8003e50:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003e54:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8003e56:	69bb      	ldr	r3, [r7, #24]
 8003e58:	68ba      	ldr	r2, [r7, #8]
 8003e5a:	fb03 f202 	mul.w	r2, r3, r2
 8003e5e:	4b70      	ldr	r3, [pc, #448]	@ (8004020 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8003e60:	68db      	ldr	r3, [r3, #12]
 8003e62:	091b      	lsrs	r3, r3, #4
 8003e64:	f003 030f 	and.w	r3, r3, #15
 8003e68:	3301      	adds	r3, #1
 8003e6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e6e:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 8003e70:	4b6b      	ldr	r3, [pc, #428]	@ (8004020 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8003e72:	68db      	ldr	r3, [r3, #12]
 8003e74:	0d5b      	lsrs	r3, r3, #21
 8003e76:	f003 0303 	and.w	r3, r3, #3
 8003e7a:	3301      	adds	r3, #1
 8003e7c:	005b      	lsls	r3, r3, #1
 8003e7e:	69ba      	ldr	r2, [r7, #24]
 8003e80:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e84:	61fb      	str	r3, [r7, #28]
          break;
 8003e86:	e03c      	b.n	8003f02 <HAL_RCCEx_GetPeriphCLKFreq+0x46e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 8003e88:	4b65      	ldr	r3, [pc, #404]	@ (8004020 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003e90:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003e94:	d138      	bne.n	8003f08 <HAL_RCCEx_GetPeriphCLKFreq+0x474>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 8003e96:	4b62      	ldr	r3, [pc, #392]	@ (8004020 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8003e98:	691b      	ldr	r3, [r3, #16]
 8003e9a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003e9e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003ea2:	d131      	bne.n	8003f08 <HAL_RCCEx_GetPeriphCLKFreq+0x474>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8003ea4:	4b5e      	ldr	r3, [pc, #376]	@ (8004020 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8003ea6:	691b      	ldr	r3, [r3, #16]
 8003ea8:	0a1b      	lsrs	r3, r3, #8
 8003eaa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003eae:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 8003eb0:	69bb      	ldr	r3, [r7, #24]
 8003eb2:	68ba      	ldr	r2, [r7, #8]
 8003eb4:	fb03 f202 	mul.w	r2, r3, r2
 8003eb8:	4b59      	ldr	r3, [pc, #356]	@ (8004020 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8003eba:	691b      	ldr	r3, [r3, #16]
 8003ebc:	091b      	lsrs	r3, r3, #4
 8003ebe:	f003 030f 	and.w	r3, r3, #15
 8003ec2:	3301      	adds	r3, #1
 8003ec4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ec8:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 8003eca:	4b55      	ldr	r3, [pc, #340]	@ (8004020 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8003ecc:	691b      	ldr	r3, [r3, #16]
 8003ece:	0d5b      	lsrs	r3, r3, #21
 8003ed0:	f003 0303 	and.w	r3, r3, #3
 8003ed4:	3301      	adds	r3, #1
 8003ed6:	005b      	lsls	r3, r3, #1
 8003ed8:	69ba      	ldr	r2, [r7, #24]
 8003eda:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ede:	61fb      	str	r3, [r7, #28]
          break;
 8003ee0:	e012      	b.n	8003f08 <HAL_RCCEx_GetPeriphCLKFreq+0x474>
          if(HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)) /* HSI48 ? */
 8003ee2:	4b4f      	ldr	r3, [pc, #316]	@ (8004020 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8003ee4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003ee8:	f003 0302 	and.w	r3, r3, #2
 8003eec:	2b02      	cmp	r3, #2
 8003eee:	d10e      	bne.n	8003f0e <HAL_RCCEx_GetPeriphCLKFreq+0x47a>
            frequency = HSI48_VALUE;
 8003ef0:	4b4d      	ldr	r3, [pc, #308]	@ (8004028 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8003ef2:	61fb      	str	r3, [r7, #28]
          break;
 8003ef4:	e00b      	b.n	8003f0e <HAL_RCCEx_GetPeriphCLKFreq+0x47a>
          break;
 8003ef6:	bf00      	nop
 8003ef8:	f000 bce2 	b.w	80048c0 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8003efc:	bf00      	nop
 8003efe:	f000 bcdf 	b.w	80048c0 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8003f02:	bf00      	nop
 8003f04:	f000 bcdc 	b.w	80048c0 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8003f08:	bf00      	nop
 8003f0a:	f000 bcd9 	b.w	80048c0 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8003f0e:	bf00      	nop
        break;
 8003f10:	f000 bcd6 	b.w	80048c0 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
      if(HAL_IS_BIT_SET(RCC->CCIPR2, RCC_CCIPR2_SDMMCSEL))  /* PLL "P" ? */
 8003f14:	4b42      	ldr	r3, [pc, #264]	@ (8004020 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8003f16:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003f1a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003f1e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003f22:	d13d      	bne.n	8003fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>
        if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8003f24:	4b3e      	ldr	r3, [pc, #248]	@ (8004020 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f2c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003f30:	f040 84c5 	bne.w	80048be <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
          if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLPEN))
 8003f34:	4b3a      	ldr	r3, [pc, #232]	@ (8004020 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8003f36:	68db      	ldr	r3, [r3, #12]
 8003f38:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003f3c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003f40:	f040 84bd 	bne.w	80048be <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
            plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8003f44:	4b36      	ldr	r3, [pc, #216]	@ (8004020 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8003f46:	68db      	ldr	r3, [r3, #12]
 8003f48:	0a1b      	lsrs	r3, r3, #8
 8003f4a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003f4e:	60bb      	str	r3, [r7, #8]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8003f50:	69bb      	ldr	r3, [r7, #24]
 8003f52:	68ba      	ldr	r2, [r7, #8]
 8003f54:	fb03 f202 	mul.w	r2, r3, r2
 8003f58:	4b31      	ldr	r3, [pc, #196]	@ (8004020 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8003f5a:	68db      	ldr	r3, [r3, #12]
 8003f5c:	091b      	lsrs	r3, r3, #4
 8003f5e:	f003 030f 	and.w	r3, r3, #15
 8003f62:	3301      	adds	r3, #1
 8003f64:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f68:	61bb      	str	r3, [r7, #24]
            pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
 8003f6a:	4b2d      	ldr	r3, [pc, #180]	@ (8004020 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8003f6c:	68db      	ldr	r3, [r3, #12]
 8003f6e:	0edb      	lsrs	r3, r3, #27
 8003f70:	f003 031f 	and.w	r3, r3, #31
 8003f74:	617b      	str	r3, [r7, #20]
            if(pllp == 0U)
 8003f76:	697b      	ldr	r3, [r7, #20]
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d10a      	bne.n	8003f92 <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
              if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 8003f7c:	4b28      	ldr	r3, [pc, #160]	@ (8004020 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8003f7e:	68db      	ldr	r3, [r3, #12]
 8003f80:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d002      	beq.n	8003f8e <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
                pllp = 17U;
 8003f88:	2311      	movs	r3, #17
 8003f8a:	617b      	str	r3, [r7, #20]
 8003f8c:	e001      	b.n	8003f92 <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
                pllp = 7U;
 8003f8e:	2307      	movs	r3, #7
 8003f90:	617b      	str	r3, [r7, #20]
            frequency = (pllvco / pllp);
 8003f92:	69ba      	ldr	r2, [r7, #24]
 8003f94:	697b      	ldr	r3, [r7, #20]
 8003f96:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f9a:	61fb      	str	r3, [r7, #28]
      break;
 8003f9c:	f000 bc8f 	b.w	80048be <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 8003fa0:	4b1f      	ldr	r3, [pc, #124]	@ (8004020 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8003fa2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003fa6:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 8003faa:	60fb      	str	r3, [r7, #12]
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8003fb2:	d016      	beq.n	8003fe2 <HAL_RCCEx_GetPeriphCLKFreq+0x54e>
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8003fba:	f200 809b 	bhi.w	80040f4 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003fc4:	d032      	beq.n	800402c <HAL_RCCEx_GetPeriphCLKFreq+0x598>
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003fcc:	f200 8092 	bhi.w	80040f4 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	f000 8084 	beq.w	80040e0 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003fde:	d052      	beq.n	8004086 <HAL_RCCEx_GetPeriphCLKFreq+0x5f2>
          break;
 8003fe0:	e088      	b.n	80040f4 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8003fe2:	4b0f      	ldr	r3, [pc, #60]	@ (8004020 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f003 0302 	and.w	r3, r3, #2
 8003fea:	2b02      	cmp	r3, #2
 8003fec:	f040 8084 	bne.w	80040f8 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8003ff0:	4b0b      	ldr	r3, [pc, #44]	@ (8004020 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f003 0308 	and.w	r3, r3, #8
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d005      	beq.n	8004008 <HAL_RCCEx_GetPeriphCLKFreq+0x574>
 8003ffc:	4b08      	ldr	r3, [pc, #32]	@ (8004020 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	091b      	lsrs	r3, r3, #4
 8004002:	f003 030f 	and.w	r3, r3, #15
 8004006:	e005      	b.n	8004014 <HAL_RCCEx_GetPeriphCLKFreq+0x580>
 8004008:	4b05      	ldr	r3, [pc, #20]	@ (8004020 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800400a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800400e:	0a1b      	lsrs	r3, r3, #8
 8004010:	f003 030f 	and.w	r3, r3, #15
 8004014:	4a03      	ldr	r2, [pc, #12]	@ (8004024 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8004016:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800401a:	61fb      	str	r3, [r7, #28]
          break;
 800401c:	e06c      	b.n	80040f8 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
 800401e:	bf00      	nop
 8004020:	40021000 	.word	0x40021000
 8004024:	0800db58 	.word	0x0800db58
 8004028:	02dc6c00 	.word	0x02dc6c00
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 800402c:	4ba5      	ldr	r3, [pc, #660]	@ (80042c4 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004034:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004038:	d160      	bne.n	80040fc <HAL_RCCEx_GetPeriphCLKFreq+0x668>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 800403a:	4ba2      	ldr	r3, [pc, #648]	@ (80042c4 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800403c:	68db      	ldr	r3, [r3, #12]
 800403e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004042:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004046:	d159      	bne.n	80040fc <HAL_RCCEx_GetPeriphCLKFreq+0x668>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8004048:	4b9e      	ldr	r3, [pc, #632]	@ (80042c4 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800404a:	68db      	ldr	r3, [r3, #12]
 800404c:	0a1b      	lsrs	r3, r3, #8
 800404e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004052:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8004054:	69bb      	ldr	r3, [r7, #24]
 8004056:	68ba      	ldr	r2, [r7, #8]
 8004058:	fb03 f202 	mul.w	r2, r3, r2
 800405c:	4b99      	ldr	r3, [pc, #612]	@ (80042c4 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800405e:	68db      	ldr	r3, [r3, #12]
 8004060:	091b      	lsrs	r3, r3, #4
 8004062:	f003 030f 	and.w	r3, r3, #15
 8004066:	3301      	adds	r3, #1
 8004068:	fbb2 f3f3 	udiv	r3, r2, r3
 800406c:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 800406e:	4b95      	ldr	r3, [pc, #596]	@ (80042c4 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8004070:	68db      	ldr	r3, [r3, #12]
 8004072:	0d5b      	lsrs	r3, r3, #21
 8004074:	f003 0303 	and.w	r3, r3, #3
 8004078:	3301      	adds	r3, #1
 800407a:	005b      	lsls	r3, r3, #1
 800407c:	69ba      	ldr	r2, [r7, #24]
 800407e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004082:	61fb      	str	r3, [r7, #28]
          break;
 8004084:	e03a      	b.n	80040fc <HAL_RCCEx_GetPeriphCLKFreq+0x668>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 8004086:	4b8f      	ldr	r3, [pc, #572]	@ (80042c4 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800408e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004092:	d135      	bne.n	8004100 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 8004094:	4b8b      	ldr	r3, [pc, #556]	@ (80042c4 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8004096:	691b      	ldr	r3, [r3, #16]
 8004098:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800409c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80040a0:	d12e      	bne.n	8004100 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 80040a2:	4b88      	ldr	r3, [pc, #544]	@ (80042c4 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80040a4:	691b      	ldr	r3, [r3, #16]
 80040a6:	0a1b      	lsrs	r3, r3, #8
 80040a8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80040ac:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 80040ae:	69bb      	ldr	r3, [r7, #24]
 80040b0:	68ba      	ldr	r2, [r7, #8]
 80040b2:	fb03 f202 	mul.w	r2, r3, r2
 80040b6:	4b83      	ldr	r3, [pc, #524]	@ (80042c4 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80040b8:	691b      	ldr	r3, [r3, #16]
 80040ba:	091b      	lsrs	r3, r3, #4
 80040bc:	f003 030f 	and.w	r3, r3, #15
 80040c0:	3301      	adds	r3, #1
 80040c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80040c6:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 80040c8:	4b7e      	ldr	r3, [pc, #504]	@ (80042c4 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80040ca:	691b      	ldr	r3, [r3, #16]
 80040cc:	0d5b      	lsrs	r3, r3, #21
 80040ce:	f003 0303 	and.w	r3, r3, #3
 80040d2:	3301      	adds	r3, #1
 80040d4:	005b      	lsls	r3, r3, #1
 80040d6:	69ba      	ldr	r2, [r7, #24]
 80040d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80040dc:	61fb      	str	r3, [r7, #28]
          break;
 80040de:	e00f      	b.n	8004100 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
          if(HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)) /* HSI48 ? */
 80040e0:	4b78      	ldr	r3, [pc, #480]	@ (80042c4 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80040e2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80040e6:	f003 0302 	and.w	r3, r3, #2
 80040ea:	2b02      	cmp	r3, #2
 80040ec:	d10a      	bne.n	8004104 <HAL_RCCEx_GetPeriphCLKFreq+0x670>
            frequency = HSI48_VALUE;
 80040ee:	4b76      	ldr	r3, [pc, #472]	@ (80042c8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80040f0:	61fb      	str	r3, [r7, #28]
          break;
 80040f2:	e007      	b.n	8004104 <HAL_RCCEx_GetPeriphCLKFreq+0x670>
          break;
 80040f4:	bf00      	nop
 80040f6:	e3e2      	b.n	80048be <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
          break;
 80040f8:	bf00      	nop
 80040fa:	e3e0      	b.n	80048be <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
          break;
 80040fc:	bf00      	nop
 80040fe:	e3de      	b.n	80048be <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
          break;
 8004100:	bf00      	nop
 8004102:	e3dc      	b.n	80048be <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
          break;
 8004104:	bf00      	nop
      break;
 8004106:	e3da      	b.n	80048be <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8004108:	4b6e      	ldr	r3, [pc, #440]	@ (80042c4 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800410a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800410e:	f003 0303 	and.w	r3, r3, #3
 8004112:	60fb      	str	r3, [r7, #12]
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	2b03      	cmp	r3, #3
 8004118:	d827      	bhi.n	800416a <HAL_RCCEx_GetPeriphCLKFreq+0x6d6>
 800411a:	a201      	add	r2, pc, #4	@ (adr r2, 8004120 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>)
 800411c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004120:	08004131 	.word	0x08004131
 8004124:	08004139 	.word	0x08004139
 8004128:	08004141 	.word	0x08004141
 800412c:	08004155 	.word	0x08004155
          frequency = HAL_RCC_GetPCLK2Freq();
 8004130:	f7ff f84c 	bl	80031cc <HAL_RCC_GetPCLK2Freq>
 8004134:	61f8      	str	r0, [r7, #28]
          break;
 8004136:	e01d      	b.n	8004174 <HAL_RCCEx_GetPeriphCLKFreq+0x6e0>
          frequency = HAL_RCC_GetSysClockFreq();
 8004138:	f7fe ff9c 	bl	8003074 <HAL_RCC_GetSysClockFreq>
 800413c:	61f8      	str	r0, [r7, #28]
          break;
 800413e:	e019      	b.n	8004174 <HAL_RCCEx_GetPeriphCLKFreq+0x6e0>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004140:	4b60      	ldr	r3, [pc, #384]	@ (80042c4 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004148:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800414c:	d10f      	bne.n	800416e <HAL_RCCEx_GetPeriphCLKFreq+0x6da>
            frequency = HSI_VALUE;
 800414e:	4b5f      	ldr	r3, [pc, #380]	@ (80042cc <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 8004150:	61fb      	str	r3, [r7, #28]
          break;
 8004152:	e00c      	b.n	800416e <HAL_RCCEx_GetPeriphCLKFreq+0x6da>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8004154:	4b5b      	ldr	r3, [pc, #364]	@ (80042c4 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8004156:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800415a:	f003 0302 	and.w	r3, r3, #2
 800415e:	2b02      	cmp	r3, #2
 8004160:	d107      	bne.n	8004172 <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
            frequency = LSE_VALUE;
 8004162:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004166:	61fb      	str	r3, [r7, #28]
          break;
 8004168:	e003      	b.n	8004172 <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
          break;
 800416a:	bf00      	nop
 800416c:	e3a8      	b.n	80048c0 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 800416e:	bf00      	nop
 8004170:	e3a6      	b.n	80048c0 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8004172:	bf00      	nop
        break;
 8004174:	e3a4      	b.n	80048c0 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8004176:	4b53      	ldr	r3, [pc, #332]	@ (80042c4 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8004178:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800417c:	f003 030c 	and.w	r3, r3, #12
 8004180:	60fb      	str	r3, [r7, #12]
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	2b0c      	cmp	r3, #12
 8004186:	d83a      	bhi.n	80041fe <HAL_RCCEx_GetPeriphCLKFreq+0x76a>
 8004188:	a201      	add	r2, pc, #4	@ (adr r2, 8004190 <HAL_RCCEx_GetPeriphCLKFreq+0x6fc>)
 800418a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800418e:	bf00      	nop
 8004190:	080041c5 	.word	0x080041c5
 8004194:	080041ff 	.word	0x080041ff
 8004198:	080041ff 	.word	0x080041ff
 800419c:	080041ff 	.word	0x080041ff
 80041a0:	080041cd 	.word	0x080041cd
 80041a4:	080041ff 	.word	0x080041ff
 80041a8:	080041ff 	.word	0x080041ff
 80041ac:	080041ff 	.word	0x080041ff
 80041b0:	080041d5 	.word	0x080041d5
 80041b4:	080041ff 	.word	0x080041ff
 80041b8:	080041ff 	.word	0x080041ff
 80041bc:	080041ff 	.word	0x080041ff
 80041c0:	080041e9 	.word	0x080041e9
          frequency = HAL_RCC_GetPCLK1Freq();
 80041c4:	f7fe ffec 	bl	80031a0 <HAL_RCC_GetPCLK1Freq>
 80041c8:	61f8      	str	r0, [r7, #28]
          break;
 80041ca:	e01d      	b.n	8004208 <HAL_RCCEx_GetPeriphCLKFreq+0x774>
          frequency = HAL_RCC_GetSysClockFreq();
 80041cc:	f7fe ff52 	bl	8003074 <HAL_RCC_GetSysClockFreq>
 80041d0:	61f8      	str	r0, [r7, #28]
          break;
 80041d2:	e019      	b.n	8004208 <HAL_RCCEx_GetPeriphCLKFreq+0x774>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80041d4:	4b3b      	ldr	r3, [pc, #236]	@ (80042c4 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80041dc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80041e0:	d10f      	bne.n	8004202 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
            frequency = HSI_VALUE;
 80041e2:	4b3a      	ldr	r3, [pc, #232]	@ (80042cc <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 80041e4:	61fb      	str	r3, [r7, #28]
          break;
 80041e6:	e00c      	b.n	8004202 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80041e8:	4b36      	ldr	r3, [pc, #216]	@ (80042c4 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80041ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80041ee:	f003 0302 	and.w	r3, r3, #2
 80041f2:	2b02      	cmp	r3, #2
 80041f4:	d107      	bne.n	8004206 <HAL_RCCEx_GetPeriphCLKFreq+0x772>
            frequency = LSE_VALUE;
 80041f6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80041fa:	61fb      	str	r3, [r7, #28]
          break;
 80041fc:	e003      	b.n	8004206 <HAL_RCCEx_GetPeriphCLKFreq+0x772>
          break;
 80041fe:	bf00      	nop
 8004200:	e35e      	b.n	80048c0 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8004202:	bf00      	nop
 8004204:	e35c      	b.n	80048c0 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8004206:	bf00      	nop
        break;
 8004208:	e35a      	b.n	80048c0 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 800420a:	4b2e      	ldr	r3, [pc, #184]	@ (80042c4 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800420c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004210:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8004214:	60fb      	str	r3, [r7, #12]
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	2b30      	cmp	r3, #48	@ 0x30
 800421a:	d021      	beq.n	8004260 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	2b30      	cmp	r3, #48	@ 0x30
 8004220:	d829      	bhi.n	8004276 <HAL_RCCEx_GetPeriphCLKFreq+0x7e2>
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	2b20      	cmp	r3, #32
 8004226:	d011      	beq.n	800424c <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	2b20      	cmp	r3, #32
 800422c:	d823      	bhi.n	8004276 <HAL_RCCEx_GetPeriphCLKFreq+0x7e2>
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	2b00      	cmp	r3, #0
 8004232:	d003      	beq.n	800423c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	2b10      	cmp	r3, #16
 8004238:	d004      	beq.n	8004244 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>
          break;
 800423a:	e01c      	b.n	8004276 <HAL_RCCEx_GetPeriphCLKFreq+0x7e2>
          frequency = HAL_RCC_GetPCLK1Freq();
 800423c:	f7fe ffb0 	bl	80031a0 <HAL_RCC_GetPCLK1Freq>
 8004240:	61f8      	str	r0, [r7, #28]
          break;
 8004242:	e01d      	b.n	8004280 <HAL_RCCEx_GetPeriphCLKFreq+0x7ec>
          frequency = HAL_RCC_GetSysClockFreq();
 8004244:	f7fe ff16 	bl	8003074 <HAL_RCC_GetSysClockFreq>
 8004248:	61f8      	str	r0, [r7, #28]
          break;
 800424a:	e019      	b.n	8004280 <HAL_RCCEx_GetPeriphCLKFreq+0x7ec>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800424c:	4b1d      	ldr	r3, [pc, #116]	@ (80042c4 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004254:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004258:	d10f      	bne.n	800427a <HAL_RCCEx_GetPeriphCLKFreq+0x7e6>
            frequency = HSI_VALUE;
 800425a:	4b1c      	ldr	r3, [pc, #112]	@ (80042cc <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 800425c:	61fb      	str	r3, [r7, #28]
          break;
 800425e:	e00c      	b.n	800427a <HAL_RCCEx_GetPeriphCLKFreq+0x7e6>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8004260:	4b18      	ldr	r3, [pc, #96]	@ (80042c4 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8004262:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004266:	f003 0302 	and.w	r3, r3, #2
 800426a:	2b02      	cmp	r3, #2
 800426c:	d107      	bne.n	800427e <HAL_RCCEx_GetPeriphCLKFreq+0x7ea>
            frequency = LSE_VALUE;
 800426e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004272:	61fb      	str	r3, [r7, #28]
          break;
 8004274:	e003      	b.n	800427e <HAL_RCCEx_GetPeriphCLKFreq+0x7ea>
          break;
 8004276:	bf00      	nop
 8004278:	e322      	b.n	80048c0 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 800427a:	bf00      	nop
 800427c:	e320      	b.n	80048c0 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 800427e:	bf00      	nop
        break;
 8004280:	e31e      	b.n	80048c0 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8004282:	4b10      	ldr	r3, [pc, #64]	@ (80042c4 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8004284:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004288:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800428c:	60fb      	str	r3, [r7, #12]
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	2bc0      	cmp	r3, #192	@ 0xc0
 8004292:	d027      	beq.n	80042e4 <HAL_RCCEx_GetPeriphCLKFreq+0x850>
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	2bc0      	cmp	r3, #192	@ 0xc0
 8004298:	d82f      	bhi.n	80042fa <HAL_RCCEx_GetPeriphCLKFreq+0x866>
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	2b80      	cmp	r3, #128	@ 0x80
 800429e:	d017      	beq.n	80042d0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	2b80      	cmp	r3, #128	@ 0x80
 80042a4:	d829      	bhi.n	80042fa <HAL_RCCEx_GetPeriphCLKFreq+0x866>
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d003      	beq.n	80042b4 <HAL_RCCEx_GetPeriphCLKFreq+0x820>
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	2b40      	cmp	r3, #64	@ 0x40
 80042b0:	d004      	beq.n	80042bc <HAL_RCCEx_GetPeriphCLKFreq+0x828>
          break;
 80042b2:	e022      	b.n	80042fa <HAL_RCCEx_GetPeriphCLKFreq+0x866>
          frequency = HAL_RCC_GetPCLK1Freq();
 80042b4:	f7fe ff74 	bl	80031a0 <HAL_RCC_GetPCLK1Freq>
 80042b8:	61f8      	str	r0, [r7, #28]
          break;
 80042ba:	e023      	b.n	8004304 <HAL_RCCEx_GetPeriphCLKFreq+0x870>
          frequency = HAL_RCC_GetSysClockFreq();
 80042bc:	f7fe feda 	bl	8003074 <HAL_RCC_GetSysClockFreq>
 80042c0:	61f8      	str	r0, [r7, #28]
          break;
 80042c2:	e01f      	b.n	8004304 <HAL_RCCEx_GetPeriphCLKFreq+0x870>
 80042c4:	40021000 	.word	0x40021000
 80042c8:	02dc6c00 	.word	0x02dc6c00
 80042cc:	00f42400 	.word	0x00f42400
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80042d0:	4b9b      	ldr	r3, [pc, #620]	@ (8004540 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80042d8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80042dc:	d10f      	bne.n	80042fe <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
            frequency = HSI_VALUE;
 80042de:	4b99      	ldr	r3, [pc, #612]	@ (8004544 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 80042e0:	61fb      	str	r3, [r7, #28]
          break;
 80042e2:	e00c      	b.n	80042fe <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80042e4:	4b96      	ldr	r3, [pc, #600]	@ (8004540 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 80042e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80042ea:	f003 0302 	and.w	r3, r3, #2
 80042ee:	2b02      	cmp	r3, #2
 80042f0:	d107      	bne.n	8004302 <HAL_RCCEx_GetPeriphCLKFreq+0x86e>
            frequency = LSE_VALUE;
 80042f2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80042f6:	61fb      	str	r3, [r7, #28]
          break;
 80042f8:	e003      	b.n	8004302 <HAL_RCCEx_GetPeriphCLKFreq+0x86e>
          break;
 80042fa:	bf00      	nop
 80042fc:	e2e0      	b.n	80048c0 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 80042fe:	bf00      	nop
 8004300:	e2de      	b.n	80048c0 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8004302:	bf00      	nop
        break;
 8004304:	e2dc      	b.n	80048c0 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8004306:	4b8e      	ldr	r3, [pc, #568]	@ (8004540 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8004308:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800430c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004310:	60fb      	str	r3, [r7, #12]
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004318:	d025      	beq.n	8004366 <HAL_RCCEx_GetPeriphCLKFreq+0x8d2>
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004320:	d82c      	bhi.n	800437c <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004328:	d013      	beq.n	8004352 <HAL_RCCEx_GetPeriphCLKFreq+0x8be>
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004330:	d824      	bhi.n	800437c <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	2b00      	cmp	r3, #0
 8004336:	d004      	beq.n	8004342 <HAL_RCCEx_GetPeriphCLKFreq+0x8ae>
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800433e:	d004      	beq.n	800434a <HAL_RCCEx_GetPeriphCLKFreq+0x8b6>
          break;
 8004340:	e01c      	b.n	800437c <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
          frequency = HAL_RCC_GetPCLK1Freq();
 8004342:	f7fe ff2d 	bl	80031a0 <HAL_RCC_GetPCLK1Freq>
 8004346:	61f8      	str	r0, [r7, #28]
          break;
 8004348:	e01d      	b.n	8004386 <HAL_RCCEx_GetPeriphCLKFreq+0x8f2>
          frequency = HAL_RCC_GetSysClockFreq();
 800434a:	f7fe fe93 	bl	8003074 <HAL_RCC_GetSysClockFreq>
 800434e:	61f8      	str	r0, [r7, #28]
          break;
 8004350:	e019      	b.n	8004386 <HAL_RCCEx_GetPeriphCLKFreq+0x8f2>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004352:	4b7b      	ldr	r3, [pc, #492]	@ (8004540 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800435a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800435e:	d10f      	bne.n	8004380 <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
            frequency = HSI_VALUE;
 8004360:	4b78      	ldr	r3, [pc, #480]	@ (8004544 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8004362:	61fb      	str	r3, [r7, #28]
          break;
 8004364:	e00c      	b.n	8004380 <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8004366:	4b76      	ldr	r3, [pc, #472]	@ (8004540 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8004368:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800436c:	f003 0302 	and.w	r3, r3, #2
 8004370:	2b02      	cmp	r3, #2
 8004372:	d107      	bne.n	8004384 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
            frequency = LSE_VALUE;
 8004374:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004378:	61fb      	str	r3, [r7, #28]
          break;
 800437a:	e003      	b.n	8004384 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
          break;
 800437c:	bf00      	nop
 800437e:	e29f      	b.n	80048c0 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8004380:	bf00      	nop
 8004382:	e29d      	b.n	80048c0 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8004384:	bf00      	nop
        break;
 8004386:	e29b      	b.n	80048c0 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8004388:	4b6d      	ldr	r3, [pc, #436]	@ (8004540 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 800438a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800438e:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004392:	60fb      	str	r3, [r7, #12]
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800439a:	d025      	beq.n	80043e8 <HAL_RCCEx_GetPeriphCLKFreq+0x954>
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80043a2:	d82c      	bhi.n	80043fe <HAL_RCCEx_GetPeriphCLKFreq+0x96a>
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80043aa:	d013      	beq.n	80043d4 <HAL_RCCEx_GetPeriphCLKFreq+0x940>
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80043b2:	d824      	bhi.n	80043fe <HAL_RCCEx_GetPeriphCLKFreq+0x96a>
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d004      	beq.n	80043c4 <HAL_RCCEx_GetPeriphCLKFreq+0x930>
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80043c0:	d004      	beq.n	80043cc <HAL_RCCEx_GetPeriphCLKFreq+0x938>
          break;
 80043c2:	e01c      	b.n	80043fe <HAL_RCCEx_GetPeriphCLKFreq+0x96a>
          frequency = HAL_RCC_GetPCLK1Freq();
 80043c4:	f7fe feec 	bl	80031a0 <HAL_RCC_GetPCLK1Freq>
 80043c8:	61f8      	str	r0, [r7, #28]
          break;
 80043ca:	e01d      	b.n	8004408 <HAL_RCCEx_GetPeriphCLKFreq+0x974>
          frequency = HAL_RCC_GetSysClockFreq();
 80043cc:	f7fe fe52 	bl	8003074 <HAL_RCC_GetSysClockFreq>
 80043d0:	61f8      	str	r0, [r7, #28]
          break;
 80043d2:	e019      	b.n	8004408 <HAL_RCCEx_GetPeriphCLKFreq+0x974>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80043d4:	4b5a      	ldr	r3, [pc, #360]	@ (8004540 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80043dc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80043e0:	d10f      	bne.n	8004402 <HAL_RCCEx_GetPeriphCLKFreq+0x96e>
            frequency = HSI_VALUE;
 80043e2:	4b58      	ldr	r3, [pc, #352]	@ (8004544 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 80043e4:	61fb      	str	r3, [r7, #28]
          break;
 80043e6:	e00c      	b.n	8004402 <HAL_RCCEx_GetPeriphCLKFreq+0x96e>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80043e8:	4b55      	ldr	r3, [pc, #340]	@ (8004540 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 80043ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80043ee:	f003 0302 	and.w	r3, r3, #2
 80043f2:	2b02      	cmp	r3, #2
 80043f4:	d107      	bne.n	8004406 <HAL_RCCEx_GetPeriphCLKFreq+0x972>
            frequency = LSE_VALUE;
 80043f6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80043fa:	61fb      	str	r3, [r7, #28]
          break;
 80043fc:	e003      	b.n	8004406 <HAL_RCCEx_GetPeriphCLKFreq+0x972>
          break;
 80043fe:	bf00      	nop
 8004400:	e25e      	b.n	80048c0 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8004402:	bf00      	nop
 8004404:	e25c      	b.n	80048c0 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8004406:	bf00      	nop
        break;
 8004408:	e25a      	b.n	80048c0 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800440a:	4b4d      	ldr	r3, [pc, #308]	@ (8004540 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 800440c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004410:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8004414:	60fb      	str	r3, [r7, #12]
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800441c:	d007      	beq.n	800442e <HAL_RCCEx_GetPeriphCLKFreq+0x99a>
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004424:	d12f      	bne.n	8004486 <HAL_RCCEx_GetPeriphCLKFreq+0x9f2>
          frequency = HAL_RCC_GetSysClockFreq();
 8004426:	f7fe fe25 	bl	8003074 <HAL_RCC_GetSysClockFreq>
 800442a:	61f8      	str	r0, [r7, #28]
          break;
 800442c:	e02e      	b.n	800448c <HAL_RCCEx_GetPeriphCLKFreq+0x9f8>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_ADC1CLK) != 0U))
 800442e:	4b44      	ldr	r3, [pc, #272]	@ (8004540 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004436:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800443a:	d126      	bne.n	800448a <HAL_RCCEx_GetPeriphCLKFreq+0x9f6>
 800443c:	4b40      	ldr	r3, [pc, #256]	@ (8004540 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 800443e:	691b      	ldr	r3, [r3, #16]
 8004440:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004444:	2b00      	cmp	r3, #0
 8004446:	d020      	beq.n	800448a <HAL_RCCEx_GetPeriphCLKFreq+0x9f6>
            plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8004448:	4b3d      	ldr	r3, [pc, #244]	@ (8004540 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 800444a:	691b      	ldr	r3, [r3, #16]
 800444c:	0a1b      	lsrs	r3, r3, #8
 800444e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004452:	60bb      	str	r3, [r7, #8]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 8004454:	69bb      	ldr	r3, [r7, #24]
 8004456:	68ba      	ldr	r2, [r7, #8]
 8004458:	fb03 f202 	mul.w	r2, r3, r2
 800445c:	4b38      	ldr	r3, [pc, #224]	@ (8004540 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 800445e:	691b      	ldr	r3, [r3, #16]
 8004460:	091b      	lsrs	r3, r3, #4
 8004462:	f003 030f 	and.w	r3, r3, #15
 8004466:	3301      	adds	r3, #1
 8004468:	fbb2 f3f3 	udiv	r3, r2, r3
 800446c:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1R) >> RCC_PLLSAI1CFGR_PLLSAI1R_Pos) + 1U) << 1U));
 800446e:	4b34      	ldr	r3, [pc, #208]	@ (8004540 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8004470:	691b      	ldr	r3, [r3, #16]
 8004472:	0e5b      	lsrs	r3, r3, #25
 8004474:	f003 0303 	and.w	r3, r3, #3
 8004478:	3301      	adds	r3, #1
 800447a:	005b      	lsls	r3, r3, #1
 800447c:	69ba      	ldr	r2, [r7, #24]
 800447e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004482:	61fb      	str	r3, [r7, #28]
          break;
 8004484:	e001      	b.n	800448a <HAL_RCCEx_GetPeriphCLKFreq+0x9f6>
          break;
 8004486:	bf00      	nop
 8004488:	e21a      	b.n	80048c0 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 800448a:	bf00      	nop
        break;
 800448c:	e218      	b.n	80048c0 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_DFSDM1_SOURCE();
 800448e:	4b2c      	ldr	r3, [pc, #176]	@ (8004540 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8004490:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004494:	f003 0304 	and.w	r3, r3, #4
 8004498:	60fb      	str	r3, [r7, #12]
        if(srcclk == RCC_DFSDM1CLKSOURCE_PCLK2)
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	2b00      	cmp	r3, #0
 800449e:	d103      	bne.n	80044a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa14>
          frequency = HAL_RCC_GetPCLK2Freq();
 80044a0:	f7fe fe94 	bl	80031cc <HAL_RCC_GetPCLK2Freq>
 80044a4:	61f8      	str	r0, [r7, #28]
        break;
 80044a6:	e20b      	b.n	80048c0 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          frequency = HAL_RCC_GetSysClockFreq();
 80044a8:	f7fe fde4 	bl	8003074 <HAL_RCC_GetSysClockFreq>
 80044ac:	61f8      	str	r0, [r7, #28]
        break;
 80044ae:	e207      	b.n	80048c0 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_DFSDM1AUDIO_SOURCE();
 80044b0:	4b23      	ldr	r3, [pc, #140]	@ (8004540 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 80044b2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80044b6:	f003 0318 	and.w	r3, r3, #24
 80044ba:	60fb      	str	r3, [r7, #12]
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	2b10      	cmp	r3, #16
 80044c0:	d010      	beq.n	80044e4 <HAL_RCCEx_GetPeriphCLKFreq+0xa50>
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	2b10      	cmp	r3, #16
 80044c6:	d834      	bhi.n	8004532 <HAL_RCCEx_GetPeriphCLKFreq+0xa9e>
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d003      	beq.n	80044d6 <HAL_RCCEx_GetPeriphCLKFreq+0xa42>
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	2b08      	cmp	r3, #8
 80044d2:	d024      	beq.n	800451e <HAL_RCCEx_GetPeriphCLKFreq+0xa8a>
          break;
 80044d4:	e02d      	b.n	8004532 <HAL_RCCEx_GetPeriphCLKFreq+0xa9e>
          frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 80044d6:	69b9      	ldr	r1, [r7, #24]
 80044d8:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 80044dc:	f000 fbe2 	bl	8004ca4 <RCCEx_GetSAIxPeriphCLKFreq>
 80044e0:	61f8      	str	r0, [r7, #28]
          break;
 80044e2:	e02b      	b.n	800453c <HAL_RCCEx_GetPeriphCLKFreq+0xaa8>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 80044e4:	4b16      	ldr	r3, [pc, #88]	@ (8004540 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f003 0302 	and.w	r3, r3, #2
 80044ec:	2b02      	cmp	r3, #2
 80044ee:	d122      	bne.n	8004536 <HAL_RCCEx_GetPeriphCLKFreq+0xaa2>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 80044f0:	4b13      	ldr	r3, [pc, #76]	@ (8004540 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	f003 0308 	and.w	r3, r3, #8
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d005      	beq.n	8004508 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>
 80044fc:	4b10      	ldr	r3, [pc, #64]	@ (8004540 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	091b      	lsrs	r3, r3, #4
 8004502:	f003 030f 	and.w	r3, r3, #15
 8004506:	e005      	b.n	8004514 <HAL_RCCEx_GetPeriphCLKFreq+0xa80>
 8004508:	4b0d      	ldr	r3, [pc, #52]	@ (8004540 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 800450a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800450e:	0a1b      	lsrs	r3, r3, #8
 8004510:	f003 030f 	and.w	r3, r3, #15
 8004514:	4a0c      	ldr	r2, [pc, #48]	@ (8004548 <HAL_RCCEx_GetPeriphCLKFreq+0xab4>)
 8004516:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800451a:	61fb      	str	r3, [r7, #28]
          break;
 800451c:	e00b      	b.n	8004536 <HAL_RCCEx_GetPeriphCLKFreq+0xaa2>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800451e:	4b08      	ldr	r3, [pc, #32]	@ (8004540 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004526:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800452a:	d106      	bne.n	800453a <HAL_RCCEx_GetPeriphCLKFreq+0xaa6>
            frequency = HSI_VALUE;
 800452c:	4b05      	ldr	r3, [pc, #20]	@ (8004544 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800452e:	61fb      	str	r3, [r7, #28]
          break;
 8004530:	e003      	b.n	800453a <HAL_RCCEx_GetPeriphCLKFreq+0xaa6>
          break;
 8004532:	bf00      	nop
 8004534:	e1c4      	b.n	80048c0 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8004536:	bf00      	nop
 8004538:	e1c2      	b.n	80048c0 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 800453a:	bf00      	nop
        break;
 800453c:	e1c0      	b.n	80048c0 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
 800453e:	bf00      	nop
 8004540:	40021000 	.word	0x40021000
 8004544:	00f42400 	.word	0x00f42400
 8004548:	0800db58 	.word	0x0800db58
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 800454c:	4b96      	ldr	r3, [pc, #600]	@ (80047a8 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 800454e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004552:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8004556:	60fb      	str	r3, [r7, #12]
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800455e:	d013      	beq.n	8004588 <HAL_RCCEx_GetPeriphCLKFreq+0xaf4>
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004566:	d819      	bhi.n	800459c <HAL_RCCEx_GetPeriphCLKFreq+0xb08>
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	2b00      	cmp	r3, #0
 800456c:	d004      	beq.n	8004578 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004574:	d004      	beq.n	8004580 <HAL_RCCEx_GetPeriphCLKFreq+0xaec>
          break;
 8004576:	e011      	b.n	800459c <HAL_RCCEx_GetPeriphCLKFreq+0xb08>
          frequency = HAL_RCC_GetPCLK1Freq();
 8004578:	f7fe fe12 	bl	80031a0 <HAL_RCC_GetPCLK1Freq>
 800457c:	61f8      	str	r0, [r7, #28]
          break;
 800457e:	e010      	b.n	80045a2 <HAL_RCCEx_GetPeriphCLKFreq+0xb0e>
          frequency = HAL_RCC_GetSysClockFreq();
 8004580:	f7fe fd78 	bl	8003074 <HAL_RCC_GetSysClockFreq>
 8004584:	61f8      	str	r0, [r7, #28]
          break;
 8004586:	e00c      	b.n	80045a2 <HAL_RCCEx_GetPeriphCLKFreq+0xb0e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004588:	4b87      	ldr	r3, [pc, #540]	@ (80047a8 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004590:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004594:	d104      	bne.n	80045a0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0c>
            frequency = HSI_VALUE;
 8004596:	4b85      	ldr	r3, [pc, #532]	@ (80047ac <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8004598:	61fb      	str	r3, [r7, #28]
          break;
 800459a:	e001      	b.n	80045a0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0c>
          break;
 800459c:	bf00      	nop
 800459e:	e18f      	b.n	80048c0 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 80045a0:	bf00      	nop
        break;
 80045a2:	e18d      	b.n	80048c0 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 80045a4:	4b80      	ldr	r3, [pc, #512]	@ (80047a8 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 80045a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80045aa:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80045ae:	60fb      	str	r3, [r7, #12]
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80045b6:	d013      	beq.n	80045e0 <HAL_RCCEx_GetPeriphCLKFreq+0xb4c>
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80045be:	d819      	bhi.n	80045f4 <HAL_RCCEx_GetPeriphCLKFreq+0xb60>
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d004      	beq.n	80045d0 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80045cc:	d004      	beq.n	80045d8 <HAL_RCCEx_GetPeriphCLKFreq+0xb44>
          break;
 80045ce:	e011      	b.n	80045f4 <HAL_RCCEx_GetPeriphCLKFreq+0xb60>
          frequency = HAL_RCC_GetPCLK1Freq();
 80045d0:	f7fe fde6 	bl	80031a0 <HAL_RCC_GetPCLK1Freq>
 80045d4:	61f8      	str	r0, [r7, #28]
          break;
 80045d6:	e010      	b.n	80045fa <HAL_RCCEx_GetPeriphCLKFreq+0xb66>
          frequency = HAL_RCC_GetSysClockFreq();
 80045d8:	f7fe fd4c 	bl	8003074 <HAL_RCC_GetSysClockFreq>
 80045dc:	61f8      	str	r0, [r7, #28]
          break;
 80045de:	e00c      	b.n	80045fa <HAL_RCCEx_GetPeriphCLKFreq+0xb66>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80045e0:	4b71      	ldr	r3, [pc, #452]	@ (80047a8 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80045e8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80045ec:	d104      	bne.n	80045f8 <HAL_RCCEx_GetPeriphCLKFreq+0xb64>
            frequency = HSI_VALUE;
 80045ee:	4b6f      	ldr	r3, [pc, #444]	@ (80047ac <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 80045f0:	61fb      	str	r3, [r7, #28]
          break;
 80045f2:	e001      	b.n	80045f8 <HAL_RCCEx_GetPeriphCLKFreq+0xb64>
          break;
 80045f4:	bf00      	nop
 80045f6:	e163      	b.n	80048c0 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 80045f8:	bf00      	nop
        break;
 80045fa:	e161      	b.n	80048c0 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 80045fc:	4b6a      	ldr	r3, [pc, #424]	@ (80047a8 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 80045fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004602:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004606:	60fb      	str	r3, [r7, #12]
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800460e:	d013      	beq.n	8004638 <HAL_RCCEx_GetPeriphCLKFreq+0xba4>
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004616:	d819      	bhi.n	800464c <HAL_RCCEx_GetPeriphCLKFreq+0xbb8>
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	2b00      	cmp	r3, #0
 800461c:	d004      	beq.n	8004628 <HAL_RCCEx_GetPeriphCLKFreq+0xb94>
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004624:	d004      	beq.n	8004630 <HAL_RCCEx_GetPeriphCLKFreq+0xb9c>
          break;
 8004626:	e011      	b.n	800464c <HAL_RCCEx_GetPeriphCLKFreq+0xbb8>
          frequency = HAL_RCC_GetPCLK1Freq();
 8004628:	f7fe fdba 	bl	80031a0 <HAL_RCC_GetPCLK1Freq>
 800462c:	61f8      	str	r0, [r7, #28]
          break;
 800462e:	e010      	b.n	8004652 <HAL_RCCEx_GetPeriphCLKFreq+0xbbe>
          frequency = HAL_RCC_GetSysClockFreq();
 8004630:	f7fe fd20 	bl	8003074 <HAL_RCC_GetSysClockFreq>
 8004634:	61f8      	str	r0, [r7, #28]
          break;
 8004636:	e00c      	b.n	8004652 <HAL_RCCEx_GetPeriphCLKFreq+0xbbe>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004638:	4b5b      	ldr	r3, [pc, #364]	@ (80047a8 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004640:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004644:	d104      	bne.n	8004650 <HAL_RCCEx_GetPeriphCLKFreq+0xbbc>
            frequency = HSI_VALUE;
 8004646:	4b59      	ldr	r3, [pc, #356]	@ (80047ac <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8004648:	61fb      	str	r3, [r7, #28]
          break;
 800464a:	e001      	b.n	8004650 <HAL_RCCEx_GetPeriphCLKFreq+0xbbc>
          break;
 800464c:	bf00      	nop
 800464e:	e137      	b.n	80048c0 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8004650:	bf00      	nop
        break;
 8004652:	e135      	b.n	80048c0 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 8004654:	4b54      	ldr	r3, [pc, #336]	@ (80047a8 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 8004656:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800465a:	f003 0303 	and.w	r3, r3, #3
 800465e:	60fb      	str	r3, [r7, #12]
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	2b02      	cmp	r3, #2
 8004664:	d011      	beq.n	800468a <HAL_RCCEx_GetPeriphCLKFreq+0xbf6>
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	2b02      	cmp	r3, #2
 800466a:	d818      	bhi.n	800469e <HAL_RCCEx_GetPeriphCLKFreq+0xc0a>
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	2b00      	cmp	r3, #0
 8004670:	d003      	beq.n	800467a <HAL_RCCEx_GetPeriphCLKFreq+0xbe6>
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	2b01      	cmp	r3, #1
 8004676:	d004      	beq.n	8004682 <HAL_RCCEx_GetPeriphCLKFreq+0xbee>
          break;
 8004678:	e011      	b.n	800469e <HAL_RCCEx_GetPeriphCLKFreq+0xc0a>
          frequency = HAL_RCC_GetPCLK1Freq();
 800467a:	f7fe fd91 	bl	80031a0 <HAL_RCC_GetPCLK1Freq>
 800467e:	61f8      	str	r0, [r7, #28]
          break;
 8004680:	e010      	b.n	80046a4 <HAL_RCCEx_GetPeriphCLKFreq+0xc10>
          frequency = HAL_RCC_GetSysClockFreq();
 8004682:	f7fe fcf7 	bl	8003074 <HAL_RCC_GetSysClockFreq>
 8004686:	61f8      	str	r0, [r7, #28]
          break;
 8004688:	e00c      	b.n	80046a4 <HAL_RCCEx_GetPeriphCLKFreq+0xc10>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800468a:	4b47      	ldr	r3, [pc, #284]	@ (80047a8 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004692:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004696:	d104      	bne.n	80046a2 <HAL_RCCEx_GetPeriphCLKFreq+0xc0e>
            frequency = HSI_VALUE;
 8004698:	4b44      	ldr	r3, [pc, #272]	@ (80047ac <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 800469a:	61fb      	str	r3, [r7, #28]
          break;
 800469c:	e001      	b.n	80046a2 <HAL_RCCEx_GetPeriphCLKFreq+0xc0e>
          break;
 800469e:	bf00      	nop
 80046a0:	e10e      	b.n	80048c0 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 80046a2:	bf00      	nop
        break;
 80046a4:	e10c      	b.n	80048c0 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 80046a6:	4b40      	ldr	r3, [pc, #256]	@ (80047a8 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 80046a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80046ac:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 80046b0:	60fb      	str	r3, [r7, #12]
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80046b8:	d02c      	beq.n	8004714 <HAL_RCCEx_GetPeriphCLKFreq+0xc80>
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80046c0:	d833      	bhi.n	800472a <HAL_RCCEx_GetPeriphCLKFreq+0xc96>
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80046c8:	d01a      	beq.n	8004700 <HAL_RCCEx_GetPeriphCLKFreq+0xc6c>
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80046d0:	d82b      	bhi.n	800472a <HAL_RCCEx_GetPeriphCLKFreq+0xc96>
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d004      	beq.n	80046e2 <HAL_RCCEx_GetPeriphCLKFreq+0xc4e>
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80046de:	d004      	beq.n	80046ea <HAL_RCCEx_GetPeriphCLKFreq+0xc56>
          break;
 80046e0:	e023      	b.n	800472a <HAL_RCCEx_GetPeriphCLKFreq+0xc96>
          frequency = HAL_RCC_GetPCLK1Freq();
 80046e2:	f7fe fd5d 	bl	80031a0 <HAL_RCC_GetPCLK1Freq>
 80046e6:	61f8      	str	r0, [r7, #28]
          break;
 80046e8:	e026      	b.n	8004738 <HAL_RCCEx_GetPeriphCLKFreq+0xca4>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 80046ea:	4b2f      	ldr	r3, [pc, #188]	@ (80047a8 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 80046ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80046f0:	f003 0302 	and.w	r3, r3, #2
 80046f4:	2b02      	cmp	r3, #2
 80046f6:	d11a      	bne.n	800472e <HAL_RCCEx_GetPeriphCLKFreq+0xc9a>
              frequency = LSI_VALUE;
 80046f8:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80046fc:	61fb      	str	r3, [r7, #28]
          break;
 80046fe:	e016      	b.n	800472e <HAL_RCCEx_GetPeriphCLKFreq+0xc9a>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004700:	4b29      	ldr	r3, [pc, #164]	@ (80047a8 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004708:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800470c:	d111      	bne.n	8004732 <HAL_RCCEx_GetPeriphCLKFreq+0xc9e>
            frequency = HSI_VALUE;
 800470e:	4b27      	ldr	r3, [pc, #156]	@ (80047ac <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8004710:	61fb      	str	r3, [r7, #28]
          break;
 8004712:	e00e      	b.n	8004732 <HAL_RCCEx_GetPeriphCLKFreq+0xc9e>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8004714:	4b24      	ldr	r3, [pc, #144]	@ (80047a8 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 8004716:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800471a:	f003 0302 	and.w	r3, r3, #2
 800471e:	2b02      	cmp	r3, #2
 8004720:	d109      	bne.n	8004736 <HAL_RCCEx_GetPeriphCLKFreq+0xca2>
            frequency = LSE_VALUE;
 8004722:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004726:	61fb      	str	r3, [r7, #28]
          break;
 8004728:	e005      	b.n	8004736 <HAL_RCCEx_GetPeriphCLKFreq+0xca2>
          break;
 800472a:	bf00      	nop
 800472c:	e0c8      	b.n	80048c0 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 800472e:	bf00      	nop
 8004730:	e0c6      	b.n	80048c0 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8004732:	bf00      	nop
 8004734:	e0c4      	b.n	80048c0 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8004736:	bf00      	nop
        break;
 8004738:	e0c2      	b.n	80048c0 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
       srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 800473a:	4b1b      	ldr	r3, [pc, #108]	@ (80047a8 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 800473c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004740:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8004744:	60fb      	str	r3, [r7, #12]
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800474c:	d030      	beq.n	80047b0 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004754:	d837      	bhi.n	80047c6 <HAL_RCCEx_GetPeriphCLKFreq+0xd32>
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800475c:	d01a      	beq.n	8004794 <HAL_RCCEx_GetPeriphCLKFreq+0xd00>
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004764:	d82f      	bhi.n	80047c6 <HAL_RCCEx_GetPeriphCLKFreq+0xd32>
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	2b00      	cmp	r3, #0
 800476a:	d004      	beq.n	8004776 <HAL_RCCEx_GetPeriphCLKFreq+0xce2>
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004772:	d004      	beq.n	800477e <HAL_RCCEx_GetPeriphCLKFreq+0xcea>
          break;
 8004774:	e027      	b.n	80047c6 <HAL_RCCEx_GetPeriphCLKFreq+0xd32>
          frequency = HAL_RCC_GetPCLK1Freq();
 8004776:	f7fe fd13 	bl	80031a0 <HAL_RCC_GetPCLK1Freq>
 800477a:	61f8      	str	r0, [r7, #28]
          break;
 800477c:	e02a      	b.n	80047d4 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 800477e:	4b0a      	ldr	r3, [pc, #40]	@ (80047a8 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 8004780:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004784:	f003 0302 	and.w	r3, r3, #2
 8004788:	2b02      	cmp	r3, #2
 800478a:	d11e      	bne.n	80047ca <HAL_RCCEx_GetPeriphCLKFreq+0xd36>
              frequency = LSI_VALUE;
 800478c:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8004790:	61fb      	str	r3, [r7, #28]
          break;
 8004792:	e01a      	b.n	80047ca <HAL_RCCEx_GetPeriphCLKFreq+0xd36>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004794:	4b04      	ldr	r3, [pc, #16]	@ (80047a8 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800479c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80047a0:	d115      	bne.n	80047ce <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
            frequency = HSI_VALUE;
 80047a2:	4b02      	ldr	r3, [pc, #8]	@ (80047ac <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 80047a4:	61fb      	str	r3, [r7, #28]
          break;
 80047a6:	e012      	b.n	80047ce <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
 80047a8:	40021000 	.word	0x40021000
 80047ac:	00f42400 	.word	0x00f42400
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80047b0:	4b46      	ldr	r3, [pc, #280]	@ (80048cc <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 80047b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80047b6:	f003 0302 	and.w	r3, r3, #2
 80047ba:	2b02      	cmp	r3, #2
 80047bc:	d109      	bne.n	80047d2 <HAL_RCCEx_GetPeriphCLKFreq+0xd3e>
            frequency = LSE_VALUE;
 80047be:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80047c2:	61fb      	str	r3, [r7, #28]
          break;
 80047c4:	e005      	b.n	80047d2 <HAL_RCCEx_GetPeriphCLKFreq+0xd3e>
          break;
 80047c6:	bf00      	nop
 80047c8:	e07a      	b.n	80048c0 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 80047ca:	bf00      	nop
 80047cc:	e078      	b.n	80048c0 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 80047ce:	bf00      	nop
 80047d0:	e076      	b.n	80048c0 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 80047d2:	bf00      	nop
        break;
 80047d4:	e074      	b.n	80048c0 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 80047d6:	4b3d      	ldr	r3, [pc, #244]	@ (80048cc <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 80047d8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80047dc:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 80047e0:	60fb      	str	r3, [r7, #12]
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80047e8:	d02c      	beq.n	8004844 <HAL_RCCEx_GetPeriphCLKFreq+0xdb0>
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80047f0:	d855      	bhi.n	800489e <HAL_RCCEx_GetPeriphCLKFreq+0xe0a>
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d004      	beq.n	8004802 <HAL_RCCEx_GetPeriphCLKFreq+0xd6e>
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80047fe:	d004      	beq.n	800480a <HAL_RCCEx_GetPeriphCLKFreq+0xd76>
          break;
 8004800:	e04d      	b.n	800489e <HAL_RCCEx_GetPeriphCLKFreq+0xe0a>
          frequency = HAL_RCC_GetSysClockFreq();
 8004802:	f7fe fc37 	bl	8003074 <HAL_RCC_GetSysClockFreq>
 8004806:	61f8      	str	r0, [r7, #28]
          break;
 8004808:	e04e      	b.n	80048a8 <HAL_RCCEx_GetPeriphCLKFreq+0xe14>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 800480a:	4b30      	ldr	r3, [pc, #192]	@ (80048cc <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	f003 0302 	and.w	r3, r3, #2
 8004812:	2b02      	cmp	r3, #2
 8004814:	d145      	bne.n	80048a2 <HAL_RCCEx_GetPeriphCLKFreq+0xe0e>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8004816:	4b2d      	ldr	r3, [pc, #180]	@ (80048cc <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	f003 0308 	and.w	r3, r3, #8
 800481e:	2b00      	cmp	r3, #0
 8004820:	d005      	beq.n	800482e <HAL_RCCEx_GetPeriphCLKFreq+0xd9a>
 8004822:	4b2a      	ldr	r3, [pc, #168]	@ (80048cc <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	091b      	lsrs	r3, r3, #4
 8004828:	f003 030f 	and.w	r3, r3, #15
 800482c:	e005      	b.n	800483a <HAL_RCCEx_GetPeriphCLKFreq+0xda6>
 800482e:	4b27      	ldr	r3, [pc, #156]	@ (80048cc <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 8004830:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004834:	0a1b      	lsrs	r3, r3, #8
 8004836:	f003 030f 	and.w	r3, r3, #15
 800483a:	4a25      	ldr	r2, [pc, #148]	@ (80048d0 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 800483c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004840:	61fb      	str	r3, [r7, #28]
          break;
 8004842:	e02e      	b.n	80048a2 <HAL_RCCEx_GetPeriphCLKFreq+0xe0e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8004844:	4b21      	ldr	r3, [pc, #132]	@ (80048cc <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800484c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004850:	d129      	bne.n	80048a6 <HAL_RCCEx_GetPeriphCLKFreq+0xe12>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 8004852:	4b1e      	ldr	r3, [pc, #120]	@ (80048cc <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 8004854:	68db      	ldr	r3, [r3, #12]
 8004856:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800485a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800485e:	d122      	bne.n	80048a6 <HAL_RCCEx_GetPeriphCLKFreq+0xe12>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8004860:	4b1a      	ldr	r3, [pc, #104]	@ (80048cc <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 8004862:	68db      	ldr	r3, [r3, #12]
 8004864:	0a1b      	lsrs	r3, r3, #8
 8004866:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800486a:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800486c:	69bb      	ldr	r3, [r7, #24]
 800486e:	68ba      	ldr	r2, [r7, #8]
 8004870:	fb03 f202 	mul.w	r2, r3, r2
 8004874:	4b15      	ldr	r3, [pc, #84]	@ (80048cc <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 8004876:	68db      	ldr	r3, [r3, #12]
 8004878:	091b      	lsrs	r3, r3, #4
 800487a:	f003 030f 	and.w	r3, r3, #15
 800487e:	3301      	adds	r3, #1
 8004880:	fbb2 f3f3 	udiv	r3, r2, r3
 8004884:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 8004886:	4b11      	ldr	r3, [pc, #68]	@ (80048cc <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 8004888:	68db      	ldr	r3, [r3, #12]
 800488a:	0d5b      	lsrs	r3, r3, #21
 800488c:	f003 0303 	and.w	r3, r3, #3
 8004890:	3301      	adds	r3, #1
 8004892:	005b      	lsls	r3, r3, #1
 8004894:	69ba      	ldr	r2, [r7, #24]
 8004896:	fbb2 f3f3 	udiv	r3, r2, r3
 800489a:	61fb      	str	r3, [r7, #28]
          break;
 800489c:	e003      	b.n	80048a6 <HAL_RCCEx_GetPeriphCLKFreq+0xe12>
          break;
 800489e:	bf00      	nop
 80048a0:	e00e      	b.n	80048c0 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 80048a2:	bf00      	nop
 80048a4:	e00c      	b.n	80048c0 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 80048a6:	bf00      	nop
        break;
 80048a8:	e00a      	b.n	80048c0 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
      break;
 80048aa:	bf00      	nop
 80048ac:	e008      	b.n	80048c0 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
      break;
 80048ae:	bf00      	nop
 80048b0:	e006      	b.n	80048c0 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
      break;
 80048b2:	bf00      	nop
 80048b4:	e004      	b.n	80048c0 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
      break;
 80048b6:	bf00      	nop
 80048b8:	e002      	b.n	80048c0 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
      break;
 80048ba:	bf00      	nop
 80048bc:	e000      	b.n	80048c0 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
      break;
 80048be:	bf00      	nop
    }
  }

  return(frequency);
 80048c0:	69fb      	ldr	r3, [r7, #28]
}
 80048c2:	4618      	mov	r0, r3
 80048c4:	3720      	adds	r7, #32
 80048c6:	46bd      	mov	sp, r7
 80048c8:	bd80      	pop	{r7, pc}
 80048ca:	bf00      	nop
 80048cc:	40021000 	.word	0x40021000
 80048d0:	0800db58 	.word	0x0800db58

080048d4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80048d4:	b580      	push	{r7, lr}
 80048d6:	b084      	sub	sp, #16
 80048d8:	af00      	add	r7, sp, #0
 80048da:	6078      	str	r0, [r7, #4]
 80048dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80048de:	2300      	movs	r3, #0
 80048e0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80048e2:	4b72      	ldr	r3, [pc, #456]	@ (8004aac <RCCEx_PLLSAI1_Config+0x1d8>)
 80048e4:	68db      	ldr	r3, [r3, #12]
 80048e6:	f003 0303 	and.w	r3, r3, #3
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d00e      	beq.n	800490c <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80048ee:	4b6f      	ldr	r3, [pc, #444]	@ (8004aac <RCCEx_PLLSAI1_Config+0x1d8>)
 80048f0:	68db      	ldr	r3, [r3, #12]
 80048f2:	f003 0203 	and.w	r2, r3, #3
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	429a      	cmp	r2, r3
 80048fc:	d103      	bne.n	8004906 <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
       ||
 8004902:	2b00      	cmp	r3, #0
 8004904:	d142      	bne.n	800498c <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8004906:	2301      	movs	r3, #1
 8004908:	73fb      	strb	r3, [r7, #15]
 800490a:	e03f      	b.n	800498c <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	2b03      	cmp	r3, #3
 8004912:	d018      	beq.n	8004946 <RCCEx_PLLSAI1_Config+0x72>
 8004914:	2b03      	cmp	r3, #3
 8004916:	d825      	bhi.n	8004964 <RCCEx_PLLSAI1_Config+0x90>
 8004918:	2b01      	cmp	r3, #1
 800491a:	d002      	beq.n	8004922 <RCCEx_PLLSAI1_Config+0x4e>
 800491c:	2b02      	cmp	r3, #2
 800491e:	d009      	beq.n	8004934 <RCCEx_PLLSAI1_Config+0x60>
 8004920:	e020      	b.n	8004964 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004922:	4b62      	ldr	r3, [pc, #392]	@ (8004aac <RCCEx_PLLSAI1_Config+0x1d8>)
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	f003 0302 	and.w	r3, r3, #2
 800492a:	2b00      	cmp	r3, #0
 800492c:	d11d      	bne.n	800496a <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 800492e:	2301      	movs	r3, #1
 8004930:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004932:	e01a      	b.n	800496a <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004934:	4b5d      	ldr	r3, [pc, #372]	@ (8004aac <RCCEx_PLLSAI1_Config+0x1d8>)
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800493c:	2b00      	cmp	r3, #0
 800493e:	d116      	bne.n	800496e <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 8004940:	2301      	movs	r3, #1
 8004942:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004944:	e013      	b.n	800496e <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004946:	4b59      	ldr	r3, [pc, #356]	@ (8004aac <RCCEx_PLLSAI1_Config+0x1d8>)
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800494e:	2b00      	cmp	r3, #0
 8004950:	d10f      	bne.n	8004972 <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004952:	4b56      	ldr	r3, [pc, #344]	@ (8004aac <RCCEx_PLLSAI1_Config+0x1d8>)
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800495a:	2b00      	cmp	r3, #0
 800495c:	d109      	bne.n	8004972 <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 800495e:	2301      	movs	r3, #1
 8004960:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004962:	e006      	b.n	8004972 <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 8004964:	2301      	movs	r3, #1
 8004966:	73fb      	strb	r3, [r7, #15]
      break;
 8004968:	e004      	b.n	8004974 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800496a:	bf00      	nop
 800496c:	e002      	b.n	8004974 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800496e:	bf00      	nop
 8004970:	e000      	b.n	8004974 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8004972:	bf00      	nop
    }

    if(status == HAL_OK)
 8004974:	7bfb      	ldrb	r3, [r7, #15]
 8004976:	2b00      	cmp	r3, #0
 8004978:	d108      	bne.n	800498c <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 800497a:	4b4c      	ldr	r3, [pc, #304]	@ (8004aac <RCCEx_PLLSAI1_Config+0x1d8>)
 800497c:	68db      	ldr	r3, [r3, #12]
 800497e:	f023 0203 	bic.w	r2, r3, #3
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	4949      	ldr	r1, [pc, #292]	@ (8004aac <RCCEx_PLLSAI1_Config+0x1d8>)
 8004988:	4313      	orrs	r3, r2
 800498a:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 800498c:	7bfb      	ldrb	r3, [r7, #15]
 800498e:	2b00      	cmp	r3, #0
 8004990:	f040 8086 	bne.w	8004aa0 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004994:	4b45      	ldr	r3, [pc, #276]	@ (8004aac <RCCEx_PLLSAI1_Config+0x1d8>)
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	4a44      	ldr	r2, [pc, #272]	@ (8004aac <RCCEx_PLLSAI1_Config+0x1d8>)
 800499a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800499e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80049a0:	f7fd fa3c 	bl	8001e1c <HAL_GetTick>
 80049a4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80049a6:	e009      	b.n	80049bc <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80049a8:	f7fd fa38 	bl	8001e1c <HAL_GetTick>
 80049ac:	4602      	mov	r2, r0
 80049ae:	68bb      	ldr	r3, [r7, #8]
 80049b0:	1ad3      	subs	r3, r2, r3
 80049b2:	2b02      	cmp	r3, #2
 80049b4:	d902      	bls.n	80049bc <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 80049b6:	2303      	movs	r3, #3
 80049b8:	73fb      	strb	r3, [r7, #15]
        break;
 80049ba:	e005      	b.n	80049c8 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80049bc:	4b3b      	ldr	r3, [pc, #236]	@ (8004aac <RCCEx_PLLSAI1_Config+0x1d8>)
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d1ef      	bne.n	80049a8 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 80049c8:	7bfb      	ldrb	r3, [r7, #15]
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d168      	bne.n	8004aa0 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80049ce:	683b      	ldr	r3, [r7, #0]
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d113      	bne.n	80049fc <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80049d4:	4b35      	ldr	r3, [pc, #212]	@ (8004aac <RCCEx_PLLSAI1_Config+0x1d8>)
 80049d6:	691a      	ldr	r2, [r3, #16]
 80049d8:	4b35      	ldr	r3, [pc, #212]	@ (8004ab0 <RCCEx_PLLSAI1_Config+0x1dc>)
 80049da:	4013      	ands	r3, r2
 80049dc:	687a      	ldr	r2, [r7, #4]
 80049de:	6892      	ldr	r2, [r2, #8]
 80049e0:	0211      	lsls	r1, r2, #8
 80049e2:	687a      	ldr	r2, [r7, #4]
 80049e4:	68d2      	ldr	r2, [r2, #12]
 80049e6:	06d2      	lsls	r2, r2, #27
 80049e8:	4311      	orrs	r1, r2
 80049ea:	687a      	ldr	r2, [r7, #4]
 80049ec:	6852      	ldr	r2, [r2, #4]
 80049ee:	3a01      	subs	r2, #1
 80049f0:	0112      	lsls	r2, r2, #4
 80049f2:	430a      	orrs	r2, r1
 80049f4:	492d      	ldr	r1, [pc, #180]	@ (8004aac <RCCEx_PLLSAI1_Config+0x1d8>)
 80049f6:	4313      	orrs	r3, r2
 80049f8:	610b      	str	r3, [r1, #16]
 80049fa:	e02d      	b.n	8004a58 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80049fc:	683b      	ldr	r3, [r7, #0]
 80049fe:	2b01      	cmp	r3, #1
 8004a00:	d115      	bne.n	8004a2e <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004a02:	4b2a      	ldr	r3, [pc, #168]	@ (8004aac <RCCEx_PLLSAI1_Config+0x1d8>)
 8004a04:	691a      	ldr	r2, [r3, #16]
 8004a06:	4b2b      	ldr	r3, [pc, #172]	@ (8004ab4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004a08:	4013      	ands	r3, r2
 8004a0a:	687a      	ldr	r2, [r7, #4]
 8004a0c:	6892      	ldr	r2, [r2, #8]
 8004a0e:	0211      	lsls	r1, r2, #8
 8004a10:	687a      	ldr	r2, [r7, #4]
 8004a12:	6912      	ldr	r2, [r2, #16]
 8004a14:	0852      	lsrs	r2, r2, #1
 8004a16:	3a01      	subs	r2, #1
 8004a18:	0552      	lsls	r2, r2, #21
 8004a1a:	4311      	orrs	r1, r2
 8004a1c:	687a      	ldr	r2, [r7, #4]
 8004a1e:	6852      	ldr	r2, [r2, #4]
 8004a20:	3a01      	subs	r2, #1
 8004a22:	0112      	lsls	r2, r2, #4
 8004a24:	430a      	orrs	r2, r1
 8004a26:	4921      	ldr	r1, [pc, #132]	@ (8004aac <RCCEx_PLLSAI1_Config+0x1d8>)
 8004a28:	4313      	orrs	r3, r2
 8004a2a:	610b      	str	r3, [r1, #16]
 8004a2c:	e014      	b.n	8004a58 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004a2e:	4b1f      	ldr	r3, [pc, #124]	@ (8004aac <RCCEx_PLLSAI1_Config+0x1d8>)
 8004a30:	691a      	ldr	r2, [r3, #16]
 8004a32:	4b21      	ldr	r3, [pc, #132]	@ (8004ab8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004a34:	4013      	ands	r3, r2
 8004a36:	687a      	ldr	r2, [r7, #4]
 8004a38:	6892      	ldr	r2, [r2, #8]
 8004a3a:	0211      	lsls	r1, r2, #8
 8004a3c:	687a      	ldr	r2, [r7, #4]
 8004a3e:	6952      	ldr	r2, [r2, #20]
 8004a40:	0852      	lsrs	r2, r2, #1
 8004a42:	3a01      	subs	r2, #1
 8004a44:	0652      	lsls	r2, r2, #25
 8004a46:	4311      	orrs	r1, r2
 8004a48:	687a      	ldr	r2, [r7, #4]
 8004a4a:	6852      	ldr	r2, [r2, #4]
 8004a4c:	3a01      	subs	r2, #1
 8004a4e:	0112      	lsls	r2, r2, #4
 8004a50:	430a      	orrs	r2, r1
 8004a52:	4916      	ldr	r1, [pc, #88]	@ (8004aac <RCCEx_PLLSAI1_Config+0x1d8>)
 8004a54:	4313      	orrs	r3, r2
 8004a56:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004a58:	4b14      	ldr	r3, [pc, #80]	@ (8004aac <RCCEx_PLLSAI1_Config+0x1d8>)
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	4a13      	ldr	r2, [pc, #76]	@ (8004aac <RCCEx_PLLSAI1_Config+0x1d8>)
 8004a5e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004a62:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a64:	f7fd f9da 	bl	8001e1c <HAL_GetTick>
 8004a68:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004a6a:	e009      	b.n	8004a80 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004a6c:	f7fd f9d6 	bl	8001e1c <HAL_GetTick>
 8004a70:	4602      	mov	r2, r0
 8004a72:	68bb      	ldr	r3, [r7, #8]
 8004a74:	1ad3      	subs	r3, r2, r3
 8004a76:	2b02      	cmp	r3, #2
 8004a78:	d902      	bls.n	8004a80 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8004a7a:	2303      	movs	r3, #3
 8004a7c:	73fb      	strb	r3, [r7, #15]
          break;
 8004a7e:	e005      	b.n	8004a8c <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004a80:	4b0a      	ldr	r3, [pc, #40]	@ (8004aac <RCCEx_PLLSAI1_Config+0x1d8>)
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d0ef      	beq.n	8004a6c <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8004a8c:	7bfb      	ldrb	r3, [r7, #15]
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d106      	bne.n	8004aa0 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004a92:	4b06      	ldr	r3, [pc, #24]	@ (8004aac <RCCEx_PLLSAI1_Config+0x1d8>)
 8004a94:	691a      	ldr	r2, [r3, #16]
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	699b      	ldr	r3, [r3, #24]
 8004a9a:	4904      	ldr	r1, [pc, #16]	@ (8004aac <RCCEx_PLLSAI1_Config+0x1d8>)
 8004a9c:	4313      	orrs	r3, r2
 8004a9e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004aa0:	7bfb      	ldrb	r3, [r7, #15]
}
 8004aa2:	4618      	mov	r0, r3
 8004aa4:	3710      	adds	r7, #16
 8004aa6:	46bd      	mov	sp, r7
 8004aa8:	bd80      	pop	{r7, pc}
 8004aaa:	bf00      	nop
 8004aac:	40021000 	.word	0x40021000
 8004ab0:	07ff800f 	.word	0x07ff800f
 8004ab4:	ff9f800f 	.word	0xff9f800f
 8004ab8:	f9ff800f 	.word	0xf9ff800f

08004abc <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004abc:	b580      	push	{r7, lr}
 8004abe:	b084      	sub	sp, #16
 8004ac0:	af00      	add	r7, sp, #0
 8004ac2:	6078      	str	r0, [r7, #4]
 8004ac4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004ac6:	2300      	movs	r3, #0
 8004ac8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004aca:	4b72      	ldr	r3, [pc, #456]	@ (8004c94 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004acc:	68db      	ldr	r3, [r3, #12]
 8004ace:	f003 0303 	and.w	r3, r3, #3
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d00e      	beq.n	8004af4 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004ad6:	4b6f      	ldr	r3, [pc, #444]	@ (8004c94 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004ad8:	68db      	ldr	r3, [r3, #12]
 8004ada:	f003 0203 	and.w	r2, r3, #3
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	429a      	cmp	r2, r3
 8004ae4:	d103      	bne.n	8004aee <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
       ||
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d142      	bne.n	8004b74 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8004aee:	2301      	movs	r3, #1
 8004af0:	73fb      	strb	r3, [r7, #15]
 8004af2:	e03f      	b.n	8004b74 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	2b03      	cmp	r3, #3
 8004afa:	d018      	beq.n	8004b2e <RCCEx_PLLSAI2_Config+0x72>
 8004afc:	2b03      	cmp	r3, #3
 8004afe:	d825      	bhi.n	8004b4c <RCCEx_PLLSAI2_Config+0x90>
 8004b00:	2b01      	cmp	r3, #1
 8004b02:	d002      	beq.n	8004b0a <RCCEx_PLLSAI2_Config+0x4e>
 8004b04:	2b02      	cmp	r3, #2
 8004b06:	d009      	beq.n	8004b1c <RCCEx_PLLSAI2_Config+0x60>
 8004b08:	e020      	b.n	8004b4c <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004b0a:	4b62      	ldr	r3, [pc, #392]	@ (8004c94 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	f003 0302 	and.w	r3, r3, #2
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d11d      	bne.n	8004b52 <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 8004b16:	2301      	movs	r3, #1
 8004b18:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004b1a:	e01a      	b.n	8004b52 <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004b1c:	4b5d      	ldr	r3, [pc, #372]	@ (8004c94 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d116      	bne.n	8004b56 <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8004b28:	2301      	movs	r3, #1
 8004b2a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004b2c:	e013      	b.n	8004b56 <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004b2e:	4b59      	ldr	r3, [pc, #356]	@ (8004c94 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d10f      	bne.n	8004b5a <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004b3a:	4b56      	ldr	r3, [pc, #344]	@ (8004c94 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d109      	bne.n	8004b5a <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 8004b46:	2301      	movs	r3, #1
 8004b48:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004b4a:	e006      	b.n	8004b5a <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8004b4c:	2301      	movs	r3, #1
 8004b4e:	73fb      	strb	r3, [r7, #15]
      break;
 8004b50:	e004      	b.n	8004b5c <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8004b52:	bf00      	nop
 8004b54:	e002      	b.n	8004b5c <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8004b56:	bf00      	nop
 8004b58:	e000      	b.n	8004b5c <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8004b5a:	bf00      	nop
    }

    if(status == HAL_OK)
 8004b5c:	7bfb      	ldrb	r3, [r7, #15]
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d108      	bne.n	8004b74 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8004b62:	4b4c      	ldr	r3, [pc, #304]	@ (8004c94 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004b64:	68db      	ldr	r3, [r3, #12]
 8004b66:	f023 0203 	bic.w	r2, r3, #3
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	4949      	ldr	r1, [pc, #292]	@ (8004c94 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004b70:	4313      	orrs	r3, r2
 8004b72:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8004b74:	7bfb      	ldrb	r3, [r7, #15]
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	f040 8086 	bne.w	8004c88 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004b7c:	4b45      	ldr	r3, [pc, #276]	@ (8004c94 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	4a44      	ldr	r2, [pc, #272]	@ (8004c94 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004b82:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004b86:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004b88:	f7fd f948 	bl	8001e1c <HAL_GetTick>
 8004b8c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004b8e:	e009      	b.n	8004ba4 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004b90:	f7fd f944 	bl	8001e1c <HAL_GetTick>
 8004b94:	4602      	mov	r2, r0
 8004b96:	68bb      	ldr	r3, [r7, #8]
 8004b98:	1ad3      	subs	r3, r2, r3
 8004b9a:	2b02      	cmp	r3, #2
 8004b9c:	d902      	bls.n	8004ba4 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8004b9e:	2303      	movs	r3, #3
 8004ba0:	73fb      	strb	r3, [r7, #15]
        break;
 8004ba2:	e005      	b.n	8004bb0 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004ba4:	4b3b      	ldr	r3, [pc, #236]	@ (8004c94 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d1ef      	bne.n	8004b90 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8004bb0:	7bfb      	ldrb	r3, [r7, #15]
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d168      	bne.n	8004c88 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004bb6:	683b      	ldr	r3, [r7, #0]
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d113      	bne.n	8004be4 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004bbc:	4b35      	ldr	r3, [pc, #212]	@ (8004c94 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004bbe:	695a      	ldr	r2, [r3, #20]
 8004bc0:	4b35      	ldr	r3, [pc, #212]	@ (8004c98 <RCCEx_PLLSAI2_Config+0x1dc>)
 8004bc2:	4013      	ands	r3, r2
 8004bc4:	687a      	ldr	r2, [r7, #4]
 8004bc6:	6892      	ldr	r2, [r2, #8]
 8004bc8:	0211      	lsls	r1, r2, #8
 8004bca:	687a      	ldr	r2, [r7, #4]
 8004bcc:	68d2      	ldr	r2, [r2, #12]
 8004bce:	06d2      	lsls	r2, r2, #27
 8004bd0:	4311      	orrs	r1, r2
 8004bd2:	687a      	ldr	r2, [r7, #4]
 8004bd4:	6852      	ldr	r2, [r2, #4]
 8004bd6:	3a01      	subs	r2, #1
 8004bd8:	0112      	lsls	r2, r2, #4
 8004bda:	430a      	orrs	r2, r1
 8004bdc:	492d      	ldr	r1, [pc, #180]	@ (8004c94 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004bde:	4313      	orrs	r3, r2
 8004be0:	614b      	str	r3, [r1, #20]
 8004be2:	e02d      	b.n	8004c40 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8004be4:	683b      	ldr	r3, [r7, #0]
 8004be6:	2b01      	cmp	r3, #1
 8004be8:	d115      	bne.n	8004c16 <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004bea:	4b2a      	ldr	r3, [pc, #168]	@ (8004c94 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004bec:	695a      	ldr	r2, [r3, #20]
 8004bee:	4b2b      	ldr	r3, [pc, #172]	@ (8004c9c <RCCEx_PLLSAI2_Config+0x1e0>)
 8004bf0:	4013      	ands	r3, r2
 8004bf2:	687a      	ldr	r2, [r7, #4]
 8004bf4:	6892      	ldr	r2, [r2, #8]
 8004bf6:	0211      	lsls	r1, r2, #8
 8004bf8:	687a      	ldr	r2, [r7, #4]
 8004bfa:	6912      	ldr	r2, [r2, #16]
 8004bfc:	0852      	lsrs	r2, r2, #1
 8004bfe:	3a01      	subs	r2, #1
 8004c00:	0552      	lsls	r2, r2, #21
 8004c02:	4311      	orrs	r1, r2
 8004c04:	687a      	ldr	r2, [r7, #4]
 8004c06:	6852      	ldr	r2, [r2, #4]
 8004c08:	3a01      	subs	r2, #1
 8004c0a:	0112      	lsls	r2, r2, #4
 8004c0c:	430a      	orrs	r2, r1
 8004c0e:	4921      	ldr	r1, [pc, #132]	@ (8004c94 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004c10:	4313      	orrs	r3, r2
 8004c12:	614b      	str	r3, [r1, #20]
 8004c14:	e014      	b.n	8004c40 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004c16:	4b1f      	ldr	r3, [pc, #124]	@ (8004c94 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004c18:	695a      	ldr	r2, [r3, #20]
 8004c1a:	4b21      	ldr	r3, [pc, #132]	@ (8004ca0 <RCCEx_PLLSAI2_Config+0x1e4>)
 8004c1c:	4013      	ands	r3, r2
 8004c1e:	687a      	ldr	r2, [r7, #4]
 8004c20:	6892      	ldr	r2, [r2, #8]
 8004c22:	0211      	lsls	r1, r2, #8
 8004c24:	687a      	ldr	r2, [r7, #4]
 8004c26:	6952      	ldr	r2, [r2, #20]
 8004c28:	0852      	lsrs	r2, r2, #1
 8004c2a:	3a01      	subs	r2, #1
 8004c2c:	0652      	lsls	r2, r2, #25
 8004c2e:	4311      	orrs	r1, r2
 8004c30:	687a      	ldr	r2, [r7, #4]
 8004c32:	6852      	ldr	r2, [r2, #4]
 8004c34:	3a01      	subs	r2, #1
 8004c36:	0112      	lsls	r2, r2, #4
 8004c38:	430a      	orrs	r2, r1
 8004c3a:	4916      	ldr	r1, [pc, #88]	@ (8004c94 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004c3c:	4313      	orrs	r3, r2
 8004c3e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004c40:	4b14      	ldr	r3, [pc, #80]	@ (8004c94 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	4a13      	ldr	r2, [pc, #76]	@ (8004c94 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004c46:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004c4a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c4c:	f7fd f8e6 	bl	8001e1c <HAL_GetTick>
 8004c50:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004c52:	e009      	b.n	8004c68 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004c54:	f7fd f8e2 	bl	8001e1c <HAL_GetTick>
 8004c58:	4602      	mov	r2, r0
 8004c5a:	68bb      	ldr	r3, [r7, #8]
 8004c5c:	1ad3      	subs	r3, r2, r3
 8004c5e:	2b02      	cmp	r3, #2
 8004c60:	d902      	bls.n	8004c68 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8004c62:	2303      	movs	r3, #3
 8004c64:	73fb      	strb	r3, [r7, #15]
          break;
 8004c66:	e005      	b.n	8004c74 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004c68:	4b0a      	ldr	r3, [pc, #40]	@ (8004c94 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d0ef      	beq.n	8004c54 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8004c74:	7bfb      	ldrb	r3, [r7, #15]
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d106      	bne.n	8004c88 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004c7a:	4b06      	ldr	r3, [pc, #24]	@ (8004c94 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004c7c:	695a      	ldr	r2, [r3, #20]
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	699b      	ldr	r3, [r3, #24]
 8004c82:	4904      	ldr	r1, [pc, #16]	@ (8004c94 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004c84:	4313      	orrs	r3, r2
 8004c86:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004c88:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c8a:	4618      	mov	r0, r3
 8004c8c:	3710      	adds	r7, #16
 8004c8e:	46bd      	mov	sp, r7
 8004c90:	bd80      	pop	{r7, pc}
 8004c92:	bf00      	nop
 8004c94:	40021000 	.word	0x40021000
 8004c98:	07ff800f 	.word	0x07ff800f
 8004c9c:	ff9f800f 	.word	0xff9f800f
 8004ca0:	f9ff800f 	.word	0xf9ff800f

08004ca4 <RCCEx_GetSAIxPeriphCLKFreq>:
#endif /* RCC_PLLSAI2_SUPPORT */

#if defined(SAI1)

static uint32_t RCCEx_GetSAIxPeriphCLKFreq(uint32_t PeriphClk, uint32_t InputFrequency)
{
 8004ca4:	b480      	push	{r7}
 8004ca6:	b089      	sub	sp, #36	@ 0x24
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	6078      	str	r0, [r7, #4]
 8004cac:	6039      	str	r1, [r7, #0]
  uint32_t frequency = 0U;
 8004cae:	2300      	movs	r3, #0
 8004cb0:	61fb      	str	r3, [r7, #28]
  uint32_t srcclk = 0U;
 8004cb2:	2300      	movs	r3, #0
 8004cb4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, plln;    /* no init needed */
#if defined(RCC_PLLP_SUPPORT)
  uint32_t pllp = 0U;
 8004cb6:	2300      	movs	r3, #0
 8004cb8:	617b      	str	r3, [r7, #20]
#endif /* RCC_PLLP_SUPPORT */

  /* Handle SAIs */
  if(PeriphClk == RCC_PERIPHCLK_SAI1)
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004cc0:	d10b      	bne.n	8004cda <RCCEx_GetSAIxPeriphCLKFreq+0x36>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 8004cc2:	4b7e      	ldr	r3, [pc, #504]	@ (8004ebc <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8004cc4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004cc8:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 8004ccc:	61bb      	str	r3, [r7, #24]
    if(srcclk == RCC_SAI1CLKSOURCE_PIN)
 8004cce:	69bb      	ldr	r3, [r7, #24]
 8004cd0:	2b60      	cmp	r3, #96	@ 0x60
 8004cd2:	d112      	bne.n	8004cfa <RCCEx_GetSAIxPeriphCLKFreq+0x56>
    {
      frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8004cd4:	4b7a      	ldr	r3, [pc, #488]	@ (8004ec0 <RCCEx_GetSAIxPeriphCLKFreq+0x21c>)
 8004cd6:	61fb      	str	r3, [r7, #28]
 8004cd8:	e00f      	b.n	8004cfa <RCCEx_GetSAIxPeriphCLKFreq+0x56>
    /* Else, PLL clock output to check below */
  }
#if defined(SAI2)
  else
  {
    if(PeriphClk == RCC_PERIPHCLK_SAI2)
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004ce0:	d10b      	bne.n	8004cfa <RCCEx_GetSAIxPeriphCLKFreq+0x56>
    {
      srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 8004ce2:	4b76      	ldr	r3, [pc, #472]	@ (8004ebc <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8004ce4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004ce8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004cec:	61bb      	str	r3, [r7, #24]
      if(srcclk == RCC_SAI2CLKSOURCE_PIN)
 8004cee:	69bb      	ldr	r3, [r7, #24]
 8004cf0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004cf4:	d101      	bne.n	8004cfa <RCCEx_GetSAIxPeriphCLKFreq+0x56>
      {
        frequency = EXTERNAL_SAI2_CLOCK_VALUE;
 8004cf6:	4b72      	ldr	r3, [pc, #456]	@ (8004ec0 <RCCEx_GetSAIxPeriphCLKFreq+0x21c>)
 8004cf8:	61fb      	str	r3, [r7, #28]
      /* Else, PLL clock output to check below */
    }
  }
#endif /* SAI2 */

  if(frequency == 0U)
 8004cfa:	69fb      	ldr	r3, [r7, #28]
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	f040 80d6 	bne.w	8004eae <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
  {
    pllvco = InputFrequency;
 8004d02:	683b      	ldr	r3, [r7, #0]
 8004d04:	613b      	str	r3, [r7, #16]

#if defined(SAI2)
    if((srcclk == RCC_SAI1CLKSOURCE_PLL) || (srcclk == RCC_SAI2CLKSOURCE_PLL))
 8004d06:	69bb      	ldr	r3, [r7, #24]
 8004d08:	2b40      	cmp	r3, #64	@ 0x40
 8004d0a:	d003      	beq.n	8004d14 <RCCEx_GetSAIxPeriphCLKFreq+0x70>
 8004d0c:	69bb      	ldr	r3, [r7, #24]
 8004d0e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004d12:	d13b      	bne.n	8004d8c <RCCEx_GetSAIxPeriphCLKFreq+0xe8>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8004d14:	4b69      	ldr	r3, [pc, #420]	@ (8004ebc <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004d1c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004d20:	f040 80c4 	bne.w	8004eac <RCCEx_GetSAIxPeriphCLKFreq+0x208>
 8004d24:	4b65      	ldr	r3, [pc, #404]	@ (8004ebc <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8004d26:	68db      	ldr	r3, [r3, #12]
 8004d28:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	f000 80bd 	beq.w	8004eac <RCCEx_GetSAIxPeriphCLKFreq+0x208>
      {
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8004d32:	4b62      	ldr	r3, [pc, #392]	@ (8004ebc <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8004d34:	68db      	ldr	r3, [r3, #12]
 8004d36:	091b      	lsrs	r3, r3, #4
 8004d38:	f003 030f 	and.w	r3, r3, #15
 8004d3c:	3301      	adds	r3, #1
 8004d3e:	693a      	ldr	r2, [r7, #16]
 8004d40:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d44:	613b      	str	r3, [r7, #16]
        /* f(PLLSAI3CLK) = f(VCO input) * PLLN / PLLP */
        plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8004d46:	4b5d      	ldr	r3, [pc, #372]	@ (8004ebc <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8004d48:	68db      	ldr	r3, [r3, #12]
 8004d4a:	0a1b      	lsrs	r3, r3, #8
 8004d4c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004d50:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
 8004d52:	4b5a      	ldr	r3, [pc, #360]	@ (8004ebc <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8004d54:	68db      	ldr	r3, [r3, #12]
 8004d56:	0edb      	lsrs	r3, r3, #27
 8004d58:	f003 031f 	and.w	r3, r3, #31
 8004d5c:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 8004d5e:	697b      	ldr	r3, [r7, #20]
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d10a      	bne.n	8004d7a <RCCEx_GetSAIxPeriphCLKFreq+0xd6>
        {
          if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 8004d64:	4b55      	ldr	r3, [pc, #340]	@ (8004ebc <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8004d66:	68db      	ldr	r3, [r3, #12]
 8004d68:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d002      	beq.n	8004d76 <RCCEx_GetSAIxPeriphCLKFreq+0xd2>
          {
            pllp = 17U;
 8004d70:	2311      	movs	r3, #17
 8004d72:	617b      	str	r3, [r7, #20]
 8004d74:	e001      	b.n	8004d7a <RCCEx_GetSAIxPeriphCLKFreq+0xd6>
          }
          else
          {
            pllp = 7U;
 8004d76:	2307      	movs	r3, #7
 8004d78:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8004d7a:	693b      	ldr	r3, [r7, #16]
 8004d7c:	68fa      	ldr	r2, [r7, #12]
 8004d7e:	fb03 f202 	mul.w	r2, r3, r2
 8004d82:	697b      	ldr	r3, [r7, #20]
 8004d84:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d88:	61fb      	str	r3, [r7, #28]
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8004d8a:	e08f      	b.n	8004eac <RCCEx_GetSAIxPeriphCLKFreq+0x208>
      }
    }
    else if(srcclk == 0U)  /* RCC_SAI1CLKSOURCE_PLLSAI1 || RCC_SAI2CLKSOURCE_PLLSAI1 */
 8004d8c:	69bb      	ldr	r3, [r7, #24]
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d13a      	bne.n	8004e08 <RCCEx_GetSAIxPeriphCLKFreq+0x164>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_SAI1CLK) != 0U))
 8004d92:	4b4a      	ldr	r3, [pc, #296]	@ (8004ebc <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004d9a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004d9e:	f040 8086 	bne.w	8004eae <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
 8004da2:	4b46      	ldr	r3, [pc, #280]	@ (8004ebc <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8004da4:	691b      	ldr	r3, [r3, #16]
 8004da6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d07f      	beq.n	8004eae <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* PLLSAI1M exists: apply PLLSAI1M divider for PLLSAI1 output computation */
        /* f(PLLSAI1 Source) / PLLSAI1M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 8004dae:	4b43      	ldr	r3, [pc, #268]	@ (8004ebc <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8004db0:	691b      	ldr	r3, [r3, #16]
 8004db2:	091b      	lsrs	r3, r3, #4
 8004db4:	f003 030f 	and.w	r3, r3, #15
 8004db8:	3301      	adds	r3, #1
 8004dba:	693a      	ldr	r2, [r7, #16]
 8004dbc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004dc0:	613b      	str	r3, [r7, #16]
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
#endif
        /* f(PLLSAI1CLK) = f(VCOSAI1 input) * PLLSAI1N / PLLSAI1P */
        plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8004dc2:	4b3e      	ldr	r3, [pc, #248]	@ (8004ebc <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8004dc4:	691b      	ldr	r3, [r3, #16]
 8004dc6:	0a1b      	lsrs	r3, r3, #8
 8004dc8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004dcc:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1PDIV) >> RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos;
 8004dce:	4b3b      	ldr	r3, [pc, #236]	@ (8004ebc <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8004dd0:	691b      	ldr	r3, [r3, #16]
 8004dd2:	0edb      	lsrs	r3, r3, #27
 8004dd4:	f003 031f 	and.w	r3, r3, #31
 8004dd8:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 8004dda:	697b      	ldr	r3, [r7, #20]
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d10a      	bne.n	8004df6 <RCCEx_GetSAIxPeriphCLKFreq+0x152>
        {
          if(READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1P) != 0U)
 8004de0:	4b36      	ldr	r3, [pc, #216]	@ (8004ebc <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8004de2:	691b      	ldr	r3, [r3, #16]
 8004de4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d002      	beq.n	8004df2 <RCCEx_GetSAIxPeriphCLKFreq+0x14e>
          {
            pllp = 17U;
 8004dec:	2311      	movs	r3, #17
 8004dee:	617b      	str	r3, [r7, #20]
 8004df0:	e001      	b.n	8004df6 <RCCEx_GetSAIxPeriphCLKFreq+0x152>
          }
          else
          {
            pllp = 7U;
 8004df2:	2307      	movs	r3, #7
 8004df4:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8004df6:	693b      	ldr	r3, [r7, #16]
 8004df8:	68fa      	ldr	r2, [r7, #12]
 8004dfa:	fb03 f202 	mul.w	r2, r3, r2
 8004dfe:	697b      	ldr	r3, [r7, #20]
 8004e00:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e04:	61fb      	str	r3, [r7, #28]
 8004e06:	e052      	b.n	8004eae <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      }
    }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    else if((srcclk == RCC_SAI1CLKSOURCE_HSI) || (srcclk == RCC_SAI2CLKSOURCE_HSI))
 8004e08:	69bb      	ldr	r3, [r7, #24]
 8004e0a:	2b80      	cmp	r3, #128	@ 0x80
 8004e0c:	d003      	beq.n	8004e16 <RCCEx_GetSAIxPeriphCLKFreq+0x172>
 8004e0e:	69bb      	ldr	r3, [r7, #24]
 8004e10:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004e14:	d109      	bne.n	8004e2a <RCCEx_GetSAIxPeriphCLKFreq+0x186>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004e16:	4b29      	ldr	r3, [pc, #164]	@ (8004ebc <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004e1e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004e22:	d144      	bne.n	8004eae <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      {
        frequency = HSI_VALUE;
 8004e24:	4b27      	ldr	r3, [pc, #156]	@ (8004ec4 <RCCEx_GetSAIxPeriphCLKFreq+0x220>)
 8004e26:	61fb      	str	r3, [r7, #28]
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004e28:	e041      	b.n	8004eae <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
    }
#endif /* SAI2 */

#if defined(RCC_PLLSAI2_SUPPORT)

    else if((srcclk == RCC_SAI1CLKSOURCE_PLLSAI2) || (srcclk == RCC_SAI2CLKSOURCE_PLLSAI2))
 8004e2a:	69bb      	ldr	r3, [r7, #24]
 8004e2c:	2b20      	cmp	r3, #32
 8004e2e:	d003      	beq.n	8004e38 <RCCEx_GetSAIxPeriphCLKFreq+0x194>
 8004e30:	69bb      	ldr	r3, [r7, #24]
 8004e32:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004e36:	d13a      	bne.n	8004eae <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI2RDY) && (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_SAI2CLK) != 0U))
 8004e38:	4b20      	ldr	r3, [pc, #128]	@ (8004ebc <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004e40:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004e44:	d133      	bne.n	8004eae <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
 8004e46:	4b1d      	ldr	r3, [pc, #116]	@ (8004ebc <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8004e48:	695b      	ldr	r3, [r3, #20]
 8004e4a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d02d      	beq.n	8004eae <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* PLLSAI2M exists: apply PLLSAI2M divider for PLLSAI2 output computation */
        /* f(PLLSAI2 Source) / PLLSAI2M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2M) >> RCC_PLLSAI2CFGR_PLLSAI2M_Pos) + 1U));
 8004e52:	4b1a      	ldr	r3, [pc, #104]	@ (8004ebc <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8004e54:	695b      	ldr	r3, [r3, #20]
 8004e56:	091b      	lsrs	r3, r3, #4
 8004e58:	f003 030f 	and.w	r3, r3, #15
 8004e5c:	3301      	adds	r3, #1
 8004e5e:	693a      	ldr	r2, [r7, #16]
 8004e60:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e64:	613b      	str	r3, [r7, #16]
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
#endif
        /* f(PLLSAI2CLK) = f(VCOSAI2 input) * PLLSAI2N / PLLSAI2P */
        plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 8004e66:	4b15      	ldr	r3, [pc, #84]	@ (8004ebc <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8004e68:	695b      	ldr	r3, [r3, #20]
 8004e6a:	0a1b      	lsrs	r3, r3, #8
 8004e6c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004e70:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2PDIV) >> RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos;
 8004e72:	4b12      	ldr	r3, [pc, #72]	@ (8004ebc <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8004e74:	695b      	ldr	r3, [r3, #20]
 8004e76:	0edb      	lsrs	r3, r3, #27
 8004e78:	f003 031f 	and.w	r3, r3, #31
 8004e7c:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 8004e7e:	697b      	ldr	r3, [r7, #20]
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d10a      	bne.n	8004e9a <RCCEx_GetSAIxPeriphCLKFreq+0x1f6>
        {
          if(READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2P) != 0U)
 8004e84:	4b0d      	ldr	r3, [pc, #52]	@ (8004ebc <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8004e86:	695b      	ldr	r3, [r3, #20]
 8004e88:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d002      	beq.n	8004e96 <RCCEx_GetSAIxPeriphCLKFreq+0x1f2>
          {
            pllp = 17U;
 8004e90:	2311      	movs	r3, #17
 8004e92:	617b      	str	r3, [r7, #20]
 8004e94:	e001      	b.n	8004e9a <RCCEx_GetSAIxPeriphCLKFreq+0x1f6>
          }
          else
          {
            pllp = 7U;
 8004e96:	2307      	movs	r3, #7
 8004e98:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8004e9a:	693b      	ldr	r3, [r7, #16]
 8004e9c:	68fa      	ldr	r2, [r7, #12]
 8004e9e:	fb03 f202 	mul.w	r2, r3, r2
 8004ea2:	697b      	ldr	r3, [r7, #20]
 8004ea4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ea8:	61fb      	str	r3, [r7, #28]
 8004eaa:	e000      	b.n	8004eae <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8004eac:	bf00      	nop
      /* No clock source, frequency default init at 0 */
    }
  }


  return frequency;
 8004eae:	69fb      	ldr	r3, [r7, #28]
}
 8004eb0:	4618      	mov	r0, r3
 8004eb2:	3724      	adds	r7, #36	@ 0x24
 8004eb4:	46bd      	mov	sp, r7
 8004eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eba:	4770      	bx	lr
 8004ebc:	40021000 	.word	0x40021000
 8004ec0:	001fff68 	.word	0x001fff68
 8004ec4:	00f42400 	.word	0x00f42400

08004ec8 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8004ec8:	b580      	push	{r7, lr}
 8004eca:	b08a      	sub	sp, #40	@ 0x28
 8004ecc:	af00      	add	r7, sp, #0
 8004ece:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade, unitsize;
  uint32_t tickstart;
#endif

  /* Check the SD handle allocation */
  if(hsd == NULL)
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d101      	bne.n	8004eda <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8004ed6:	2301      	movs	r3, #1
 8004ed8:	e083      	b.n	8004fe2 <HAL_SD_Init+0x11a>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8004ee0:	b2db      	uxtb	r3, r3
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d105      	bne.n	8004ef2 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	2200      	movs	r2, #0
 8004eea:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8004eec:	6878      	ldr	r0, [r7, #4]
 8004eee:	f7fc fdd5 	bl	8001a9c <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	2203      	movs	r2, #3
 8004ef6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8004efa:	6878      	ldr	r0, [r7, #4]
 8004efc:	f000 f876 	bl	8004fec <HAL_SD_InitCard>
 8004f00:	4603      	mov	r3, r0
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d001      	beq.n	8004f0a <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8004f06:	2301      	movs	r3, #1
 8004f08:	e06b      	b.n	8004fe2 <HAL_SD_Init+0x11a>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  if( HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 8004f0a:	f107 0308 	add.w	r3, r7, #8
 8004f0e:	4619      	mov	r1, r3
 8004f10:	6878      	ldr	r0, [r7, #4]
 8004f12:	f000 fdc1 	bl	8005a98 <HAL_SD_GetCardStatus>
 8004f16:	4603      	mov	r3, r0
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d001      	beq.n	8004f20 <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 8004f1c:	2301      	movs	r3, #1
 8004f1e:	e060      	b.n	8004fe2 <HAL_SD_Init+0x11a>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 8004f20:	7e3b      	ldrb	r3, [r7, #24]
 8004f22:	b2db      	uxtb	r3, r3
 8004f24:	627b      	str	r3, [r7, #36]	@ 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 8004f26:	7e7b      	ldrb	r3, [r7, #25]
 8004f28:	b2db      	uxtb	r3, r3
 8004f2a:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f30:	2b01      	cmp	r3, #1
 8004f32:	d10a      	bne.n	8004f4a <HAL_SD_Init+0x82>
 8004f34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d102      	bne.n	8004f40 <HAL_SD_Init+0x78>
 8004f3a:	6a3b      	ldr	r3, [r7, #32]
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d004      	beq.n	8004f4a <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004f46:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004f48:	e00b      	b.n	8004f62 <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f4e:	2b01      	cmp	r3, #1
 8004f50:	d104      	bne.n	8004f5c <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004f58:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004f5a:	e002      	b.n	8004f62 <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	2200      	movs	r2, #0
 8004f60:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

  }
  /* Configure the bus wide */
  if(HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	68db      	ldr	r3, [r3, #12]
 8004f66:	4619      	mov	r1, r3
 8004f68:	6878      	ldr	r0, [r7, #4]
 8004f6a:	f000 fe77 	bl	8005c5c <HAL_SD_ConfigWideBusOperation>
 8004f6e:	4603      	mov	r3, r0
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d001      	beq.n	8004f78 <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 8004f74:	2301      	movs	r3, #1
 8004f76:	e034      	b.n	8004fe2 <HAL_SD_Init+0x11a>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 8004f78:	f7fc ff50 	bl	8001e1c <HAL_GetTick>
 8004f7c:	61f8      	str	r0, [r7, #28]
  while((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8004f7e:	e014      	b.n	8004faa <HAL_SD_Init+0xe2>
  {
    if((HAL_GetTick()-tickstart) >=  SDMMC_DATATIMEOUT)
 8004f80:	f7fc ff4c 	bl	8001e1c <HAL_GetTick>
 8004f84:	4602      	mov	r2, r0
 8004f86:	69fb      	ldr	r3, [r7, #28]
 8004f88:	1ad3      	subs	r3, r2, r3
 8004f8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f8e:	d10c      	bne.n	8004faa <HAL_SD_Init+0xe2>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8004f96:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State= HAL_SD_STATE_READY;
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	2201      	movs	r2, #1
 8004f9c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	2200      	movs	r2, #0
 8004fa4:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_TIMEOUT;
 8004fa6:	2303      	movs	r3, #3
 8004fa8:	e01b      	b.n	8004fe2 <HAL_SD_Init+0x11a>
  while((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8004faa:	6878      	ldr	r0, [r7, #4]
 8004fac:	f000 ff6a 	bl	8005e84 <HAL_SD_GetCardState>
 8004fb0:	4603      	mov	r3, r0
 8004fb2:	2b04      	cmp	r3, #4
 8004fb4:	d1e4      	bne.n	8004f80 <HAL_SD_Init+0xb8>
    }
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* Configure the bus wide with the specified value in the SD_HandleTypeDef */
  if(HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	68db      	ldr	r3, [r3, #12]
 8004fba:	4619      	mov	r1, r3
 8004fbc:	6878      	ldr	r0, [r7, #4]
 8004fbe:	f000 fe4d 	bl	8005c5c <HAL_SD_ConfigWideBusOperation>
 8004fc2:	4603      	mov	r3, r0
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d001      	beq.n	8004fcc <HAL_SD_Init+0x104>
  {
    return HAL_ERROR;
 8004fc8:	2301      	movs	r3, #1
 8004fca:	e00a      	b.n	8004fe2 <HAL_SD_Init+0x11a>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	2200      	movs	r2, #0
 8004fd0:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	2200      	movs	r2, #0
 8004fd6:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	2201      	movs	r2, #1
 8004fdc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004fe0:	2300      	movs	r3, #0
}
 8004fe2:	4618      	mov	r0, r3
 8004fe4:	3728      	adds	r7, #40	@ 0x28
 8004fe6:	46bd      	mov	sp, r7
 8004fe8:	bd80      	pop	{r7, pc}
	...

08004fec <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8004fec:	b5b0      	push	{r4, r5, r7, lr}
 8004fee:	b08e      	sub	sp, #56	@ 0x38
 8004ff0:	af04      	add	r7, sp, #16
 8004ff2:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8004ff4:	2300      	movs	r3, #0
 8004ff6:	60bb      	str	r3, [r7, #8]
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8004ff8:	2300      	movs	r3, #0
 8004ffa:	60fb      	str	r3, [r7, #12]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8004ffc:	2300      	movs	r3, #0
 8004ffe:	613b      	str	r3, [r7, #16]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8005000:	2300      	movs	r3, #0
 8005002:	617b      	str	r3, [r7, #20]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC1);
 8005004:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8005008:	f7fe fd44 	bl	8003a94 <HAL_RCCEx_GetPeriphCLKFreq>
 800500c:	6278      	str	r0, [r7, #36]	@ 0x24
  if (sdmmc_clk == 0U)
 800500e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005010:	2b00      	cmp	r3, #0
 8005012:	d109      	bne.n	8005028 <HAL_SD_InitCard+0x3c>
  {
      hsd->State = HAL_SD_STATE_READY;
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	2201      	movs	r2, #1
 8005018:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8005022:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 8005024:	2301      	movs	r3, #1
 8005026:	e079      	b.n	800511c <HAL_SD_InitCard+0x130>
  }
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  Init.ClockDiv = ((sdmmc_clk / SD_INIT_FREQ) - 2U);
#else
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 8005028:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800502a:	0a1b      	lsrs	r3, r3, #8
 800502c:	4a3d      	ldr	r2, [pc, #244]	@ (8005124 <HAL_SD_InitCard+0x138>)
 800502e:	fba2 2303 	umull	r2, r3, r2, r3
 8005032:	091b      	lsrs	r3, r3, #4
 8005034:	61bb      	str	r3, [r7, #24]
#endif

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  Init.Transceiver = hsd->Init.Transceiver;
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	699b      	ldr	r3, [r3, #24]
 800503a:	61fb      	str	r3, [r7, #28]
  if(hsd->Init.Transceiver == SDMMC_TRANSCEIVER_ENABLE)
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	699b      	ldr	r3, [r3, #24]
 8005040:	2b01      	cmp	r3, #1
 8005042:	d107      	bne.n	8005054 <HAL_SD_InitCard+0x68>
  {
    /* Set Transceiver polarity */
    hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	681a      	ldr	r2, [r3, #0]
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	f042 0210 	orr.w	r2, r2, #16
 8005052:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681d      	ldr	r5, [r3, #0]
 8005058:	466c      	mov	r4, sp
 800505a:	f107 0314 	add.w	r3, r7, #20
 800505e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8005062:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8005066:	f107 0308 	add.w	r3, r7, #8
 800506a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800506c:	4628      	mov	r0, r5
 800506e:	f001 ff7d 	bl	8006f6c <SDMMC_Init>
  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	4618      	mov	r0, r3
 8005078:	f001 ffc0 	bl	8006ffc <SDMMC_PowerState_ON>
  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  sdmmc_clk = sdmmc_clk/(Init.ClockDiv + 2U);
#else
  sdmmc_clk = sdmmc_clk/(2U*Init.ClockDiv);
 800507c:	69bb      	ldr	r3, [r7, #24]
 800507e:	005b      	lsls	r3, r3, #1
 8005080:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005082:	fbb2 f3f3 	udiv	r3, r2, r3
 8005086:	627b      	str	r3, [r7, #36]	@ 0x24
#endif
  HAL_Delay(1U+ (74U*1000U/(sdmmc_clk)));
 8005088:	4a27      	ldr	r2, [pc, #156]	@ (8005128 <HAL_SD_InitCard+0x13c>)
 800508a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800508c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005090:	3301      	adds	r3, #1
 8005092:	4618      	mov	r0, r3
 8005094:	f7fc fece 	bl	8001e34 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8005098:	6878      	ldr	r0, [r7, #4]
 800509a:	f000 ffd3 	bl	8006044 <SD_PowerON>
 800509e:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80050a0:	6a3b      	ldr	r3, [r7, #32]
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d00b      	beq.n	80050be <HAL_SD_InitCard+0xd2>
  {
    hsd->State = HAL_SD_STATE_READY;
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	2201      	movs	r2, #1
 80050aa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80050b2:	6a3b      	ldr	r3, [r7, #32]
 80050b4:	431a      	orrs	r2, r3
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 80050ba:	2301      	movs	r3, #1
 80050bc:	e02e      	b.n	800511c <HAL_SD_InitCard+0x130>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 80050be:	6878      	ldr	r0, [r7, #4]
 80050c0:	f000 ff00 	bl	8005ec4 <SD_InitCard>
 80050c4:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80050c6:	6a3b      	ldr	r3, [r7, #32]
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d00b      	beq.n	80050e4 <HAL_SD_InitCard+0xf8>
  {
    hsd->State = HAL_SD_STATE_READY;
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	2201      	movs	r2, #1
 80050d0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80050d8:	6a3b      	ldr	r3, [r7, #32]
 80050da:	431a      	orrs	r2, r3
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 80050e0:	2301      	movs	r3, #1
 80050e2:	e01b      	b.n	800511c <HAL_SD_InitCard+0x130>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80050ec:	4618      	mov	r0, r3
 80050ee:	f002 f81b 	bl	8007128 <SDMMC_CmdBlockLength>
 80050f2:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80050f4:	6a3b      	ldr	r3, [r7, #32]
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d00f      	beq.n	800511a <HAL_SD_InitCard+0x12e>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	4a0b      	ldr	r2, [pc, #44]	@ (800512c <HAL_SD_InitCard+0x140>)
 8005100:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005106:	6a3b      	ldr	r3, [r7, #32]
 8005108:	431a      	orrs	r2, r3
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	2201      	movs	r2, #1
 8005112:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8005116:	2301      	movs	r3, #1
 8005118:	e000      	b.n	800511c <HAL_SD_InitCard+0x130>
  }

  return HAL_OK;
 800511a:	2300      	movs	r3, #0
}
 800511c:	4618      	mov	r0, r3
 800511e:	3728      	adds	r7, #40	@ 0x28
 8005120:	46bd      	mov	sp, r7
 8005122:	bdb0      	pop	{r4, r5, r7, pc}
 8005124:	014f8b59 	.word	0x014f8b59
 8005128:	00012110 	.word	0x00012110
 800512c:	1fe00fff 	.word	0x1fe00fff

08005130 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd Block Address from where data is to be read
  * @param  NumberOfBlocks Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8005130:	b580      	push	{r7, lr}
 8005132:	b08c      	sub	sp, #48	@ 0x30
 8005134:	af00      	add	r7, sp, #0
 8005136:	60f8      	str	r0, [r7, #12]
 8005138:	60b9      	str	r1, [r7, #8]
 800513a:	607a      	str	r2, [r7, #4]
 800513c:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	62bb      	str	r3, [r7, #40]	@ 0x28

  if(NULL == pData)
 8005142:	68bb      	ldr	r3, [r7, #8]
 8005144:	2b00      	cmp	r3, #0
 8005146:	d107      	bne.n	8005158 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800514c:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8005154:	2301      	movs	r3, #1
 8005156:	e08d      	b.n	8005274 <HAL_SD_ReadBlocks_DMA+0x144>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800515e:	b2db      	uxtb	r3, r3
 8005160:	2b01      	cmp	r3, #1
 8005162:	f040 8086 	bne.w	8005272 <HAL_SD_ReadBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	2200      	movs	r2, #0
 800516a:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800516c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800516e:	683b      	ldr	r3, [r7, #0]
 8005170:	441a      	add	r2, r3
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005176:	429a      	cmp	r2, r3
 8005178:	d907      	bls.n	800518a <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800517e:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 8005186:	2301      	movs	r3, #1
 8005188:	e074      	b.n	8005274 <HAL_SD_ReadBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	2203      	movs	r2, #3
 800518e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	2200      	movs	r2, #0
 8005198:	62da      	str	r2, [r3, #44]	@ 0x2c
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
#else
      hsd->pRxBuffPtr = pData;
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	68ba      	ldr	r2, [r7, #8]
 800519e:	629a      	str	r2, [r3, #40]	@ 0x28
      hsd->RxXferSize = BLOCKSIZE * NumberOfBlocks;
 80051a0:	683b      	ldr	r3, [r7, #0]
 80051a2:	025a      	lsls	r2, r3, #9
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80051ac:	2b01      	cmp	r3, #1
 80051ae:	d002      	beq.n	80051b6 <HAL_SD_ReadBlocks_DMA+0x86>
      {
        add *= 512U;
 80051b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80051b2:	025b      	lsls	r3, r3, #9
 80051b4:	62bb      	str	r3, [r7, #40]	@ 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80051b6:	f04f 33ff 	mov.w	r3, #4294967295
 80051ba:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 80051bc:	683b      	ldr	r3, [r7, #0]
 80051be:	025b      	lsls	r3, r3, #9
 80051c0:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 80051c2:	2390      	movs	r3, #144	@ 0x90
 80051c4:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 80051c6:	2302      	movs	r3, #2
 80051c8:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80051ca:	2300      	movs	r3, #0
 80051cc:	623b      	str	r3, [r7, #32]
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      config.DPSM          = SDMMC_DPSM_DISABLE;
 80051ce:	2300      	movs	r3, #0
 80051d0:	627b      	str	r3, [r7, #36]	@ 0x24
#else
      config.DPSM          = SDMMC_DPSM_ENABLE;
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	f107 0210 	add.w	r2, r7, #16
 80051da:	4611      	mov	r1, r2
 80051dc:	4618      	mov	r0, r3
 80051de:	f001 ff77 	bl	80070d0 <SDMMC_ConfigData>

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)

      __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	68da      	ldr	r2, [r3, #12]
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80051f0:	60da      	str	r2, [r3, #12]
      hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	68ba      	ldr	r2, [r7, #8]
 80051f8:	659a      	str	r2, [r3, #88]	@ 0x58
      hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	2201      	movs	r2, #1
 8005200:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 8005202:	683b      	ldr	r3, [r7, #0]
 8005204:	2b01      	cmp	r3, #1
 8005206:	d90a      	bls.n	800521e <HAL_SD_ReadBlocks_DMA+0xee>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	2282      	movs	r2, #130	@ 0x82
 800520c:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005214:	4618      	mov	r0, r3
 8005216:	f001 ffcd 	bl	80071b4 <SDMMC_CmdReadMultiBlock>
 800521a:	62f8      	str	r0, [r7, #44]	@ 0x2c
 800521c:	e009      	b.n	8005232 <HAL_SD_ReadBlocks_DMA+0x102>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	2281      	movs	r2, #129	@ 0x81
 8005222:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800522a:	4618      	mov	r0, r3
 800522c:	f001 ff9f 	bl	800716e <SDMMC_CmdReadSingleBlock>
 8005230:	62f8      	str	r0, [r7, #44]	@ 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 8005232:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005234:	2b00      	cmp	r3, #0
 8005236:	d012      	beq.n	800525e <HAL_SD_ReadBlocks_DMA+0x12e>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	4a0f      	ldr	r2, [pc, #60]	@ (800527c <HAL_SD_ReadBlocks_DMA+0x14c>)
 800523e:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= errorstate;
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005244:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005246:	431a      	orrs	r2, r3
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State = HAL_SD_STATE_READY;
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	2201      	movs	r2, #1
 8005250:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	2200      	movs	r2, #0
 8005258:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_ERROR;
 800525a:	2301      	movs	r3, #1
 800525c:	e00a      	b.n	8005274 <HAL_SD_ReadBlocks_DMA+0x144>
      }

      /* Enable transfer interrupts */
      __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	f442 7295 	orr.w	r2, r2, #298	@ 0x12a
 800526c:	63da      	str	r2, [r3, #60]	@ 0x3c

      return HAL_OK;
 800526e:	2300      	movs	r3, #0
 8005270:	e000      	b.n	8005274 <HAL_SD_ReadBlocks_DMA+0x144>
    }
#endif
  }
  else
  {
    return HAL_BUSY;
 8005272:	2302      	movs	r3, #2
  }
}
 8005274:	4618      	mov	r0, r3
 8005276:	3730      	adds	r7, #48	@ 0x30
 8005278:	46bd      	mov	sp, r7
 800527a:	bd80      	pop	{r7, pc}
 800527c:	1fe00fff 	.word	0x1fe00fff

08005280 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd Block Address where data will be written
  * @param  NumberOfBlocks Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8005280:	b580      	push	{r7, lr}
 8005282:	b08c      	sub	sp, #48	@ 0x30
 8005284:	af00      	add	r7, sp, #0
 8005286:	60f8      	str	r0, [r7, #12]
 8005288:	60b9      	str	r1, [r7, #8]
 800528a:	607a      	str	r2, [r7, #4]
 800528c:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	62bb      	str	r3, [r7, #40]	@ 0x28

  if(NULL == pData)
 8005292:	68bb      	ldr	r3, [r7, #8]
 8005294:	2b00      	cmp	r3, #0
 8005296:	d107      	bne.n	80052a8 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800529c:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 80052a4:	2301      	movs	r3, #1
 80052a6:	e08d      	b.n	80053c4 <HAL_SD_WriteBlocks_DMA+0x144>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80052ae:	b2db      	uxtb	r3, r3
 80052b0:	2b01      	cmp	r3, #1
 80052b2:	f040 8086 	bne.w	80053c2 <HAL_SD_WriteBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	2200      	movs	r2, #0
 80052ba:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80052bc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80052be:	683b      	ldr	r3, [r7, #0]
 80052c0:	441a      	add	r2, r3
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80052c6:	429a      	cmp	r2, r3
 80052c8:	d907      	bls.n	80052da <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80052ce:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 80052d6:	2301      	movs	r3, #1
 80052d8:	e074      	b.n	80053c4 <HAL_SD_WriteBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	2203      	movs	r2, #3
 80052de:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	2200      	movs	r2, #0
 80052e8:	62da      	str	r2, [r3, #44]	@ 0x2c

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    hsd->pTxBuffPtr = pData;
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	68ba      	ldr	r2, [r7, #8]
 80052ee:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = BLOCKSIZE * NumberOfBlocks;
 80052f0:	683b      	ldr	r3, [r7, #0]
 80052f2:	025a      	lsls	r2, r3, #9
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80052fc:	2b01      	cmp	r3, #1
 80052fe:	d002      	beq.n	8005306 <HAL_SD_WriteBlocks_DMA+0x86>
    {
      add *= 512U;
 8005300:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005302:	025b      	lsls	r3, r3, #9
 8005304:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8005306:	f04f 33ff 	mov.w	r3, #4294967295
 800530a:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800530c:	683b      	ldr	r3, [r7, #0]
 800530e:	025b      	lsls	r3, r3, #9
 8005310:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8005312:	2390      	movs	r3, #144	@ 0x90
 8005314:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 8005316:	2300      	movs	r3, #0
 8005318:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800531a:	2300      	movs	r3, #0
 800531c:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800531e:	2300      	movs	r3, #0
 8005320:	627b      	str	r3, [r7, #36]	@ 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	f107 0210 	add.w	r2, r7, #16
 800532a:	4611      	mov	r1, r2
 800532c:	4618      	mov	r0, r3
 800532e:	f001 fecf 	bl	80070d0 <SDMMC_ConfigData>

    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	68da      	ldr	r2, [r3, #12]
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005340:	60da      	str	r2, [r3, #12]

    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	68ba      	ldr	r2, [r7, #8]
 8005348:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	2201      	movs	r2, #1
 8005350:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8005352:	683b      	ldr	r3, [r7, #0]
 8005354:	2b01      	cmp	r3, #1
 8005356:	d90a      	bls.n	800536e <HAL_SD_WriteBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	22a0      	movs	r2, #160	@ 0xa0
 800535c:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005364:	4618      	mov	r0, r3
 8005366:	f001 ff6b 	bl	8007240 <SDMMC_CmdWriteMultiBlock>
 800536a:	62f8      	str	r0, [r7, #44]	@ 0x2c
 800536c:	e009      	b.n	8005382 <HAL_SD_WriteBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	2290      	movs	r2, #144	@ 0x90
 8005372:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800537a:	4618      	mov	r0, r3
 800537c:	f001 ff3d 	bl	80071fa <SDMMC_CmdWriteSingleBlock>
 8005380:	62f8      	str	r0, [r7, #44]	@ 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8005382:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005384:	2b00      	cmp	r3, #0
 8005386:	d012      	beq.n	80053ae <HAL_SD_WriteBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	4a0f      	ldr	r2, [pc, #60]	@ (80053cc <HAL_SD_WriteBlocks_DMA+0x14c>)
 800538e:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005394:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005396:	431a      	orrs	r2, r3
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	2201      	movs	r2, #1
 80053a0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	2200      	movs	r2, #0
 80053a8:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 80053aa:	2301      	movs	r3, #1
 80053ac:	e00a      	b.n	80053c4 <HAL_SD_WriteBlocks_DMA+0x144>

      /* Enable SD Error interrupts */
      __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));
#else
      /* Enable transfer interrupts */
      __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR | SDMMC_IT_DATAEND));
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	f442 728d 	orr.w	r2, r2, #282	@ 0x11a
 80053bc:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

      return HAL_OK;
 80053be:	2300      	movs	r3, #0
 80053c0:	e000      	b.n	80053c4 <HAL_SD_WriteBlocks_DMA+0x144>
    }
#endif
  }
  else
  {
    return HAL_BUSY;
 80053c2:	2302      	movs	r3, #2
  }
}
 80053c4:	4618      	mov	r0, r3
 80053c6:	3730      	adds	r7, #48	@ 0x30
 80053c8:	46bd      	mov	sp, r7
 80053ca:	bd80      	pop	{r7, pc}
 80053cc:	1fe00fff 	.word	0x1fe00fff

080053d0 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 80053d0:	b580      	push	{r7, lr}
 80053d2:	b084      	sub	sp, #16
 80053d4:	af00      	add	r7, sp, #0
 80053d6:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80053dc:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80053e4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d008      	beq.n	80053fe <HAL_SD_IRQHandler+0x2e>
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	f003 0308 	and.w	r3, r3, #8
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d003      	beq.n	80053fe <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 80053f6:	6878      	ldr	r0, [r7, #4]
 80053f8:	f001 f98e 	bl	8006718 <SD_Read_IT>
 80053fc:	e199      	b.n	8005732 <HAL_SD_IRQHandler+0x362>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005404:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005408:	2b00      	cmp	r3, #0
 800540a:	f000 80ae 	beq.w	800556a <HAL_SD_IRQHandler+0x19a>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005416:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT |\
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800541e:	687a      	ldr	r2, [r7, #4]
 8005420:	6812      	ldr	r2, [r2, #0]
 8005422:	f423 4341 	bic.w	r3, r3, #49408	@ 0xc100
 8005426:	f023 033a 	bic.w	r3, r3, #58	@ 0x3a
 800542a:	63d3      	str	r3, [r2, #60]	@ 0x3c
                             SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE |\
                             SDMMC_IT_RXFIFOHF);

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 800543a:	63da      	str	r2, [r3, #60]	@ 0x3c
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	68da      	ldr	r2, [r3, #12]
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800544a:	60da      	str	r2, [r3, #12]
#else
    hsd->Instance->DCTRL &= ~(SDMMC_DCTRL_DTEN);
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    if((context & SD_CONTEXT_IT) != 0U)
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	f003 0308 	and.w	r3, r3, #8
 8005452:	2b00      	cmp	r3, #0
 8005454:	d038      	beq.n	80054c8 <HAL_SD_IRQHandler+0xf8>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	f003 0302 	and.w	r3, r3, #2
 800545c:	2b00      	cmp	r3, #0
 800545e:	d104      	bne.n	800546a <HAL_SD_IRQHandler+0x9a>
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	f003 0320 	and.w	r3, r3, #32
 8005466:	2b00      	cmp	r3, #0
 8005468:	d011      	beq.n	800548e <HAL_SD_IRQHandler+0xbe>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	4618      	mov	r0, r3
 8005470:	f001 ff0a 	bl	8007288 <SDMMC_CmdStopTransfer>
 8005474:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8005476:	68bb      	ldr	r3, [r7, #8]
 8005478:	2b00      	cmp	r3, #0
 800547a:	d008      	beq.n	800548e <HAL_SD_IRQHandler+0xbe>
        {
          hsd->ErrorCode |= errorstate;
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005480:	68bb      	ldr	r3, [r7, #8]
 8005482:	431a      	orrs	r2, r3
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	639a      	str	r2, [r3, #56]	@ 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8005488:	6878      	ldr	r0, [r7, #4]
 800548a:	f000 f957 	bl	800573c <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	4a90      	ldr	r2, [pc, #576]	@ (80056d4 <HAL_SD_IRQHandler+0x304>)
 8005494:	639a      	str	r2, [r3, #56]	@ 0x38

      hsd->State = HAL_SD_STATE_READY;
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	2201      	movs	r2, #1
 800549a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	2200      	movs	r2, #0
 80054a2:	631a      	str	r2, [r3, #48]	@ 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	f003 0301 	and.w	r3, r3, #1
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d104      	bne.n	80054b8 <HAL_SD_IRQHandler+0xe8>
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	f003 0302 	and.w	r3, r3, #2
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d003      	beq.n	80054c0 <HAL_SD_IRQHandler+0xf0>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 80054b8:	6878      	ldr	r0, [r7, #4]
 80054ba:	f002 fbd9 	bl	8007c70 <HAL_SD_RxCpltCallback>
 80054be:	e138      	b.n	8005732 <HAL_SD_IRQHandler+0x362>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 80054c0:	6878      	ldr	r0, [r7, #4]
 80054c2:	f002 fbcb 	bl	8007c5c <HAL_SD_TxCpltCallback>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else
  {
    /* Nothing to do */
  }
}
 80054c6:	e134      	b.n	8005732 <HAL_SD_IRQHandler+0x362>
    else if((context & SD_CONTEXT_DMA) != 0U)
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	f000 812f 	beq.w	8005732 <HAL_SD_IRQHandler+0x362>
      hsd->Instance->DLEN = 0;
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	2200      	movs	r2, #0
 80054da:	629a      	str	r2, [r3, #40]	@ 0x28
      hsd->Instance->DCTRL = 0;
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	2200      	movs	r2, #0
 80054e2:	62da      	str	r2, [r3, #44]	@ 0x2c
      hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	2200      	movs	r2, #0
 80054ea:	651a      	str	r2, [r3, #80]	@ 0x50
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	f003 0302 	and.w	r3, r3, #2
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d104      	bne.n	8005500 <HAL_SD_IRQHandler+0x130>
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	f003 0320 	and.w	r3, r3, #32
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d011      	beq.n	8005524 <HAL_SD_IRQHandler+0x154>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	4618      	mov	r0, r3
 8005506:	f001 febf 	bl	8007288 <SDMMC_CmdStopTransfer>
 800550a:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800550c:	68bb      	ldr	r3, [r7, #8]
 800550e:	2b00      	cmp	r3, #0
 8005510:	d008      	beq.n	8005524 <HAL_SD_IRQHandler+0x154>
          hsd->ErrorCode |= errorstate;
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005516:	68bb      	ldr	r3, [r7, #8]
 8005518:	431a      	orrs	r2, r3
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	639a      	str	r2, [r3, #56]	@ 0x38
          HAL_SD_ErrorCallback(hsd);
 800551e:	6878      	ldr	r0, [r7, #4]
 8005520:	f000 f90c 	bl	800573c <HAL_SD_ErrorCallback>
      hsd->State = HAL_SD_STATE_READY;
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	2201      	movs	r2, #1
 8005528:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	2200      	movs	r2, #0
 8005530:	631a      	str	r2, [r3, #48]	@ 0x30
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	f003 0310 	and.w	r3, r3, #16
 8005538:	2b00      	cmp	r3, #0
 800553a:	d104      	bne.n	8005546 <HAL_SD_IRQHandler+0x176>
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	f003 0320 	and.w	r3, r3, #32
 8005542:	2b00      	cmp	r3, #0
 8005544:	d002      	beq.n	800554c <HAL_SD_IRQHandler+0x17c>
        HAL_SD_TxCpltCallback(hsd);
 8005546:	6878      	ldr	r0, [r7, #4]
 8005548:	f002 fb88 	bl	8007c5c <HAL_SD_TxCpltCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	f003 0301 	and.w	r3, r3, #1
 8005552:	2b00      	cmp	r3, #0
 8005554:	d105      	bne.n	8005562 <HAL_SD_IRQHandler+0x192>
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	f003 0302 	and.w	r3, r3, #2
 800555c:	2b00      	cmp	r3, #0
 800555e:	f000 80e8 	beq.w	8005732 <HAL_SD_IRQHandler+0x362>
        HAL_SD_RxCpltCallback(hsd);
 8005562:	6878      	ldr	r0, [r7, #4]
 8005564:	f002 fb84 	bl	8007c70 <HAL_SD_RxCpltCallback>
}
 8005568:	e0e3      	b.n	8005732 <HAL_SD_IRQHandler+0x362>
  else if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005570:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005574:	2b00      	cmp	r3, #0
 8005576:	d008      	beq.n	800558a <HAL_SD_IRQHandler+0x1ba>
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	f003 0308 	and.w	r3, r3, #8
 800557e:	2b00      	cmp	r3, #0
 8005580:	d003      	beq.n	800558a <HAL_SD_IRQHandler+0x1ba>
    SD_Write_IT(hsd);
 8005582:	6878      	ldr	r0, [r7, #4]
 8005584:	f001 f919 	bl	80067ba <SD_Write_IT>
 8005588:	e0d3      	b.n	8005732 <HAL_SD_IRQHandler+0x362>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR | SDMMC_FLAG_TXUNDERR) != RESET)
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005590:	f003 033a 	and.w	r3, r3, #58	@ 0x3a
 8005594:	2b00      	cmp	r3, #0
 8005596:	f000 809f 	beq.w	80056d8 <HAL_SD_IRQHandler+0x308>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80055a0:	f003 0302 	and.w	r3, r3, #2
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d005      	beq.n	80055b4 <HAL_SD_IRQHandler+0x1e4>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80055ac:	f043 0202 	orr.w	r2, r3, #2
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	639a      	str	r2, [r3, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80055ba:	f003 0308 	and.w	r3, r3, #8
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d005      	beq.n	80055ce <HAL_SD_IRQHandler+0x1fe>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80055c6:	f043 0208 	orr.w	r2, r3, #8
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	639a      	str	r2, [r3, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80055d4:	f003 0320 	and.w	r3, r3, #32
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d005      	beq.n	80055e8 <HAL_SD_IRQHandler+0x218>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80055e0:	f043 0220 	orr.w	r2, r3, #32
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	639a      	str	r2, [r3, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80055ee:	f003 0310 	and.w	r3, r3, #16
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d005      	beq.n	8005602 <HAL_SD_IRQHandler+0x232>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80055fa:	f043 0210 	orr.w	r2, r3, #16
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	4a33      	ldr	r2, [pc, #204]	@ (80056d4 <HAL_SD_IRQHandler+0x304>)
 8005608:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	f422 729d 	bic.w	r2, r2, #314	@ 0x13a
 8005618:	63da      	str	r2, [r3, #60]	@ 0x3c
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	68da      	ldr	r2, [r3, #12]
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005628:	60da      	str	r2, [r3, #12]
    hsd->Instance->DCTRL |= SDMMC_DCTRL_FIFORST;
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005638:	62da      	str	r2, [r3, #44]	@ 0x2c
    hsd->Instance->CMD |= SDMMC_CMD_CMDSTOP;
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	68da      	ldr	r2, [r3, #12]
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8005648:	60da      	str	r2, [r3, #12]
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	4618      	mov	r0, r3
 8005650:	f001 fe1a 	bl	8007288 <SDMMC_CmdStopTransfer>
 8005654:	4602      	mov	r2, r0
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800565a:	431a      	orrs	r2, r3
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->Instance->CMD &= ~(SDMMC_CMD_CMDSTOP);
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	68da      	ldr	r2, [r3, #12]
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800566e:	60da      	str	r2, [r3, #12]
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DABORT);
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005678:	639a      	str	r2, [r3, #56]	@ 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	f003 0308 	and.w	r3, r3, #8
 8005680:	2b00      	cmp	r3, #0
 8005682:	d00a      	beq.n	800569a <HAL_SD_IRQHandler+0x2ca>
      hsd->State = HAL_SD_STATE_READY;
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	2201      	movs	r2, #1
 8005688:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	2200      	movs	r2, #0
 8005690:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_SD_ErrorCallback(hsd);
 8005692:	6878      	ldr	r0, [r7, #4]
 8005694:	f000 f852 	bl	800573c <HAL_SD_ErrorCallback>
}
 8005698:	e04b      	b.n	8005732 <HAL_SD_IRQHandler+0x362>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d046      	beq.n	8005732 <HAL_SD_IRQHandler+0x362>
      if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d042      	beq.n	8005732 <HAL_SD_IRQHandler+0x362>
        __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 80056ba:	63da      	str	r2, [r3, #60]	@ 0x3c
        hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	2200      	movs	r2, #0
 80056c2:	651a      	str	r2, [r3, #80]	@ 0x50
        hsd->State = HAL_SD_STATE_READY;
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	2201      	movs	r2, #1
 80056c8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        HAL_SD_ErrorCallback(hsd);
 80056cc:	6878      	ldr	r0, [r7, #4]
 80056ce:	f000 f835 	bl	800573c <HAL_SD_ErrorCallback>
}
 80056d2:	e02e      	b.n	8005732 <HAL_SD_IRQHandler+0x362>
 80056d4:	18000f3a 	.word	0x18000f3a
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_IDMABTC) != RESET)
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80056de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d025      	beq.n	8005732 <HAL_SD_IRQHandler+0x362>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_IDMABTC);
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80056ee:	639a      	str	r2, [r3, #56]	@ 0x38
    if(READ_BIT(hsd->Instance->IDMACTRL, SDMMC_IDMA_IDMABACT) == 0U)
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80056f6:	f003 0304 	and.w	r3, r3, #4
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d10c      	bne.n	8005718 <HAL_SD_IRQHandler+0x348>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	f003 0320 	and.w	r3, r3, #32
 8005704:	2b00      	cmp	r3, #0
 8005706:	d003      	beq.n	8005710 <HAL_SD_IRQHandler+0x340>
        HAL_SDEx_Write_DMADoubleBuffer1CpltCallback(hsd);
 8005708:	6878      	ldr	r0, [r7, #4]
 800570a:	f001 f8d4 	bl	80068b6 <HAL_SDEx_Write_DMADoubleBuffer1CpltCallback>
}
 800570e:	e010      	b.n	8005732 <HAL_SD_IRQHandler+0x362>
        HAL_SDEx_Read_DMADoubleBuffer1CpltCallback(hsd);
 8005710:	6878      	ldr	r0, [r7, #4]
 8005712:	f001 f8bc 	bl	800688e <HAL_SDEx_Read_DMADoubleBuffer1CpltCallback>
}
 8005716:	e00c      	b.n	8005732 <HAL_SD_IRQHandler+0x362>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	f003 0320 	and.w	r3, r3, #32
 800571e:	2b00      	cmp	r3, #0
 8005720:	d003      	beq.n	800572a <HAL_SD_IRQHandler+0x35a>
        HAL_SDEx_Write_DMADoubleBuffer0CpltCallback(hsd);
 8005722:	6878      	ldr	r0, [r7, #4]
 8005724:	f001 f8bd 	bl	80068a2 <HAL_SDEx_Write_DMADoubleBuffer0CpltCallback>
}
 8005728:	e003      	b.n	8005732 <HAL_SD_IRQHandler+0x362>
        HAL_SDEx_Read_DMADoubleBuffer0CpltCallback(hsd);
 800572a:	6878      	ldr	r0, [r7, #4]
 800572c:	f001 f8a5 	bl	800687a <HAL_SDEx_Read_DMADoubleBuffer0CpltCallback>
}
 8005730:	e7ff      	b.n	8005732 <HAL_SD_IRQHandler+0x362>
 8005732:	bf00      	nop
 8005734:	3710      	adds	r7, #16
 8005736:	46bd      	mov	sp, r7
 8005738:	bd80      	pop	{r7, pc}
 800573a:	bf00      	nop

0800573c <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 800573c:	b480      	push	{r7}
 800573e:	b083      	sub	sp, #12
 8005740:	af00      	add	r7, sp, #0
 8005742:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8005744:	bf00      	nop
 8005746:	370c      	adds	r7, #12
 8005748:	46bd      	mov	sp, r7
 800574a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800574e:	4770      	bx	lr

08005750 <HAL_SD_GetCardCSD>:
  * @param  pCSD Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8005750:	b480      	push	{r7}
 8005752:	b083      	sub	sp, #12
 8005754:	af00      	add	r7, sp, #0
 8005756:	6078      	str	r0, [r7, #4]
 8005758:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800575e:	0f9b      	lsrs	r3, r3, #30
 8005760:	b2da      	uxtb	r2, r3
 8005762:	683b      	ldr	r3, [r7, #0]
 8005764:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800576a:	0e9b      	lsrs	r3, r3, #26
 800576c:	b2db      	uxtb	r3, r3
 800576e:	f003 030f 	and.w	r3, r3, #15
 8005772:	b2da      	uxtb	r2, r3
 8005774:	683b      	ldr	r3, [r7, #0]
 8005776:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800577c:	0e1b      	lsrs	r3, r3, #24
 800577e:	b2db      	uxtb	r3, r3
 8005780:	f003 0303 	and.w	r3, r3, #3
 8005784:	b2da      	uxtb	r2, r3
 8005786:	683b      	ldr	r3, [r7, #0]
 8005788:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800578e:	0c1b      	lsrs	r3, r3, #16
 8005790:	b2da      	uxtb	r2, r3
 8005792:	683b      	ldr	r3, [r7, #0]
 8005794:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800579a:	0a1b      	lsrs	r3, r3, #8
 800579c:	b2da      	uxtb	r2, r3
 800579e:	683b      	ldr	r3, [r7, #0]
 80057a0:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80057a6:	b2da      	uxtb	r2, r3
 80057a8:	683b      	ldr	r3, [r7, #0]
 80057aa:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80057b0:	0d1b      	lsrs	r3, r3, #20
 80057b2:	b29a      	uxth	r2, r3
 80057b4:	683b      	ldr	r3, [r7, #0]
 80057b6:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80057bc:	0c1b      	lsrs	r3, r3, #16
 80057be:	b2db      	uxtb	r3, r3
 80057c0:	f003 030f 	and.w	r3, r3, #15
 80057c4:	b2da      	uxtb	r2, r3
 80057c6:	683b      	ldr	r3, [r7, #0]
 80057c8:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80057ce:	0bdb      	lsrs	r3, r3, #15
 80057d0:	b2db      	uxtb	r3, r3
 80057d2:	f003 0301 	and.w	r3, r3, #1
 80057d6:	b2da      	uxtb	r2, r3
 80057d8:	683b      	ldr	r3, [r7, #0]
 80057da:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80057e0:	0b9b      	lsrs	r3, r3, #14
 80057e2:	b2db      	uxtb	r3, r3
 80057e4:	f003 0301 	and.w	r3, r3, #1
 80057e8:	b2da      	uxtb	r2, r3
 80057ea:	683b      	ldr	r3, [r7, #0]
 80057ec:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80057f2:	0b5b      	lsrs	r3, r3, #13
 80057f4:	b2db      	uxtb	r3, r3
 80057f6:	f003 0301 	and.w	r3, r3, #1
 80057fa:	b2da      	uxtb	r2, r3
 80057fc:	683b      	ldr	r3, [r7, #0]
 80057fe:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005804:	0b1b      	lsrs	r3, r3, #12
 8005806:	b2db      	uxtb	r3, r3
 8005808:	f003 0301 	and.w	r3, r3, #1
 800580c:	b2da      	uxtb	r2, r3
 800580e:	683b      	ldr	r3, [r7, #0]
 8005810:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8005812:	683b      	ldr	r3, [r7, #0]
 8005814:	2200      	movs	r2, #0
 8005816:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800581c:	2b00      	cmp	r3, #0
 800581e:	d163      	bne.n	80058e8 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005824:	009a      	lsls	r2, r3, #2
 8005826:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800582a:	4013      	ands	r3, r2
 800582c:	687a      	ldr	r2, [r7, #4]
 800582e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8005830:	0f92      	lsrs	r2, r2, #30
 8005832:	431a      	orrs	r2, r3
 8005834:	683b      	ldr	r3, [r7, #0]
 8005836:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800583c:	0edb      	lsrs	r3, r3, #27
 800583e:	b2db      	uxtb	r3, r3
 8005840:	f003 0307 	and.w	r3, r3, #7
 8005844:	b2da      	uxtb	r2, r3
 8005846:	683b      	ldr	r3, [r7, #0]
 8005848:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800584e:	0e1b      	lsrs	r3, r3, #24
 8005850:	b2db      	uxtb	r3, r3
 8005852:	f003 0307 	and.w	r3, r3, #7
 8005856:	b2da      	uxtb	r2, r3
 8005858:	683b      	ldr	r3, [r7, #0]
 800585a:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005860:	0d5b      	lsrs	r3, r3, #21
 8005862:	b2db      	uxtb	r3, r3
 8005864:	f003 0307 	and.w	r3, r3, #7
 8005868:	b2da      	uxtb	r2, r3
 800586a:	683b      	ldr	r3, [r7, #0]
 800586c:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005872:	0c9b      	lsrs	r3, r3, #18
 8005874:	b2db      	uxtb	r3, r3
 8005876:	f003 0307 	and.w	r3, r3, #7
 800587a:	b2da      	uxtb	r2, r3
 800587c:	683b      	ldr	r3, [r7, #0]
 800587e:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005884:	0bdb      	lsrs	r3, r3, #15
 8005886:	b2db      	uxtb	r3, r3
 8005888:	f003 0307 	and.w	r3, r3, #7
 800588c:	b2da      	uxtb	r2, r3
 800588e:	683b      	ldr	r3, [r7, #0]
 8005890:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8005892:	683b      	ldr	r3, [r7, #0]
 8005894:	691b      	ldr	r3, [r3, #16]
 8005896:	1c5a      	adds	r2, r3, #1
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	64da      	str	r2, [r3, #76]	@ 0x4c
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800589c:	683b      	ldr	r3, [r7, #0]
 800589e:	7e1b      	ldrb	r3, [r3, #24]
 80058a0:	b2db      	uxtb	r3, r3
 80058a2:	f003 0307 	and.w	r3, r3, #7
 80058a6:	3302      	adds	r3, #2
 80058a8:	2201      	movs	r2, #1
 80058aa:	fa02 f303 	lsl.w	r3, r2, r3
 80058ae:	687a      	ldr	r2, [r7, #4]
 80058b0:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80058b2:	fb03 f202 	mul.w	r2, r3, r2
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	64da      	str	r2, [r3, #76]	@ 0x4c
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 80058ba:	683b      	ldr	r3, [r7, #0]
 80058bc:	7a1b      	ldrb	r3, [r3, #8]
 80058be:	b2db      	uxtb	r3, r3
 80058c0:	f003 030f 	and.w	r3, r3, #15
 80058c4:	2201      	movs	r2, #1
 80058c6:	409a      	lsls	r2, r3
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	651a      	str	r2, [r3, #80]	@ 0x50

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80058d0:	687a      	ldr	r2, [r7, #4]
 80058d2:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80058d4:	0a52      	lsrs	r2, r2, #9
 80058d6:	fb03 f202 	mul.w	r2, r3, r2
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.LogBlockSize = 512U;
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80058e4:	659a      	str	r2, [r3, #88]	@ 0x58
 80058e6:	e031      	b.n	800594c <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80058ec:	2b01      	cmp	r3, #1
 80058ee:	d11d      	bne.n	800592c <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80058f4:	041b      	lsls	r3, r3, #16
 80058f6:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80058fe:	0c1b      	lsrs	r3, r3, #16
 8005900:	431a      	orrs	r2, r3
 8005902:	683b      	ldr	r3, [r7, #0]
 8005904:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8005906:	683b      	ldr	r3, [r7, #0]
 8005908:	691b      	ldr	r3, [r3, #16]
 800590a:	3301      	adds	r3, #1
 800590c:	029a      	lsls	r2, r3, #10
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	64da      	str	r2, [r3, #76]	@ 0x4c
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockSize = 512U;
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005920:	651a      	str	r2, [r3, #80]	@ 0x50
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	659a      	str	r2, [r3, #88]	@ 0x58
 800592a:	e00f      	b.n	800594c <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	4a58      	ldr	r2, [pc, #352]	@ (8005a94 <HAL_SD_GetCardCSD+0x344>)
 8005932:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005938:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	2201      	movs	r2, #1
 8005944:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8005948:	2301      	movs	r3, #1
 800594a:	e09d      	b.n	8005a88 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005950:	0b9b      	lsrs	r3, r3, #14
 8005952:	b2db      	uxtb	r3, r3
 8005954:	f003 0301 	and.w	r3, r3, #1
 8005958:	b2da      	uxtb	r2, r3
 800595a:	683b      	ldr	r3, [r7, #0]
 800595c:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005962:	09db      	lsrs	r3, r3, #7
 8005964:	b2db      	uxtb	r3, r3
 8005966:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800596a:	b2da      	uxtb	r2, r3
 800596c:	683b      	ldr	r3, [r7, #0]
 800596e:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005974:	b2db      	uxtb	r3, r3
 8005976:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800597a:	b2da      	uxtb	r2, r3
 800597c:	683b      	ldr	r3, [r7, #0]
 800597e:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005984:	0fdb      	lsrs	r3, r3, #31
 8005986:	b2da      	uxtb	r2, r3
 8005988:	683b      	ldr	r3, [r7, #0]
 800598a:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005990:	0f5b      	lsrs	r3, r3, #29
 8005992:	b2db      	uxtb	r3, r3
 8005994:	f003 0303 	and.w	r3, r3, #3
 8005998:	b2da      	uxtb	r2, r3
 800599a:	683b      	ldr	r3, [r7, #0]
 800599c:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80059a2:	0e9b      	lsrs	r3, r3, #26
 80059a4:	b2db      	uxtb	r3, r3
 80059a6:	f003 0307 	and.w	r3, r3, #7
 80059aa:	b2da      	uxtb	r2, r3
 80059ac:	683b      	ldr	r3, [r7, #0]
 80059ae:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80059b4:	0d9b      	lsrs	r3, r3, #22
 80059b6:	b2db      	uxtb	r3, r3
 80059b8:	f003 030f 	and.w	r3, r3, #15
 80059bc:	b2da      	uxtb	r2, r3
 80059be:	683b      	ldr	r3, [r7, #0]
 80059c0:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80059c6:	0d5b      	lsrs	r3, r3, #21
 80059c8:	b2db      	uxtb	r3, r3
 80059ca:	f003 0301 	and.w	r3, r3, #1
 80059ce:	b2da      	uxtb	r2, r3
 80059d0:	683b      	ldr	r3, [r7, #0]
 80059d2:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 80059d6:	683b      	ldr	r3, [r7, #0]
 80059d8:	2200      	movs	r2, #0
 80059da:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80059e2:	0c1b      	lsrs	r3, r3, #16
 80059e4:	b2db      	uxtb	r3, r3
 80059e6:	f003 0301 	and.w	r3, r3, #1
 80059ea:	b2da      	uxtb	r2, r3
 80059ec:	683b      	ldr	r3, [r7, #0]
 80059ee:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80059f6:	0bdb      	lsrs	r3, r3, #15
 80059f8:	b2db      	uxtb	r3, r3
 80059fa:	f003 0301 	and.w	r3, r3, #1
 80059fe:	b2da      	uxtb	r2, r3
 8005a00:	683b      	ldr	r3, [r7, #0]
 8005a02:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005a0a:	0b9b      	lsrs	r3, r3, #14
 8005a0c:	b2db      	uxtb	r3, r3
 8005a0e:	f003 0301 	and.w	r3, r3, #1
 8005a12:	b2da      	uxtb	r2, r3
 8005a14:	683b      	ldr	r3, [r7, #0]
 8005a16:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005a1e:	0b5b      	lsrs	r3, r3, #13
 8005a20:	b2db      	uxtb	r3, r3
 8005a22:	f003 0301 	and.w	r3, r3, #1
 8005a26:	b2da      	uxtb	r2, r3
 8005a28:	683b      	ldr	r3, [r7, #0]
 8005a2a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005a32:	0b1b      	lsrs	r3, r3, #12
 8005a34:	b2db      	uxtb	r3, r3
 8005a36:	f003 0301 	and.w	r3, r3, #1
 8005a3a:	b2da      	uxtb	r2, r3
 8005a3c:	683b      	ldr	r3, [r7, #0]
 8005a3e:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005a46:	0a9b      	lsrs	r3, r3, #10
 8005a48:	b2db      	uxtb	r3, r3
 8005a4a:	f003 0303 	and.w	r3, r3, #3
 8005a4e:	b2da      	uxtb	r2, r3
 8005a50:	683b      	ldr	r3, [r7, #0]
 8005a52:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005a5a:	0a1b      	lsrs	r3, r3, #8
 8005a5c:	b2db      	uxtb	r3, r3
 8005a5e:	f003 0303 	and.w	r3, r3, #3
 8005a62:	b2da      	uxtb	r2, r3
 8005a64:	683b      	ldr	r3, [r7, #0]
 8005a66:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005a6e:	085b      	lsrs	r3, r3, #1
 8005a70:	b2db      	uxtb	r3, r3
 8005a72:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005a76:	b2da      	uxtb	r2, r3
 8005a78:	683b      	ldr	r3, [r7, #0]
 8005a7a:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 8005a7e:	683b      	ldr	r3, [r7, #0]
 8005a80:	2201      	movs	r2, #1
 8005a82:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 8005a86:	2300      	movs	r3, #0
}
 8005a88:	4618      	mov	r0, r3
 8005a8a:	370c      	adds	r7, #12
 8005a8c:	46bd      	mov	sp, r7
 8005a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a92:	4770      	bx	lr
 8005a94:	1fe00fff 	.word	0x1fe00fff

08005a98 <HAL_SD_GetCardStatus>:
  * @param  pStatus Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 8005a98:	b580      	push	{r7, lr}
 8005a9a:	b094      	sub	sp, #80	@ 0x50
 8005a9c:	af00      	add	r7, sp, #0
 8005a9e:	6078      	str	r0, [r7, #4]
 8005aa0:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8005aa2:	2300      	movs	r3, #0
 8005aa4:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

  errorstate = SD_SendSDStatus(hsd, sd_status);
 8005aa8:	f107 0308 	add.w	r3, r7, #8
 8005aac:	4619      	mov	r1, r3
 8005aae:	6878      	ldr	r0, [r7, #4]
 8005ab0:	f000 fbd4 	bl	800625c <SD_SendSDStatus>
 8005ab4:	64b8      	str	r0, [r7, #72]	@ 0x48
  if(errorstate != HAL_SD_ERROR_NONE)
 8005ab6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d011      	beq.n	8005ae0 <HAL_SD_GetCardStatus+0x48>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	4a4f      	ldr	r2, [pc, #316]	@ (8005c00 <HAL_SD_GetCardStatus+0x168>)
 8005ac2:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005ac8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005aca:	431a      	orrs	r2, r3
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	2201      	movs	r2, #1
 8005ad4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    status = HAL_ERROR;
 8005ad8:	2301      	movs	r3, #1
 8005ada:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 8005ade:	e070      	b.n	8005bc2 <HAL_SD_GetCardStatus+0x12a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 8005ae0:	68bb      	ldr	r3, [r7, #8]
 8005ae2:	099b      	lsrs	r3, r3, #6
 8005ae4:	b2db      	uxtb	r3, r3
 8005ae6:	f003 0303 	and.w	r3, r3, #3
 8005aea:	b2da      	uxtb	r2, r3
 8005aec:	683b      	ldr	r3, [r7, #0]
 8005aee:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 8005af0:	68bb      	ldr	r3, [r7, #8]
 8005af2:	095b      	lsrs	r3, r3, #5
 8005af4:	b2db      	uxtb	r3, r3
 8005af6:	f003 0301 	and.w	r3, r3, #1
 8005afa:	b2da      	uxtb	r2, r3
 8005afc:	683b      	ldr	r3, [r7, #0]
 8005afe:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 8005b00:	68bb      	ldr	r3, [r7, #8]
 8005b02:	0a1b      	lsrs	r3, r3, #8
 8005b04:	b29b      	uxth	r3, r3
 8005b06:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8005b0a:	b29a      	uxth	r2, r3
 8005b0c:	68bb      	ldr	r3, [r7, #8]
 8005b0e:	0e1b      	lsrs	r3, r3, #24
 8005b10:	b29b      	uxth	r3, r3
 8005b12:	4313      	orrs	r3, r2
 8005b14:	b29a      	uxth	r2, r3
 8005b16:	683b      	ldr	r3, [r7, #0]
 8005b18:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	061a      	lsls	r2, r3, #24
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	021b      	lsls	r3, r3, #8
 8005b22:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8005b26:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	0a1b      	lsrs	r3, r3, #8
 8005b2c:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8005b30:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	0e1b      	lsrs	r3, r3, #24
 8005b36:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8005b38:	683b      	ldr	r3, [r7, #0]
 8005b3a:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 8005b3c:	693b      	ldr	r3, [r7, #16]
 8005b3e:	b2da      	uxtb	r2, r3
 8005b40:	683b      	ldr	r3, [r7, #0]
 8005b42:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 8005b44:	693b      	ldr	r3, [r7, #16]
 8005b46:	0a1b      	lsrs	r3, r3, #8
 8005b48:	b2da      	uxtb	r2, r3
 8005b4a:	683b      	ldr	r3, [r7, #0]
 8005b4c:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 8005b4e:	693b      	ldr	r3, [r7, #16]
 8005b50:	0d1b      	lsrs	r3, r3, #20
 8005b52:	b2db      	uxtb	r3, r3
 8005b54:	f003 030f 	and.w	r3, r3, #15
 8005b58:	b2da      	uxtb	r2, r3
 8005b5a:	683b      	ldr	r3, [r7, #0]
 8005b5c:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 8005b5e:	693b      	ldr	r3, [r7, #16]
 8005b60:	0c1b      	lsrs	r3, r3, #16
 8005b62:	b29b      	uxth	r3, r3
 8005b64:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8005b68:	b29a      	uxth	r2, r3
 8005b6a:	697b      	ldr	r3, [r7, #20]
 8005b6c:	b29b      	uxth	r3, r3
 8005b6e:	b2db      	uxtb	r3, r3
 8005b70:	b29b      	uxth	r3, r3
 8005b72:	4313      	orrs	r3, r2
 8005b74:	b29a      	uxth	r2, r3
 8005b76:	683b      	ldr	r3, [r7, #0]
 8005b78:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 8005b7a:	697b      	ldr	r3, [r7, #20]
 8005b7c:	0a9b      	lsrs	r3, r3, #10
 8005b7e:	b2db      	uxtb	r3, r3
 8005b80:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005b84:	b2da      	uxtb	r2, r3
 8005b86:	683b      	ldr	r3, [r7, #0]
 8005b88:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 8005b8a:	697b      	ldr	r3, [r7, #20]
 8005b8c:	0a1b      	lsrs	r3, r3, #8
 8005b8e:	b2db      	uxtb	r3, r3
 8005b90:	f003 0303 	and.w	r3, r3, #3
 8005b94:	b2da      	uxtb	r2, r3
 8005b96:	683b      	ldr	r3, [r7, #0]
 8005b98:	73da      	strb	r2, [r3, #15]

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 8005b9a:	697b      	ldr	r3, [r7, #20]
 8005b9c:	091b      	lsrs	r3, r3, #4
 8005b9e:	b2db      	uxtb	r3, r3
 8005ba0:	f003 030f 	and.w	r3, r3, #15
 8005ba4:	b2da      	uxtb	r2, r3
 8005ba6:	683b      	ldr	r3, [r7, #0]
 8005ba8:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 8005baa:	697b      	ldr	r3, [r7, #20]
 8005bac:	b2db      	uxtb	r3, r3
 8005bae:	f003 030f 	and.w	r3, r3, #15
 8005bb2:	b2da      	uxtb	r2, r3
 8005bb4:	683b      	ldr	r3, [r7, #0]
 8005bb6:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 8005bb8:	69bb      	ldr	r3, [r7, #24]
 8005bba:	0e1b      	lsrs	r3, r3, #24
 8005bbc:	b2da      	uxtb	r2, r3
 8005bbe:	683b      	ldr	r3, [r7, #0]
 8005bc0:	749a      	strb	r2, [r3, #18]
#endif
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8005bca:	4618      	mov	r0, r3
 8005bcc:	f001 faac 	bl	8007128 <SDMMC_CmdBlockLength>
 8005bd0:	64b8      	str	r0, [r7, #72]	@ 0x48
  if(errorstate != HAL_SD_ERROR_NONE)
 8005bd2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d00d      	beq.n	8005bf4 <HAL_SD_GetCardStatus+0x15c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	4a08      	ldr	r2, [pc, #32]	@ (8005c00 <HAL_SD_GetCardStatus+0x168>)
 8005bde:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode = errorstate;
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005be4:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	2201      	movs	r2, #1
 8005bea:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    status = HAL_ERROR;
 8005bee:	2301      	movs	r3, #1
 8005bf0:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
  }

  return status;
 8005bf4:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
}
 8005bf8:	4618      	mov	r0, r3
 8005bfa:	3750      	adds	r7, #80	@ 0x50
 8005bfc:	46bd      	mov	sp, r7
 8005bfe:	bd80      	pop	{r7, pc}
 8005c00:	1fe00fff 	.word	0x1fe00fff

08005c04 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8005c04:	b480      	push	{r7}
 8005c06:	b083      	sub	sp, #12
 8005c08:	af00      	add	r7, sp, #0
 8005c0a:	6078      	str	r0, [r7, #4]
 8005c0c:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005c12:	683b      	ldr	r3, [r7, #0]
 8005c14:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005c1a:	683b      	ldr	r3, [r7, #0]
 8005c1c:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005c22:	683b      	ldr	r3, [r7, #0]
 8005c24:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005c2a:	683b      	ldr	r3, [r7, #0]
 8005c2c:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005c32:	683b      	ldr	r3, [r7, #0]
 8005c34:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005c3a:	683b      	ldr	r3, [r7, #0]
 8005c3c:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005c42:	683b      	ldr	r3, [r7, #0]
 8005c44:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8005c4a:	683b      	ldr	r3, [r7, #0]
 8005c4c:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8005c4e:	2300      	movs	r3, #0
}
 8005c50:	4618      	mov	r0, r3
 8005c52:	370c      	adds	r7, #12
 8005c54:	46bd      	mov	sp, r7
 8005c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c5a:	4770      	bx	lr

08005c5c <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8005c5c:	b5b0      	push	{r4, r5, r7, lr}
 8005c5e:	b090      	sub	sp, #64	@ 0x40
 8005c60:	af04      	add	r7, sp, #16
 8005c62:	6078      	str	r0, [r7, #4]
 8005c64:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;
  HAL_StatusTypeDef status = HAL_OK;
 8005c66:	2300      	movs	r3, #0
 8005c68:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	2203      	movs	r2, #3
 8005c70:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c78:	2b03      	cmp	r3, #3
 8005c7a:	d02e      	beq.n	8005cda <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 8005c7c:	683b      	ldr	r3, [r7, #0]
 8005c7e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005c82:	d106      	bne.n	8005c92 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c88:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	639a      	str	r2, [r3, #56]	@ 0x38
 8005c90:	e029      	b.n	8005ce6 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 8005c92:	683b      	ldr	r3, [r7, #0]
 8005c94:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005c98:	d10a      	bne.n	8005cb0 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8005c9a:	6878      	ldr	r0, [r7, #4]
 8005c9c:	f000 fbd6 	bl	800644c <SD_WideBus_Enable>
 8005ca0:	62b8      	str	r0, [r7, #40]	@ 0x28

      hsd->ErrorCode |= errorstate;
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005ca6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ca8:	431a      	orrs	r2, r3
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	639a      	str	r2, [r3, #56]	@ 0x38
 8005cae:	e01a      	b.n	8005ce6 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 8005cb0:	683b      	ldr	r3, [r7, #0]
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d10a      	bne.n	8005ccc <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8005cb6:	6878      	ldr	r0, [r7, #4]
 8005cb8:	f000 fc13 	bl	80064e2 <SD_WideBus_Disable>
 8005cbc:	62b8      	str	r0, [r7, #40]	@ 0x28

      hsd->ErrorCode |= errorstate;
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005cc2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005cc4:	431a      	orrs	r2, r3
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	639a      	str	r2, [r3, #56]	@ 0x38
 8005cca:	e00c      	b.n	8005ce6 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005cd0:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	639a      	str	r2, [r3, #56]	@ 0x38
 8005cd8:	e005      	b.n	8005ce6 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005cde:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d007      	beq.n	8005cfe <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	4a60      	ldr	r2, [pc, #384]	@ (8005e74 <HAL_SD_ConfigWideBusOperation+0x218>)
 8005cf4:	639a      	str	r2, [r3, #56]	@ 0x38
    status = HAL_ERROR;
 8005cf6:	2301      	movs	r3, #1
 8005cf8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8005cfc:	e097      	b.n	8005e2e <HAL_SD_ConfigWideBusOperation+0x1d2>
  }
  else
  {
    sdmmc_clk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC1);
 8005cfe:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8005d02:	f7fd fec7 	bl	8003a94 <HAL_RCCEx_GetPeriphCLKFreq>
 8005d06:	6278      	str	r0, [r7, #36]	@ 0x24
    if (sdmmc_clk != 0U)
 8005d08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	f000 8086 	beq.w	8005e1c <HAL_SD_ConfigWideBusOperation+0x1c0>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	685b      	ldr	r3, [r3, #4]
 8005d14:	60fb      	str	r3, [r7, #12]
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
      Init.ClockBypass         = hsd->Init.ClockBypass;
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	689b      	ldr	r3, [r3, #8]
 8005d1a:	613b      	str	r3, [r7, #16]
      Init.BusWide             = WideMode;
 8005d1c:	683b      	ldr	r3, [r7, #0]
 8005d1e:	617b      	str	r3, [r7, #20]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	691b      	ldr	r3, [r3, #16]
 8005d24:	61bb      	str	r3, [r7, #24]

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	695a      	ldr	r2, [r3, #20]
 8005d2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d2c:	4952      	ldr	r1, [pc, #328]	@ (8005e78 <HAL_SD_ConfigWideBusOperation+0x21c>)
 8005d2e:	fba1 1303 	umull	r1, r3, r1, r3
 8005d32:	0e1b      	lsrs	r3, r3, #24
 8005d34:	429a      	cmp	r2, r3
 8005d36:	d303      	bcc.n	8005d40 <HAL_SD_ConfigWideBusOperation+0xe4>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	695b      	ldr	r3, [r3, #20]
 8005d3c:	61fb      	str	r3, [r7, #28]
 8005d3e:	e05a      	b.n	8005df6 <HAL_SD_ConfigWideBusOperation+0x19a>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005d44:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005d48:	d103      	bne.n	8005d52 <HAL_SD_ConfigWideBusOperation+0xf6>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	695b      	ldr	r3, [r3, #20]
 8005d4e:	61fb      	str	r3, [r7, #28]
 8005d50:	e051      	b.n	8005df6 <HAL_SD_ConfigWideBusOperation+0x19a>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005d56:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005d5a:	d126      	bne.n	8005daa <HAL_SD_ConfigWideBusOperation+0x14e>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	695b      	ldr	r3, [r3, #20]
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d10e      	bne.n	8005d82 <HAL_SD_ConfigWideBusOperation+0x126>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 8005d64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d66:	4a45      	ldr	r2, [pc, #276]	@ (8005e7c <HAL_SD_ConfigWideBusOperation+0x220>)
 8005d68:	4293      	cmp	r3, r2
 8005d6a:	d906      	bls.n	8005d7a <HAL_SD_ConfigWideBusOperation+0x11e>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 8005d6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d6e:	4a42      	ldr	r2, [pc, #264]	@ (8005e78 <HAL_SD_ConfigWideBusOperation+0x21c>)
 8005d70:	fba2 2303 	umull	r2, r3, r2, r3
 8005d74:	0e5b      	lsrs	r3, r3, #25
 8005d76:	61fb      	str	r3, [r7, #28]
 8005d78:	e03d      	b.n	8005df6 <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	695b      	ldr	r3, [r3, #20]
 8005d7e:	61fb      	str	r3, [r7, #28]
 8005d80:	e039      	b.n	8005df6 <HAL_SD_ConfigWideBusOperation+0x19a>
          }
        }
        else
        {
          if ((sdmmc_clk/(2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	695b      	ldr	r3, [r3, #20]
 8005d86:	005b      	lsls	r3, r3, #1
 8005d88:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005d8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d8e:	4a3b      	ldr	r2, [pc, #236]	@ (8005e7c <HAL_SD_ConfigWideBusOperation+0x220>)
 8005d90:	4293      	cmp	r3, r2
 8005d92:	d906      	bls.n	8005da2 <HAL_SD_ConfigWideBusOperation+0x146>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 8005d94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d96:	4a38      	ldr	r2, [pc, #224]	@ (8005e78 <HAL_SD_ConfigWideBusOperation+0x21c>)
 8005d98:	fba2 2303 	umull	r2, r3, r2, r3
 8005d9c:	0e5b      	lsrs	r3, r3, #25
 8005d9e:	61fb      	str	r3, [r7, #28]
 8005da0:	e029      	b.n	8005df6 <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	695b      	ldr	r3, [r3, #20]
 8005da6:	61fb      	str	r3, [r7, #28]
 8005da8:	e025      	b.n	8005df6 <HAL_SD_ConfigWideBusOperation+0x19a>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	695b      	ldr	r3, [r3, #20]
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d10e      	bne.n	8005dd0 <HAL_SD_ConfigWideBusOperation+0x174>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 8005db2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005db4:	4a32      	ldr	r2, [pc, #200]	@ (8005e80 <HAL_SD_ConfigWideBusOperation+0x224>)
 8005db6:	4293      	cmp	r3, r2
 8005db8:	d906      	bls.n	8005dc8 <HAL_SD_ConfigWideBusOperation+0x16c>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 8005dba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005dbc:	4a2e      	ldr	r2, [pc, #184]	@ (8005e78 <HAL_SD_ConfigWideBusOperation+0x21c>)
 8005dbe:	fba2 2303 	umull	r2, r3, r2, r3
 8005dc2:	0e1b      	lsrs	r3, r3, #24
 8005dc4:	61fb      	str	r3, [r7, #28]
 8005dc6:	e016      	b.n	8005df6 <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	695b      	ldr	r3, [r3, #20]
 8005dcc:	61fb      	str	r3, [r7, #28]
 8005dce:	e012      	b.n	8005df6 <HAL_SD_ConfigWideBusOperation+0x19a>
          }
        }
        else
        {
          if ((sdmmc_clk/(2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	695b      	ldr	r3, [r3, #20]
 8005dd4:	005b      	lsls	r3, r3, #1
 8005dd6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005dd8:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ddc:	4a28      	ldr	r2, [pc, #160]	@ (8005e80 <HAL_SD_ConfigWideBusOperation+0x224>)
 8005dde:	4293      	cmp	r3, r2
 8005de0:	d906      	bls.n	8005df0 <HAL_SD_ConfigWideBusOperation+0x194>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 8005de2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005de4:	4a24      	ldr	r2, [pc, #144]	@ (8005e78 <HAL_SD_ConfigWideBusOperation+0x21c>)
 8005de6:	fba2 2303 	umull	r2, r3, r2, r3
 8005dea:	0e1b      	lsrs	r3, r3, #24
 8005dec:	61fb      	str	r3, [r7, #28]
 8005dee:	e002      	b.n	8005df6 <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	695b      	ldr	r3, [r3, #20]
 8005df4:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      Init.Transceiver = hsd->Init.Transceiver;
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	699b      	ldr	r3, [r3, #24]
 8005dfa:	623b      	str	r3, [r7, #32]
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
      }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

      (void)SDMMC_Init(hsd->Instance, Init);
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681d      	ldr	r5, [r3, #0]
 8005e00:	466c      	mov	r4, sp
 8005e02:	f107 0318 	add.w	r3, r7, #24
 8005e06:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8005e0a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8005e0e:	f107 030c 	add.w	r3, r7, #12
 8005e12:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005e14:	4628      	mov	r0, r5
 8005e16:	f001 f8a9 	bl	8006f6c <SDMMC_Init>
 8005e1a:	e008      	b.n	8005e2e <HAL_SD_ConfigWideBusOperation+0x1d2>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e20:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	639a      	str	r2, [r3, #56]	@ 0x38
      status = HAL_ERROR;
 8005e28:	2301      	movs	r3, #1
 8005e2a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8005e36:	4618      	mov	r0, r3
 8005e38:	f001 f976 	bl	8007128 <SDMMC_CmdBlockLength>
 8005e3c:	62b8      	str	r0, [r7, #40]	@ 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8005e3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d00c      	beq.n	8005e5e <HAL_SD_ConfigWideBusOperation+0x202>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	4a0a      	ldr	r2, [pc, #40]	@ (8005e74 <HAL_SD_ConfigWideBusOperation+0x218>)
 8005e4a:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005e50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e52:	431a      	orrs	r2, r3
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	639a      	str	r2, [r3, #56]	@ 0x38
    status = HAL_ERROR;
 8005e58:	2301      	movs	r3, #1
 8005e5a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	2201      	movs	r2, #1
 8005e62:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return status;
 8005e66:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8005e6a:	4618      	mov	r0, r3
 8005e6c:	3730      	adds	r7, #48	@ 0x30
 8005e6e:	46bd      	mov	sp, r7
 8005e70:	bdb0      	pop	{r4, r5, r7, pc}
 8005e72:	bf00      	nop
 8005e74:	1fe00fff 	.word	0x1fe00fff
 8005e78:	55e63b89 	.word	0x55e63b89
 8005e7c:	02faf080 	.word	0x02faf080
 8005e80:	017d7840 	.word	0x017d7840

08005e84 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8005e84:	b580      	push	{r7, lr}
 8005e86:	b086      	sub	sp, #24
 8005e88:	af00      	add	r7, sp, #0
 8005e8a:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8005e8c:	2300      	movs	r3, #0
 8005e8e:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8005e90:	f107 030c 	add.w	r3, r7, #12
 8005e94:	4619      	mov	r1, r3
 8005e96:	6878      	ldr	r0, [r7, #4]
 8005e98:	f000 fab0 	bl	80063fc <SD_SendStatus>
 8005e9c:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005e9e:	697b      	ldr	r3, [r7, #20]
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d005      	beq.n	8005eb0 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005ea8:	697b      	ldr	r3, [r7, #20]
 8005eaa:	431a      	orrs	r2, r3
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	0a5b      	lsrs	r3, r3, #9
 8005eb4:	f003 030f 	and.w	r3, r3, #15
 8005eb8:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8005eba:	693b      	ldr	r3, [r7, #16]
}
 8005ebc:	4618      	mov	r0, r3
 8005ebe:	3718      	adds	r7, #24
 8005ec0:	46bd      	mov	sp, r7
 8005ec2:	bd80      	pop	{r7, pc}

08005ec4 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8005ec4:	b5b0      	push	{r4, r5, r7, lr}
 8005ec6:	b090      	sub	sp, #64	@ 0x40
 8005ec8:	af00      	add	r7, sp, #0
 8005eca:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8005ecc:	2301      	movs	r3, #1
 8005ece:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	4618      	mov	r0, r3
 8005ed6:	f001 f8a3 	bl	8007020 <SDMMC_GetPowerState>
 8005eda:	4603      	mov	r3, r0
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d102      	bne.n	8005ee6 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8005ee0:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8005ee4:	e0a9      	b.n	800603a <SD_InitCard+0x176>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005eea:	2b03      	cmp	r3, #3
 8005eec:	d02e      	beq.n	8005f4c <SD_InitCard+0x88>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	4618      	mov	r0, r3
 8005ef4:	f001 fae8 	bl	80074c8 <SDMMC_CmdSendCID>
 8005ef8:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8005efa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d001      	beq.n	8005f04 <SD_InitCard+0x40>
    {
      return errorstate;
 8005f00:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005f02:	e09a      	b.n	800603a <SD_InitCard+0x176>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	2100      	movs	r1, #0
 8005f0a:	4618      	mov	r0, r3
 8005f0c:	f001 f8cd 	bl	80070aa <SDMMC_GetResponse>
 8005f10:	4602      	mov	r2, r0
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	671a      	str	r2, [r3, #112]	@ 0x70
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	2104      	movs	r1, #4
 8005f1c:	4618      	mov	r0, r3
 8005f1e:	f001 f8c4 	bl	80070aa <SDMMC_GetResponse>
 8005f22:	4602      	mov	r2, r0
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	2108      	movs	r1, #8
 8005f2e:	4618      	mov	r0, r3
 8005f30:	f001 f8bb 	bl	80070aa <SDMMC_GetResponse>
 8005f34:	4602      	mov	r2, r0
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	679a      	str	r2, [r3, #120]	@ 0x78
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	210c      	movs	r1, #12
 8005f40:	4618      	mov	r0, r3
 8005f42:	f001 f8b2 	bl	80070aa <SDMMC_GetResponse>
 8005f46:	4602      	mov	r2, r0
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	67da      	str	r2, [r3, #124]	@ 0x7c
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005f50:	2b03      	cmp	r3, #3
 8005f52:	d00d      	beq.n	8005f70 <SD_InitCard+0xac>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	f107 020e 	add.w	r2, r7, #14
 8005f5c:	4611      	mov	r1, r2
 8005f5e:	4618      	mov	r0, r3
 8005f60:	f001 faf1 	bl	8007546 <SDMMC_CmdSetRelAdd>
 8005f64:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8005f66:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d001      	beq.n	8005f70 <SD_InitCard+0xac>
    {
      return errorstate;
 8005f6c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005f6e:	e064      	b.n	800603a <SD_InitCard+0x176>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005f74:	2b03      	cmp	r3, #3
 8005f76:	d036      	beq.n	8005fe6 <SD_InitCard+0x122>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8005f78:	89fb      	ldrh	r3, [r7, #14]
 8005f7a:	461a      	mov	r2, r3
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	649a      	str	r2, [r3, #72]	@ 0x48

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681a      	ldr	r2, [r3, #0]
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005f88:	041b      	lsls	r3, r3, #16
 8005f8a:	4619      	mov	r1, r3
 8005f8c:	4610      	mov	r0, r2
 8005f8e:	f001 faba 	bl	8007506 <SDMMC_CmdSendCSD>
 8005f92:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8005f94:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d001      	beq.n	8005f9e <SD_InitCard+0xda>
    {
      return errorstate;
 8005f9a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005f9c:	e04d      	b.n	800603a <SD_InitCard+0x176>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	2100      	movs	r1, #0
 8005fa4:	4618      	mov	r0, r3
 8005fa6:	f001 f880 	bl	80070aa <SDMMC_GetResponse>
 8005faa:	4602      	mov	r2, r0
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	661a      	str	r2, [r3, #96]	@ 0x60
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	2104      	movs	r1, #4
 8005fb6:	4618      	mov	r0, r3
 8005fb8:	f001 f877 	bl	80070aa <SDMMC_GetResponse>
 8005fbc:	4602      	mov	r2, r0
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	2108      	movs	r1, #8
 8005fc8:	4618      	mov	r0, r3
 8005fca:	f001 f86e 	bl	80070aa <SDMMC_GetResponse>
 8005fce:	4602      	mov	r2, r0
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	669a      	str	r2, [r3, #104]	@ 0x68
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	210c      	movs	r1, #12
 8005fda:	4618      	mov	r0, r3
 8005fdc:	f001 f865 	bl	80070aa <SDMMC_GetResponse>
 8005fe0:	4602      	mov	r2, r0
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	66da      	str	r2, [r3, #108]	@ 0x6c
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	2104      	movs	r1, #4
 8005fec:	4618      	mov	r0, r3
 8005fee:	f001 f85c 	bl	80070aa <SDMMC_GetResponse>
 8005ff2:	4603      	mov	r3, r0
 8005ff4:	0d1a      	lsrs	r2, r3, #20
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8005ffa:	f107 0310 	add.w	r3, r7, #16
 8005ffe:	4619      	mov	r1, r3
 8006000:	6878      	ldr	r0, [r7, #4]
 8006002:	f7ff fba5 	bl	8005750 <HAL_SD_GetCardCSD>
 8006006:	4603      	mov	r3, r0
 8006008:	2b00      	cmp	r3, #0
 800600a:	d002      	beq.n	8006012 <SD_InitCard+0x14e>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800600c:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8006010:	e013      	b.n	800603a <SD_InitCard+0x176>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	6819      	ldr	r1, [r3, #0]
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800601a:	041b      	lsls	r3, r3, #16
 800601c:	2200      	movs	r2, #0
 800601e:	461c      	mov	r4, r3
 8006020:	4615      	mov	r5, r2
 8006022:	4622      	mov	r2, r4
 8006024:	462b      	mov	r3, r5
 8006026:	4608      	mov	r0, r1
 8006028:	f001 f964 	bl	80072f4 <SDMMC_CmdSelDesel>
 800602c:	63f8      	str	r0, [r7, #60]	@ 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800602e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006030:	2b00      	cmp	r3, #0
 8006032:	d001      	beq.n	8006038 <SD_InitCard+0x174>
  {
    return errorstate;
 8006034:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006036:	e000      	b.n	800603a <SD_InitCard+0x176>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8006038:	2300      	movs	r3, #0
}
 800603a:	4618      	mov	r0, r3
 800603c:	3740      	adds	r7, #64	@ 0x40
 800603e:	46bd      	mov	sp, r7
 8006040:	bdb0      	pop	{r4, r5, r7, pc}
	...

08006044 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8006044:	b580      	push	{r7, lr}
 8006046:	b088      	sub	sp, #32
 8006048:	af00      	add	r7, sp, #0
 800604a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800604c:	2300      	movs	r3, #0
 800604e:	60fb      	str	r3, [r7, #12]
  uint32_t response = 0U, validvoltage = 0U;
 8006050:	2300      	movs	r3, #0
 8006052:	61fb      	str	r3, [r7, #28]
 8006054:	2300      	movs	r3, #0
 8006056:	61bb      	str	r3, [r7, #24]
  uint32_t errorstate;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t tickstart = HAL_GetTick();
 8006058:	f7fb fee0 	bl	8001e1c <HAL_GetTick>
 800605c:	6178      	str	r0, [r7, #20]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	4618      	mov	r0, r3
 8006064:	f001 f96a 	bl	800733c <SDMMC_CmdGoIdleState>
 8006068:	6138      	str	r0, [r7, #16]
  if(errorstate != HAL_SD_ERROR_NONE)
 800606a:	693b      	ldr	r3, [r7, #16]
 800606c:	2b00      	cmp	r3, #0
 800606e:	d001      	beq.n	8006074 <SD_PowerON+0x30>
  {
    return errorstate;
 8006070:	693b      	ldr	r3, [r7, #16]
 8006072:	e0ed      	b.n	8006250 <SD_PowerON+0x20c>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	4618      	mov	r0, r3
 800607a:	f001 f97d 	bl	8007378 <SDMMC_CmdOperCond>
 800607e:	6138      	str	r0, [r7, #16]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006080:	693b      	ldr	r3, [r7, #16]
 8006082:	2b00      	cmp	r3, #0
 8006084:	d00d      	beq.n	80060a2 <SD_PowerON+0x5e>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	2200      	movs	r2, #0
 800608a:	641a      	str	r2, [r3, #64]	@ 0x40
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	4618      	mov	r0, r3
 8006092:	f001 f953 	bl	800733c <SDMMC_CmdGoIdleState>
 8006096:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006098:	693b      	ldr	r3, [r7, #16]
 800609a:	2b00      	cmp	r3, #0
 800609c:	d004      	beq.n	80060a8 <SD_PowerON+0x64>
    {
      return errorstate;
 800609e:	693b      	ldr	r3, [r7, #16]
 80060a0:	e0d6      	b.n	8006250 <SD_PowerON+0x20c>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	2201      	movs	r2, #1
 80060a6:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80060ac:	2b01      	cmp	r3, #1
 80060ae:	d137      	bne.n	8006120 <SD_PowerON+0xdc>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	2100      	movs	r1, #0
 80060b6:	4618      	mov	r0, r3
 80060b8:	f001 f97e 	bl	80073b8 <SDMMC_CmdAppCommand>
 80060bc:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 80060be:	693b      	ldr	r3, [r7, #16]
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d02d      	beq.n	8006120 <SD_PowerON+0xdc>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80060c4:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80060c8:	e0c2      	b.n	8006250 <SD_PowerON+0x20c>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	2100      	movs	r1, #0
 80060d0:	4618      	mov	r0, r3
 80060d2:	f001 f971 	bl	80073b8 <SDMMC_CmdAppCommand>
 80060d6:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 80060d8:	693b      	ldr	r3, [r7, #16]
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d001      	beq.n	80060e2 <SD_PowerON+0x9e>
    {
      return errorstate;
 80060de:	693b      	ldr	r3, [r7, #16]
 80060e0:	e0b6      	b.n	8006250 <SD_PowerON+0x20c>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	495c      	ldr	r1, [pc, #368]	@ (8006258 <SD_PowerON+0x214>)
 80060e8:	4618      	mov	r0, r3
 80060ea:	f001 f988 	bl	80073fe <SDMMC_CmdAppOperCommand>
 80060ee:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 80060f0:	693b      	ldr	r3, [r7, #16]
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d002      	beq.n	80060fc <SD_PowerON+0xb8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80060f6:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80060fa:	e0a9      	b.n	8006250 <SD_PowerON+0x20c>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	2100      	movs	r1, #0
 8006102:	4618      	mov	r0, r3
 8006104:	f000 ffd1 	bl	80070aa <SDMMC_GetResponse>
 8006108:	61f8      	str	r0, [r7, #28]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800610a:	69fb      	ldr	r3, [r7, #28]
 800610c:	0fdb      	lsrs	r3, r3, #31
 800610e:	2b01      	cmp	r3, #1
 8006110:	d101      	bne.n	8006116 <SD_PowerON+0xd2>
 8006112:	2301      	movs	r3, #1
 8006114:	e000      	b.n	8006118 <SD_PowerON+0xd4>
 8006116:	2300      	movs	r3, #0
 8006118:	61bb      	str	r3, [r7, #24]

    count++;
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	3301      	adds	r3, #1
 800611e:	60fb      	str	r3, [r7, #12]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8006126:	4293      	cmp	r3, r2
 8006128:	d802      	bhi.n	8006130 <SD_PowerON+0xec>
 800612a:	69bb      	ldr	r3, [r7, #24]
 800612c:	2b00      	cmp	r3, #0
 800612e:	d0cc      	beq.n	80060ca <SD_PowerON+0x86>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8006136:	4293      	cmp	r3, r2
 8006138:	d902      	bls.n	8006140 <SD_PowerON+0xfc>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800613a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800613e:	e087      	b.n	8006250 <SD_PowerON+0x20c>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8006140:	69fb      	ldr	r3, [r7, #28]
 8006142:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8006146:	2b00      	cmp	r3, #0
 8006148:	d07e      	beq.n	8006248 <SD_PowerON+0x204>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	2201      	movs	r2, #1
 800614e:	63da      	str	r2, [r3, #60]	@ 0x3c
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(hsd->Init.Transceiver == SDMMC_TRANSCEIVER_ENABLE)
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	699b      	ldr	r3, [r3, #24]
 8006154:	2b01      	cmp	r3, #1
 8006156:	d17a      	bne.n	800624e <SD_PowerON+0x20a>
    {
      if((response & SD_SWITCH_1_8V_CAPACITY) == SD_SWITCH_1_8V_CAPACITY)
 8006158:	69fb      	ldr	r3, [r7, #28]
 800615a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800615e:	2b00      	cmp	r3, #0
 8006160:	d075      	beq.n	800624e <SD_PowerON+0x20a>
      {
        hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006168:	65da      	str	r2, [r3, #92]	@ 0x5c

        /* Start switching procedue */
        hsd->Instance->POWER |= SDMMC_POWER_VSWITCHEN;
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	681a      	ldr	r2, [r3, #0]
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	f042 0208 	orr.w	r2, r2, #8
 8006178:	601a      	str	r2, [r3, #0]

        /* Send CMD11 to switch 1.8V mode */
        errorstate = SDMMC_CmdVoltageSwitch(hsd->Instance);
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	4618      	mov	r0, r3
 8006180:	f001 fa48 	bl	8007614 <SDMMC_CmdVoltageSwitch>
 8006184:	6138      	str	r0, [r7, #16]
        if(errorstate != HAL_SD_ERROR_NONE)
 8006186:	693b      	ldr	r3, [r7, #16]
 8006188:	2b00      	cmp	r3, #0
 800618a:	d00c      	beq.n	80061a6 <SD_PowerON+0x162>
        {
          return errorstate;
 800618c:	693b      	ldr	r3, [r7, #16]
 800618e:	e05f      	b.n	8006250 <SD_PowerON+0x20c>
        }

        /* Check to CKSTOP */
        while(( hsd->Instance->STA & SDMMC_FLAG_CKSTOP) != SDMMC_FLAG_CKSTOP)
        {
          if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8006190:	f7fb fe44 	bl	8001e1c <HAL_GetTick>
 8006194:	4602      	mov	r2, r0
 8006196:	697b      	ldr	r3, [r7, #20]
 8006198:	1ad3      	subs	r3, r2, r3
 800619a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800619e:	d102      	bne.n	80061a6 <SD_PowerON+0x162>
          {
            return HAL_SD_ERROR_TIMEOUT;
 80061a0:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80061a4:	e054      	b.n	8006250 <SD_PowerON+0x20c>
        while(( hsd->Instance->STA & SDMMC_FLAG_CKSTOP) != SDMMC_FLAG_CKSTOP)
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80061ac:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80061b0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80061b4:	d1ec      	bne.n	8006190 <SD_PowerON+0x14c>
          }
        }

        /* Clear CKSTOP Flag */
        hsd->Instance->ICR = SDMMC_FLAG_CKSTOP;
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80061be:	639a      	str	r2, [r3, #56]	@ 0x38

        /* Check to BusyD0 */
        if(( hsd->Instance->STA & SDMMC_FLAG_BUSYD0) != SDMMC_FLAG_BUSYD0)
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80061c6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80061ca:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80061ce:	d002      	beq.n	80061d6 <SD_PowerON+0x192>
        {
          /* Error when activate Voltage Switch in SDMMC Peripheral */
          return SDMMC_ERROR_UNSUPPORTED_FEATURE;
 80061d0:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80061d4:	e03c      	b.n	8006250 <SD_PowerON+0x20c>
        {
          /* Enable Transceiver Switch PIN */
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->DriveTransceiver_1_8V_Callback(SET);
#else
          HAL_SDEx_DriveTransceiver_1_8V_Callback(SET);
 80061d6:	2001      	movs	r0, #1
 80061d8:	f000 fb44 	bl	8006864 <HAL_SDEx_DriveTransceiver_1_8V_Callback>
#endif

          /* Switch ready */
          hsd->Instance->POWER |= SDMMC_POWER_VSWITCH;
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	681a      	ldr	r2, [r3, #0]
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	f042 0204 	orr.w	r2, r2, #4
 80061ea:	601a      	str	r2, [r3, #0]

          /* Check VSWEND Flag */
          while(( hsd->Instance->STA & SDMMC_FLAG_VSWEND) != SDMMC_FLAG_VSWEND)
 80061ec:	e00a      	b.n	8006204 <SD_PowerON+0x1c0>
          {
            if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80061ee:	f7fb fe15 	bl	8001e1c <HAL_GetTick>
 80061f2:	4602      	mov	r2, r0
 80061f4:	697b      	ldr	r3, [r7, #20]
 80061f6:	1ad3      	subs	r3, r2, r3
 80061f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061fc:	d102      	bne.n	8006204 <SD_PowerON+0x1c0>
            {
              return HAL_SD_ERROR_TIMEOUT;
 80061fe:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8006202:	e025      	b.n	8006250 <SD_PowerON+0x20c>
          while(( hsd->Instance->STA & SDMMC_FLAG_VSWEND) != SDMMC_FLAG_VSWEND)
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800620a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800620e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006212:	d1ec      	bne.n	80061ee <SD_PowerON+0x1aa>
            }
          }

          /* Clear VSWEND Flag */
          hsd->Instance->ICR = SDMMC_FLAG_VSWEND;
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800621c:	639a      	str	r2, [r3, #56]	@ 0x38

          /* Check BusyD0 status */
          if(( hsd->Instance->STA & SDMMC_FLAG_BUSYD0) == SDMMC_FLAG_BUSYD0)
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006224:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006228:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800622c:	d102      	bne.n	8006234 <SD_PowerON+0x1f0>
          {
            /* Error when enabling 1.8V mode */
            return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800622e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006232:	e00d      	b.n	8006250 <SD_PowerON+0x20c>
          }
          /* Switch to 1.8V OK */

          /* Disable VSWITCH FLAG from SDMMC Peripheral */
          hsd->Instance->POWER = 0x13U;
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	2213      	movs	r2, #19
 800623a:	601a      	str	r2, [r3, #0]

          /* Clean Status flags */
          hsd->Instance->ICR = 0xFFFFFFFFU;
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	f04f 32ff 	mov.w	r2, #4294967295
 8006244:	639a      	str	r2, [r3, #56]	@ 0x38
 8006246:	e002      	b.n	800624e <SD_PowerON+0x20a>
    }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	2200      	movs	r2, #0
 800624c:	63da      	str	r2, [r3, #60]	@ 0x3c
  }


  return HAL_SD_ERROR_NONE;
 800624e:	2300      	movs	r3, #0
}
 8006250:	4618      	mov	r0, r3
 8006252:	3720      	adds	r7, #32
 8006254:	46bd      	mov	sp, r7
 8006256:	bd80      	pop	{r7, pc}
 8006258:	c1100000 	.word	0xc1100000

0800625c <SD_SendSDStatus>:
  * @param  pSDstatus Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 800625c:	b580      	push	{r7, lr}
 800625e:	b08c      	sub	sp, #48	@ 0x30
 8006260:	af00      	add	r7, sp, #0
 8006262:	6078      	str	r0, [r7, #4]
 8006264:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8006266:	f7fb fdd9 	bl	8001e1c <HAL_GetTick>
 800626a:	6278      	str	r0, [r7, #36]	@ 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 800626c:	683b      	ldr	r3, [r7, #0]
 800626e:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check SD response */
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	2100      	movs	r1, #0
 8006276:	4618      	mov	r0, r3
 8006278:	f000 ff17 	bl	80070aa <SDMMC_GetResponse>
 800627c:	4603      	mov	r3, r0
 800627e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006282:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006286:	d102      	bne.n	800628e <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8006288:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800628c:	e0b0      	b.n	80063f0 <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	2140      	movs	r1, #64	@ 0x40
 8006294:	4618      	mov	r0, r3
 8006296:	f000 ff47 	bl	8007128 <SDMMC_CmdBlockLength>
 800629a:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800629c:	6a3b      	ldr	r3, [r7, #32]
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d005      	beq.n	80062ae <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	639a      	str	r2, [r3, #56]	@ 0x38
    return errorstate;
 80062aa:	6a3b      	ldr	r3, [r7, #32]
 80062ac:	e0a0      	b.n	80063f0 <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681a      	ldr	r2, [r3, #0]
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80062b6:	041b      	lsls	r3, r3, #16
 80062b8:	4619      	mov	r1, r3
 80062ba:	4610      	mov	r0, r2
 80062bc:	f001 f87c 	bl	80073b8 <SDMMC_CmdAppCommand>
 80062c0:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80062c2:	6a3b      	ldr	r3, [r7, #32]
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d005      	beq.n	80062d4 <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	639a      	str	r2, [r3, #56]	@ 0x38
    return errorstate;
 80062d0:	6a3b      	ldr	r3, [r7, #32]
 80062d2:	e08d      	b.n	80063f0 <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80062d4:	f04f 33ff 	mov.w	r3, #4294967295
 80062d8:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 80062da:	2340      	movs	r3, #64	@ 0x40
 80062dc:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 80062de:	2360      	movs	r3, #96	@ 0x60
 80062e0:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 80062e2:	2302      	movs	r3, #2
 80062e4:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80062e6:	2300      	movs	r3, #0
 80062e8:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 80062ea:	2301      	movs	r3, #1
 80062ec:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	f107 0208 	add.w	r2, r7, #8
 80062f6:	4611      	mov	r1, r2
 80062f8:	4618      	mov	r0, r3
 80062fa:	f000 fee9 	bl	80070d0 <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	4618      	mov	r0, r3
 8006304:	f001 f964 	bl	80075d0 <SDMMC_CmdStatusRegister>
 8006308:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800630a:	6a3b      	ldr	r3, [r7, #32]
 800630c:	2b00      	cmp	r3, #0
 800630e:	d02b      	beq.n	8006368 <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	639a      	str	r2, [r3, #56]	@ 0x38
    return errorstate;
 8006318:	6a3b      	ldr	r3, [r7, #32]
 800631a:	e069      	b.n	80063f0 <SD_SendSDStatus+0x194>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
#else
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006322:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006326:	2b00      	cmp	r3, #0
 8006328:	d013      	beq.n	8006352 <SD_SendSDStatus+0xf6>
    {
      for(count = 0U; count < 8U; count++)
 800632a:	2300      	movs	r3, #0
 800632c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800632e:	e00d      	b.n	800634c <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	4618      	mov	r0, r3
 8006336:	f000 fe43 	bl	8006fc0 <SDMMC_ReadFIFO>
 800633a:	4602      	mov	r2, r0
 800633c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800633e:	601a      	str	r2, [r3, #0]
        pData++;
 8006340:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006342:	3304      	adds	r3, #4
 8006344:	62bb      	str	r3, [r7, #40]	@ 0x28
      for(count = 0U; count < 8U; count++)
 8006346:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006348:	3301      	adds	r3, #1
 800634a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800634c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800634e:	2b07      	cmp	r3, #7
 8006350:	d9ee      	bls.n	8006330 <SD_SendSDStatus+0xd4>
      }
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8006352:	f7fb fd63 	bl	8001e1c <HAL_GetTick>
 8006356:	4602      	mov	r2, r0
 8006358:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800635a:	1ad3      	subs	r3, r2, r3
 800635c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006360:	d102      	bne.n	8006368 <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8006362:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8006366:	e043      	b.n	80063f0 <SD_SendSDStatus+0x194>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800636e:	f403 7395 	and.w	r3, r3, #298	@ 0x12a
 8006372:	2b00      	cmp	r3, #0
 8006374:	d0d2      	beq.n	800631c <SD_SendSDStatus+0xc0>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800637c:	f003 0308 	and.w	r3, r3, #8
 8006380:	2b00      	cmp	r3, #0
 8006382:	d001      	beq.n	8006388 <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 8006384:	2308      	movs	r3, #8
 8006386:	e033      	b.n	80063f0 <SD_SendSDStatus+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800638e:	f003 0302 	and.w	r3, r3, #2
 8006392:	2b00      	cmp	r3, #0
 8006394:	d001      	beq.n	800639a <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8006396:	2302      	movs	r3, #2
 8006398:	e02a      	b.n	80063f0 <SD_SendSDStatus+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80063a0:	f003 0320 	and.w	r3, r3, #32
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d017      	beq.n	80063d8 <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 80063a8:	2320      	movs	r3, #32
 80063aa:	e021      	b.n	80063f0 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
#else
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL)))
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	4618      	mov	r0, r3
 80063b2:	f000 fe05 	bl	8006fc0 <SDMMC_ReadFIFO>
 80063b6:	4602      	mov	r2, r0
 80063b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063ba:	601a      	str	r2, [r3, #0]
    pData++;
 80063bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063be:	3304      	adds	r3, #4
 80063c0:	62bb      	str	r3, [r7, #40]	@ 0x28

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80063c2:	f7fb fd2b 	bl	8001e1c <HAL_GetTick>
 80063c6:	4602      	mov	r2, r0
 80063c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063ca:	1ad3      	subs	r3, r2, r3
 80063cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063d0:	d102      	bne.n	80063d8 <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 80063d2:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80063d6:	e00b      	b.n	80063f0 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80063de:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d1e2      	bne.n	80063ac <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	4a03      	ldr	r2, [pc, #12]	@ (80063f8 <SD_SendSDStatus+0x19c>)
 80063ec:	639a      	str	r2, [r3, #56]	@ 0x38

  return HAL_SD_ERROR_NONE;
 80063ee:	2300      	movs	r3, #0
}
 80063f0:	4618      	mov	r0, r3
 80063f2:	3730      	adds	r7, #48	@ 0x30
 80063f4:	46bd      	mov	sp, r7
 80063f6:	bd80      	pop	{r7, pc}
 80063f8:	18000f3a 	.word	0x18000f3a

080063fc <SD_SendStatus>:
  * @param  pCardStatus pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 80063fc:	b580      	push	{r7, lr}
 80063fe:	b084      	sub	sp, #16
 8006400:	af00      	add	r7, sp, #0
 8006402:	6078      	str	r0, [r7, #4]
 8006404:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8006406:	683b      	ldr	r3, [r7, #0]
 8006408:	2b00      	cmp	r3, #0
 800640a:	d102      	bne.n	8006412 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800640c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8006410:	e018      	b.n	8006444 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681a      	ldr	r2, [r3, #0]
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800641a:	041b      	lsls	r3, r3, #16
 800641c:	4619      	mov	r1, r3
 800641e:	4610      	mov	r0, r2
 8006420:	f001 f8b3 	bl	800758a <SDMMC_CmdSendStatus>
 8006424:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	2b00      	cmp	r3, #0
 800642a:	d001      	beq.n	8006430 <SD_SendStatus+0x34>
  {
    return errorstate;
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	e009      	b.n	8006444 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	2100      	movs	r1, #0
 8006436:	4618      	mov	r0, r3
 8006438:	f000 fe37 	bl	80070aa <SDMMC_GetResponse>
 800643c:	4602      	mov	r2, r0
 800643e:	683b      	ldr	r3, [r7, #0]
 8006440:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8006442:	2300      	movs	r3, #0
}
 8006444:	4618      	mov	r0, r3
 8006446:	3710      	adds	r7, #16
 8006448:	46bd      	mov	sp, r7
 800644a:	bd80      	pop	{r7, pc}

0800644c <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800644c:	b580      	push	{r7, lr}
 800644e:	b086      	sub	sp, #24
 8006450:	af00      	add	r7, sp, #0
 8006452:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8006454:	2300      	movs	r3, #0
 8006456:	60fb      	str	r3, [r7, #12]
 8006458:	2300      	movs	r3, #0
 800645a:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	2100      	movs	r1, #0
 8006462:	4618      	mov	r0, r3
 8006464:	f000 fe21 	bl	80070aa <SDMMC_GetResponse>
 8006468:	4603      	mov	r3, r0
 800646a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800646e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006472:	d102      	bne.n	800647a <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8006474:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8006478:	e02f      	b.n	80064da <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800647a:	f107 030c 	add.w	r3, r7, #12
 800647e:	4619      	mov	r1, r3
 8006480:	6878      	ldr	r0, [r7, #4]
 8006482:	f000 f879 	bl	8006578 <SD_FindSCR>
 8006486:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006488:	697b      	ldr	r3, [r7, #20]
 800648a:	2b00      	cmp	r3, #0
 800648c:	d001      	beq.n	8006492 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800648e:	697b      	ldr	r3, [r7, #20]
 8006490:	e023      	b.n	80064da <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8006492:	693b      	ldr	r3, [r7, #16]
 8006494:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006498:	2b00      	cmp	r3, #0
 800649a:	d01c      	beq.n	80064d6 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681a      	ldr	r2, [r3, #0]
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80064a4:	041b      	lsls	r3, r3, #16
 80064a6:	4619      	mov	r1, r3
 80064a8:	4610      	mov	r0, r2
 80064aa:	f000 ff85 	bl	80073b8 <SDMMC_CmdAppCommand>
 80064ae:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80064b0:	697b      	ldr	r3, [r7, #20]
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d001      	beq.n	80064ba <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 80064b6:	697b      	ldr	r3, [r7, #20]
 80064b8:	e00f      	b.n	80064da <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	2102      	movs	r1, #2
 80064c0:	4618      	mov	r0, r3
 80064c2:	f000 ffbc 	bl	800743e <SDMMC_CmdBusWidth>
 80064c6:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80064c8:	697b      	ldr	r3, [r7, #20]
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d001      	beq.n	80064d2 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 80064ce:	697b      	ldr	r3, [r7, #20]
 80064d0:	e003      	b.n	80064da <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 80064d2:	2300      	movs	r3, #0
 80064d4:	e001      	b.n	80064da <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80064d6:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 80064da:	4618      	mov	r0, r3
 80064dc:	3718      	adds	r7, #24
 80064de:	46bd      	mov	sp, r7
 80064e0:	bd80      	pop	{r7, pc}

080064e2 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 80064e2:	b580      	push	{r7, lr}
 80064e4:	b086      	sub	sp, #24
 80064e6:	af00      	add	r7, sp, #0
 80064e8:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 80064ea:	2300      	movs	r3, #0
 80064ec:	60fb      	str	r3, [r7, #12]
 80064ee:	2300      	movs	r3, #0
 80064f0:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	2100      	movs	r1, #0
 80064f8:	4618      	mov	r0, r3
 80064fa:	f000 fdd6 	bl	80070aa <SDMMC_GetResponse>
 80064fe:	4603      	mov	r3, r0
 8006500:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006504:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006508:	d102      	bne.n	8006510 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800650a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800650e:	e02f      	b.n	8006570 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8006510:	f107 030c 	add.w	r3, r7, #12
 8006514:	4619      	mov	r1, r3
 8006516:	6878      	ldr	r0, [r7, #4]
 8006518:	f000 f82e 	bl	8006578 <SD_FindSCR>
 800651c:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800651e:	697b      	ldr	r3, [r7, #20]
 8006520:	2b00      	cmp	r3, #0
 8006522:	d001      	beq.n	8006528 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8006524:	697b      	ldr	r3, [r7, #20]
 8006526:	e023      	b.n	8006570 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8006528:	693b      	ldr	r3, [r7, #16]
 800652a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800652e:	2b00      	cmp	r3, #0
 8006530:	d01c      	beq.n	800656c <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681a      	ldr	r2, [r3, #0]
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800653a:	041b      	lsls	r3, r3, #16
 800653c:	4619      	mov	r1, r3
 800653e:	4610      	mov	r0, r2
 8006540:	f000 ff3a 	bl	80073b8 <SDMMC_CmdAppCommand>
 8006544:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006546:	697b      	ldr	r3, [r7, #20]
 8006548:	2b00      	cmp	r3, #0
 800654a:	d001      	beq.n	8006550 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800654c:	697b      	ldr	r3, [r7, #20]
 800654e:	e00f      	b.n	8006570 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	2100      	movs	r1, #0
 8006556:	4618      	mov	r0, r3
 8006558:	f000 ff71 	bl	800743e <SDMMC_CmdBusWidth>
 800655c:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800655e:	697b      	ldr	r3, [r7, #20]
 8006560:	2b00      	cmp	r3, #0
 8006562:	d001      	beq.n	8006568 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8006564:	697b      	ldr	r3, [r7, #20]
 8006566:	e003      	b.n	8006570 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8006568:	2300      	movs	r3, #0
 800656a:	e001      	b.n	8006570 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800656c:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 8006570:	4618      	mov	r0, r3
 8006572:	3718      	adds	r7, #24
 8006574:	46bd      	mov	sp, r7
 8006576:	bd80      	pop	{r7, pc}

08006578 <SD_FindSCR>:
  * @param  hsd Pointer to SD handle
  * @param  pSCR pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8006578:	b580      	push	{r7, lr}
 800657a:	b08e      	sub	sp, #56	@ 0x38
 800657c:	af00      	add	r7, sp, #0
 800657e:	6078      	str	r0, [r7, #4]
 8006580:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8006582:	f7fb fc4b 	bl	8001e1c <HAL_GetTick>
 8006586:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t index = 0U;
 8006588:	2300      	movs	r3, #0
 800658a:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 800658c:	2300      	movs	r3, #0
 800658e:	60bb      	str	r3, [r7, #8]
 8006590:	2300      	movs	r3, #0
 8006592:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8006594:	683b      	ldr	r3, [r7, #0]
 8006596:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	2108      	movs	r1, #8
 800659e:	4618      	mov	r0, r3
 80065a0:	f000 fdc2 	bl	8007128 <SDMMC_CmdBlockLength>
 80065a4:	62b8      	str	r0, [r7, #40]	@ 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80065a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d001      	beq.n	80065b0 <SD_FindSCR+0x38>
  {
    return errorstate;
 80065ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80065ae:	e0ad      	b.n	800670c <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681a      	ldr	r2, [r3, #0]
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80065b8:	041b      	lsls	r3, r3, #16
 80065ba:	4619      	mov	r1, r3
 80065bc:	4610      	mov	r0, r2
 80065be:	f000 fefb 	bl	80073b8 <SDMMC_CmdAppCommand>
 80065c2:	62b8      	str	r0, [r7, #40]	@ 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80065c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d001      	beq.n	80065ce <SD_FindSCR+0x56>
  {
    return errorstate;
 80065ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80065cc:	e09e      	b.n	800670c <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80065ce:	f04f 33ff 	mov.w	r3, #4294967295
 80065d2:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 80065d4:	2308      	movs	r3, #8
 80065d6:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 80065d8:	2330      	movs	r3, #48	@ 0x30
 80065da:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 80065dc:	2302      	movs	r3, #2
 80065de:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80065e0:	2300      	movs	r3, #0
 80065e2:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 80065e4:	2301      	movs	r3, #1
 80065e6:	627b      	str	r3, [r7, #36]	@ 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	f107 0210 	add.w	r2, r7, #16
 80065f0:	4611      	mov	r1, r2
 80065f2:	4618      	mov	r0, r3
 80065f4:	f000 fd6c 	bl	80070d0 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	4618      	mov	r0, r3
 80065fe:	f000 ff41 	bl	8007484 <SDMMC_CmdSendSCR>
 8006602:	62b8      	str	r0, [r7, #40]	@ 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8006604:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006606:	2b00      	cmp	r3, #0
 8006608:	d027      	beq.n	800665a <SD_FindSCR+0xe2>
  {
    return errorstate;
 800660a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800660c:	e07e      	b.n	800670c <SD_FindSCR+0x194>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
  {
    if((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006614:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006618:	2b00      	cmp	r3, #0
 800661a:	d113      	bne.n	8006644 <SD_FindSCR+0xcc>
 800661c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800661e:	2b00      	cmp	r3, #0
 8006620:	d110      	bne.n	8006644 <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	4618      	mov	r0, r3
 8006628:	f000 fcca 	bl	8006fc0 <SDMMC_ReadFIFO>
 800662c:	4603      	mov	r3, r0
 800662e:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	4618      	mov	r0, r3
 8006636:	f000 fcc3 	bl	8006fc0 <SDMMC_ReadFIFO>
 800663a:	4603      	mov	r3, r0
 800663c:	60fb      	str	r3, [r7, #12]
      index++;
 800663e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006640:	3301      	adds	r3, #1
 8006642:	637b      	str	r3, [r7, #52]	@ 0x34
    }


    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8006644:	f7fb fbea 	bl	8001e1c <HAL_GetTick>
 8006648:	4602      	mov	r2, r0
 800664a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800664c:	1ad3      	subs	r3, r2, r3
 800664e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006652:	d102      	bne.n	800665a <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8006654:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8006658:	e058      	b.n	800670c <SD_FindSCR+0x194>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006660:	f240 532a 	movw	r3, #1322	@ 0x52a
 8006664:	4013      	ands	r3, r2
 8006666:	2b00      	cmp	r3, #0
 8006668:	d0d1      	beq.n	800660e <SD_FindSCR+0x96>
      return HAL_SD_ERROR_TIMEOUT;
    }
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006670:	f003 0308 	and.w	r3, r3, #8
 8006674:	2b00      	cmp	r3, #0
 8006676:	d005      	beq.n	8006684 <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	2208      	movs	r2, #8
 800667e:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8006680:	2308      	movs	r3, #8
 8006682:	e043      	b.n	800670c <SD_FindSCR+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800668a:	f003 0302 	and.w	r3, r3, #2
 800668e:	2b00      	cmp	r3, #0
 8006690:	d005      	beq.n	800669e <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	2202      	movs	r2, #2
 8006698:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800669a:	2302      	movs	r3, #2
 800669c:	e036      	b.n	800670c <SD_FindSCR+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80066a4:	f003 0320 	and.w	r3, r3, #32
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d005      	beq.n	80066b8 <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	2220      	movs	r2, #32
 80066b2:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 80066b4:	2320      	movs	r3, #32
 80066b6:	e029      	b.n	800670c <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	4a15      	ldr	r2, [pc, #84]	@ (8006714 <SD_FindSCR+0x19c>)
 80066be:	639a      	str	r2, [r3, #56]	@ 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	061a      	lsls	r2, r3, #24
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	021b      	lsls	r3, r3, #8
 80066c8:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80066cc:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	0a1b      	lsrs	r3, r3, #8
 80066d2:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80066d6:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	0e1b      	lsrs	r3, r3, #24
 80066dc:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80066de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80066e0:	601a      	str	r2, [r3, #0]
    scr++;
 80066e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80066e4:	3304      	adds	r3, #4
 80066e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80066e8:	68bb      	ldr	r3, [r7, #8]
 80066ea:	061a      	lsls	r2, r3, #24
 80066ec:	68bb      	ldr	r3, [r7, #8]
 80066ee:	021b      	lsls	r3, r3, #8
 80066f0:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80066f4:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 80066f6:	68bb      	ldr	r3, [r7, #8]
 80066f8:	0a1b      	lsrs	r3, r3, #8
 80066fa:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80066fe:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8006700:	68bb      	ldr	r3, [r7, #8]
 8006702:	0e1b      	lsrs	r3, r3, #24
 8006704:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8006706:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006708:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800670a:	2300      	movs	r3, #0
}
 800670c:	4618      	mov	r0, r3
 800670e:	3738      	adds	r7, #56	@ 0x38
 8006710:	46bd      	mov	sp, r7
 8006712:	bd80      	pop	{r7, pc}
 8006714:	18000f3a 	.word	0x18000f3a

08006718 <SD_Read_IT>:
  * @param  hsd pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 8006718:	b580      	push	{r7, lr}
 800671a:	b086      	sub	sp, #24
 800671c:	af00      	add	r7, sp, #0
 800671e:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006724:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800672a:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800672c:	693b      	ldr	r3, [r7, #16]
 800672e:	2b00      	cmp	r3, #0
 8006730:	d03f      	beq.n	80067b2 <SD_Read_IT+0x9a>
  {
    /* Read data from SDMMC Rx FIFO */
    for(count = 0U; count < 8U; count++)
 8006732:	2300      	movs	r3, #0
 8006734:	617b      	str	r3, [r7, #20]
 8006736:	e033      	b.n	80067a0 <SD_Read_IT+0x88>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	4618      	mov	r0, r3
 800673e:	f000 fc3f 	bl	8006fc0 <SDMMC_ReadFIFO>
 8006742:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 8006744:	68bb      	ldr	r3, [r7, #8]
 8006746:	b2da      	uxtb	r2, r3
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	701a      	strb	r2, [r3, #0]
      tmp++;
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	3301      	adds	r3, #1
 8006750:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8006752:	693b      	ldr	r3, [r7, #16]
 8006754:	3b01      	subs	r3, #1
 8006756:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 8006758:	68bb      	ldr	r3, [r7, #8]
 800675a:	0a1b      	lsrs	r3, r3, #8
 800675c:	b2da      	uxtb	r2, r3
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	701a      	strb	r2, [r3, #0]
      tmp++;
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	3301      	adds	r3, #1
 8006766:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8006768:	693b      	ldr	r3, [r7, #16]
 800676a:	3b01      	subs	r3, #1
 800676c:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800676e:	68bb      	ldr	r3, [r7, #8]
 8006770:	0c1b      	lsrs	r3, r3, #16
 8006772:	b2da      	uxtb	r2, r3
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	701a      	strb	r2, [r3, #0]
      tmp++;
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	3301      	adds	r3, #1
 800677c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800677e:	693b      	ldr	r3, [r7, #16]
 8006780:	3b01      	subs	r3, #1
 8006782:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 8006784:	68bb      	ldr	r3, [r7, #8]
 8006786:	0e1b      	lsrs	r3, r3, #24
 8006788:	b2da      	uxtb	r2, r3
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	701a      	strb	r2, [r3, #0]
      tmp++;
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	3301      	adds	r3, #1
 8006792:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8006794:	693b      	ldr	r3, [r7, #16]
 8006796:	3b01      	subs	r3, #1
 8006798:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 800679a:	697b      	ldr	r3, [r7, #20]
 800679c:	3301      	adds	r3, #1
 800679e:	617b      	str	r3, [r7, #20]
 80067a0:	697b      	ldr	r3, [r7, #20]
 80067a2:	2b07      	cmp	r3, #7
 80067a4:	d9c8      	bls.n	8006738 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	68fa      	ldr	r2, [r7, #12]
 80067aa:	629a      	str	r2, [r3, #40]	@ 0x28
    hsd->RxXferSize = dataremaining;
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	693a      	ldr	r2, [r7, #16]
 80067b0:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
}
 80067b2:	bf00      	nop
 80067b4:	3718      	adds	r7, #24
 80067b6:	46bd      	mov	sp, r7
 80067b8:	bd80      	pop	{r7, pc}

080067ba <SD_Write_IT>:
  * @param  hsd pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 80067ba:	b580      	push	{r7, lr}
 80067bc:	b086      	sub	sp, #24
 80067be:	af00      	add	r7, sp, #0
 80067c0:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	6a1b      	ldr	r3, [r3, #32]
 80067c6:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067cc:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 80067ce:	693b      	ldr	r3, [r7, #16]
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d043      	beq.n	800685c <SD_Write_IT+0xa2>
  {
    /* Write data to SDMMC Tx FIFO */
    for(count = 0U; count < 8U; count++)
 80067d4:	2300      	movs	r3, #0
 80067d6:	617b      	str	r3, [r7, #20]
 80067d8:	e037      	b.n	800684a <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	781b      	ldrb	r3, [r3, #0]
 80067de:	60bb      	str	r3, [r7, #8]
      tmp++;
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	3301      	adds	r3, #1
 80067e4:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80067e6:	693b      	ldr	r3, [r7, #16]
 80067e8:	3b01      	subs	r3, #1
 80067ea:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	781b      	ldrb	r3, [r3, #0]
 80067f0:	021a      	lsls	r2, r3, #8
 80067f2:	68bb      	ldr	r3, [r7, #8]
 80067f4:	4313      	orrs	r3, r2
 80067f6:	60bb      	str	r3, [r7, #8]
      tmp++;
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	3301      	adds	r3, #1
 80067fc:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80067fe:	693b      	ldr	r3, [r7, #16]
 8006800:	3b01      	subs	r3, #1
 8006802:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	781b      	ldrb	r3, [r3, #0]
 8006808:	041a      	lsls	r2, r3, #16
 800680a:	68bb      	ldr	r3, [r7, #8]
 800680c:	4313      	orrs	r3, r2
 800680e:	60bb      	str	r3, [r7, #8]
      tmp++;
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	3301      	adds	r3, #1
 8006814:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8006816:	693b      	ldr	r3, [r7, #16]
 8006818:	3b01      	subs	r3, #1
 800681a:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	781b      	ldrb	r3, [r3, #0]
 8006820:	061a      	lsls	r2, r3, #24
 8006822:	68bb      	ldr	r3, [r7, #8]
 8006824:	4313      	orrs	r3, r2
 8006826:	60bb      	str	r3, [r7, #8]
      tmp++;
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	3301      	adds	r3, #1
 800682c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800682e:	693b      	ldr	r3, [r7, #16]
 8006830:	3b01      	subs	r3, #1
 8006832:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	f107 0208 	add.w	r2, r7, #8
 800683c:	4611      	mov	r1, r2
 800683e:	4618      	mov	r0, r3
 8006840:	f000 fbcb 	bl	8006fda <SDMMC_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 8006844:	697b      	ldr	r3, [r7, #20]
 8006846:	3301      	adds	r3, #1
 8006848:	617b      	str	r3, [r7, #20]
 800684a:	697b      	ldr	r3, [r7, #20]
 800684c:	2b07      	cmp	r3, #7
 800684e:	d9c4      	bls.n	80067da <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	68fa      	ldr	r2, [r7, #12]
 8006854:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	693a      	ldr	r2, [r7, #16]
 800685a:	625a      	str	r2, [r3, #36]	@ 0x24
  }
}
 800685c:	bf00      	nop
 800685e:	3718      	adds	r7, #24
 8006860:	46bd      	mov	sp, r7
 8006862:	bd80      	pop	{r7, pc}

08006864 <HAL_SDEx_DriveTransceiver_1_8V_Callback>:
  * @brief  Enable/Disable the SD Transceiver 1.8V Mode Callback.
  * @param  status Voltage Switch State
  * @retval None
  */
__weak void HAL_SDEx_DriveTransceiver_1_8V_Callback(FlagStatus status)
{
 8006864:	b480      	push	{r7}
 8006866:	b083      	sub	sp, #12
 8006868:	af00      	add	r7, sp, #0
 800686a:	4603      	mov	r3, r0
 800686c:	71fb      	strb	r3, [r7, #7]
  UNUSED(status);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SD_EnableTransciver could be implemented in the user file
   */
}
 800686e:	bf00      	nop
 8006870:	370c      	adds	r7, #12
 8006872:	46bd      	mov	sp, r7
 8006874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006878:	4770      	bx	lr

0800687a <HAL_SDEx_Read_DMADoubleBuffer0CpltCallback>:
  * @brief Read DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuffer0CpltCallback(SD_HandleTypeDef *hsd)
{
 800687a:	b480      	push	{r7}
 800687c:	b083      	sub	sp, #12
 800687e:	af00      	add	r7, sp, #0
 8006880:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuffer0CpltCallback can be implemented in the user file
   */
}
 8006882:	bf00      	nop
 8006884:	370c      	adds	r7, #12
 8006886:	46bd      	mov	sp, r7
 8006888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800688c:	4770      	bx	lr

0800688e <HAL_SDEx_Read_DMADoubleBuffer1CpltCallback>:
  * @brief Read DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuffer1CpltCallback(SD_HandleTypeDef *hsd)
{
 800688e:	b480      	push	{r7}
 8006890:	b083      	sub	sp, #12
 8006892:	af00      	add	r7, sp, #0
 8006894:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuffer1CpltCallback can be implemented in the user file
   */
}
 8006896:	bf00      	nop
 8006898:	370c      	adds	r7, #12
 800689a:	46bd      	mov	sp, r7
 800689c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a0:	4770      	bx	lr

080068a2 <HAL_SDEx_Write_DMADoubleBuffer0CpltCallback>:
  * @brief Write DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuffer0CpltCallback(SD_HandleTypeDef *hsd)
{
 80068a2:	b480      	push	{r7}
 80068a4:	b083      	sub	sp, #12
 80068a6:	af00      	add	r7, sp, #0
 80068a8:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuffer0CpltCallback can be implemented in the user file
   */
}
 80068aa:	bf00      	nop
 80068ac:	370c      	adds	r7, #12
 80068ae:	46bd      	mov	sp, r7
 80068b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b4:	4770      	bx	lr

080068b6 <HAL_SDEx_Write_DMADoubleBuffer1CpltCallback>:
  * @brief Write DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuffer1CpltCallback(SD_HandleTypeDef *hsd)
{
 80068b6:	b480      	push	{r7}
 80068b8:	b083      	sub	sp, #12
 80068ba:	af00      	add	r7, sp, #0
 80068bc:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuffer0CpltCallback can be implemented in the user file
   */
}
 80068be:	bf00      	nop
 80068c0:	370c      	adds	r7, #12
 80068c2:	46bd      	mov	sp, r7
 80068c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c8:	4770      	bx	lr

080068ca <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80068ca:	b580      	push	{r7, lr}
 80068cc:	b082      	sub	sp, #8
 80068ce:	af00      	add	r7, sp, #0
 80068d0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d101      	bne.n	80068dc <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80068d8:	2301      	movs	r3, #1
 80068da:	e049      	b.n	8006970 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80068e2:	b2db      	uxtb	r3, r3
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d106      	bne.n	80068f6 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	2200      	movs	r2, #0
 80068ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80068f0:	6878      	ldr	r0, [r7, #4]
 80068f2:	f7fb f95f 	bl	8001bb4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	2202      	movs	r2, #2
 80068fa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681a      	ldr	r2, [r3, #0]
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	3304      	adds	r3, #4
 8006906:	4619      	mov	r1, r3
 8006908:	4610      	mov	r0, r2
 800690a:	f000 f967 	bl	8006bdc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	2201      	movs	r2, #1
 8006912:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	2201      	movs	r2, #1
 800691a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	2201      	movs	r2, #1
 8006922:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	2201      	movs	r2, #1
 800692a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	2201      	movs	r2, #1
 8006932:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	2201      	movs	r2, #1
 800693a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	2201      	movs	r2, #1
 8006942:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	2201      	movs	r2, #1
 800694a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	2201      	movs	r2, #1
 8006952:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	2201      	movs	r2, #1
 800695a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	2201      	movs	r2, #1
 8006962:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	2201      	movs	r2, #1
 800696a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800696e:	2300      	movs	r3, #0
}
 8006970:	4618      	mov	r0, r3
 8006972:	3708      	adds	r7, #8
 8006974:	46bd      	mov	sp, r7
 8006976:	bd80      	pop	{r7, pc}

08006978 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8006978:	b480      	push	{r7}
 800697a:	b085      	sub	sp, #20
 800697c:	af00      	add	r7, sp, #0
 800697e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006986:	b2db      	uxtb	r3, r3
 8006988:	2b01      	cmp	r3, #1
 800698a:	d001      	beq.n	8006990 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800698c:	2301      	movs	r3, #1
 800698e:	e047      	b.n	8006a20 <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	2202      	movs	r2, #2
 8006994:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	4a23      	ldr	r2, [pc, #140]	@ (8006a2c <HAL_TIM_Base_Start+0xb4>)
 800699e:	4293      	cmp	r3, r2
 80069a0:	d01d      	beq.n	80069de <HAL_TIM_Base_Start+0x66>
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80069aa:	d018      	beq.n	80069de <HAL_TIM_Base_Start+0x66>
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	4a1f      	ldr	r2, [pc, #124]	@ (8006a30 <HAL_TIM_Base_Start+0xb8>)
 80069b2:	4293      	cmp	r3, r2
 80069b4:	d013      	beq.n	80069de <HAL_TIM_Base_Start+0x66>
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	4a1e      	ldr	r2, [pc, #120]	@ (8006a34 <HAL_TIM_Base_Start+0xbc>)
 80069bc:	4293      	cmp	r3, r2
 80069be:	d00e      	beq.n	80069de <HAL_TIM_Base_Start+0x66>
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	4a1c      	ldr	r2, [pc, #112]	@ (8006a38 <HAL_TIM_Base_Start+0xc0>)
 80069c6:	4293      	cmp	r3, r2
 80069c8:	d009      	beq.n	80069de <HAL_TIM_Base_Start+0x66>
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	4a1b      	ldr	r2, [pc, #108]	@ (8006a3c <HAL_TIM_Base_Start+0xc4>)
 80069d0:	4293      	cmp	r3, r2
 80069d2:	d004      	beq.n	80069de <HAL_TIM_Base_Start+0x66>
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	4a19      	ldr	r2, [pc, #100]	@ (8006a40 <HAL_TIM_Base_Start+0xc8>)
 80069da:	4293      	cmp	r3, r2
 80069dc:	d115      	bne.n	8006a0a <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	689a      	ldr	r2, [r3, #8]
 80069e4:	4b17      	ldr	r3, [pc, #92]	@ (8006a44 <HAL_TIM_Base_Start+0xcc>)
 80069e6:	4013      	ands	r3, r2
 80069e8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	2b06      	cmp	r3, #6
 80069ee:	d015      	beq.n	8006a1c <HAL_TIM_Base_Start+0xa4>
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80069f6:	d011      	beq.n	8006a1c <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	681a      	ldr	r2, [r3, #0]
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	f042 0201 	orr.w	r2, r2, #1
 8006a06:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006a08:	e008      	b.n	8006a1c <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	681a      	ldr	r2, [r3, #0]
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	f042 0201 	orr.w	r2, r2, #1
 8006a18:	601a      	str	r2, [r3, #0]
 8006a1a:	e000      	b.n	8006a1e <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006a1c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006a1e:	2300      	movs	r3, #0
}
 8006a20:	4618      	mov	r0, r3
 8006a22:	3714      	adds	r7, #20
 8006a24:	46bd      	mov	sp, r7
 8006a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a2a:	4770      	bx	lr
 8006a2c:	40012c00 	.word	0x40012c00
 8006a30:	40000400 	.word	0x40000400
 8006a34:	40000800 	.word	0x40000800
 8006a38:	40000c00 	.word	0x40000c00
 8006a3c:	40013400 	.word	0x40013400
 8006a40:	40014000 	.word	0x40014000
 8006a44:	00010007 	.word	0x00010007

08006a48 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006a48:	b580      	push	{r7, lr}
 8006a4a:	b084      	sub	sp, #16
 8006a4c:	af00      	add	r7, sp, #0
 8006a4e:	6078      	str	r0, [r7, #4]
 8006a50:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006a52:	2300      	movs	r3, #0
 8006a54:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006a5c:	2b01      	cmp	r3, #1
 8006a5e:	d101      	bne.n	8006a64 <HAL_TIM_ConfigClockSource+0x1c>
 8006a60:	2302      	movs	r3, #2
 8006a62:	e0b6      	b.n	8006bd2 <HAL_TIM_ConfigClockSource+0x18a>
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	2201      	movs	r2, #1
 8006a68:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	2202      	movs	r2, #2
 8006a70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	689b      	ldr	r3, [r3, #8]
 8006a7a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006a7c:	68bb      	ldr	r3, [r7, #8]
 8006a7e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006a82:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8006a86:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006a88:	68bb      	ldr	r3, [r7, #8]
 8006a8a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006a8e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	68ba      	ldr	r2, [r7, #8]
 8006a96:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006a98:	683b      	ldr	r3, [r7, #0]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006aa0:	d03e      	beq.n	8006b20 <HAL_TIM_ConfigClockSource+0xd8>
 8006aa2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006aa6:	f200 8087 	bhi.w	8006bb8 <HAL_TIM_ConfigClockSource+0x170>
 8006aaa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006aae:	f000 8086 	beq.w	8006bbe <HAL_TIM_ConfigClockSource+0x176>
 8006ab2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006ab6:	d87f      	bhi.n	8006bb8 <HAL_TIM_ConfigClockSource+0x170>
 8006ab8:	2b70      	cmp	r3, #112	@ 0x70
 8006aba:	d01a      	beq.n	8006af2 <HAL_TIM_ConfigClockSource+0xaa>
 8006abc:	2b70      	cmp	r3, #112	@ 0x70
 8006abe:	d87b      	bhi.n	8006bb8 <HAL_TIM_ConfigClockSource+0x170>
 8006ac0:	2b60      	cmp	r3, #96	@ 0x60
 8006ac2:	d050      	beq.n	8006b66 <HAL_TIM_ConfigClockSource+0x11e>
 8006ac4:	2b60      	cmp	r3, #96	@ 0x60
 8006ac6:	d877      	bhi.n	8006bb8 <HAL_TIM_ConfigClockSource+0x170>
 8006ac8:	2b50      	cmp	r3, #80	@ 0x50
 8006aca:	d03c      	beq.n	8006b46 <HAL_TIM_ConfigClockSource+0xfe>
 8006acc:	2b50      	cmp	r3, #80	@ 0x50
 8006ace:	d873      	bhi.n	8006bb8 <HAL_TIM_ConfigClockSource+0x170>
 8006ad0:	2b40      	cmp	r3, #64	@ 0x40
 8006ad2:	d058      	beq.n	8006b86 <HAL_TIM_ConfigClockSource+0x13e>
 8006ad4:	2b40      	cmp	r3, #64	@ 0x40
 8006ad6:	d86f      	bhi.n	8006bb8 <HAL_TIM_ConfigClockSource+0x170>
 8006ad8:	2b30      	cmp	r3, #48	@ 0x30
 8006ada:	d064      	beq.n	8006ba6 <HAL_TIM_ConfigClockSource+0x15e>
 8006adc:	2b30      	cmp	r3, #48	@ 0x30
 8006ade:	d86b      	bhi.n	8006bb8 <HAL_TIM_ConfigClockSource+0x170>
 8006ae0:	2b20      	cmp	r3, #32
 8006ae2:	d060      	beq.n	8006ba6 <HAL_TIM_ConfigClockSource+0x15e>
 8006ae4:	2b20      	cmp	r3, #32
 8006ae6:	d867      	bhi.n	8006bb8 <HAL_TIM_ConfigClockSource+0x170>
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d05c      	beq.n	8006ba6 <HAL_TIM_ConfigClockSource+0x15e>
 8006aec:	2b10      	cmp	r3, #16
 8006aee:	d05a      	beq.n	8006ba6 <HAL_TIM_ConfigClockSource+0x15e>
 8006af0:	e062      	b.n	8006bb8 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006af6:	683b      	ldr	r3, [r7, #0]
 8006af8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006afa:	683b      	ldr	r3, [r7, #0]
 8006afc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006afe:	683b      	ldr	r3, [r7, #0]
 8006b00:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006b02:	f000 f98b 	bl	8006e1c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	689b      	ldr	r3, [r3, #8]
 8006b0c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006b0e:	68bb      	ldr	r3, [r7, #8]
 8006b10:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8006b14:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	68ba      	ldr	r2, [r7, #8]
 8006b1c:	609a      	str	r2, [r3, #8]
      break;
 8006b1e:	e04f      	b.n	8006bc0 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006b24:	683b      	ldr	r3, [r7, #0]
 8006b26:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006b28:	683b      	ldr	r3, [r7, #0]
 8006b2a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006b2c:	683b      	ldr	r3, [r7, #0]
 8006b2e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006b30:	f000 f974 	bl	8006e1c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	689a      	ldr	r2, [r3, #8]
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006b42:	609a      	str	r2, [r3, #8]
      break;
 8006b44:	e03c      	b.n	8006bc0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006b4a:	683b      	ldr	r3, [r7, #0]
 8006b4c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006b4e:	683b      	ldr	r3, [r7, #0]
 8006b50:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006b52:	461a      	mov	r2, r3
 8006b54:	f000 f8e8 	bl	8006d28 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	2150      	movs	r1, #80	@ 0x50
 8006b5e:	4618      	mov	r0, r3
 8006b60:	f000 f941 	bl	8006de6 <TIM_ITRx_SetConfig>
      break;
 8006b64:	e02c      	b.n	8006bc0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006b6a:	683b      	ldr	r3, [r7, #0]
 8006b6c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006b6e:	683b      	ldr	r3, [r7, #0]
 8006b70:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006b72:	461a      	mov	r2, r3
 8006b74:	f000 f907 	bl	8006d86 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	2160      	movs	r1, #96	@ 0x60
 8006b7e:	4618      	mov	r0, r3
 8006b80:	f000 f931 	bl	8006de6 <TIM_ITRx_SetConfig>
      break;
 8006b84:	e01c      	b.n	8006bc0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006b8a:	683b      	ldr	r3, [r7, #0]
 8006b8c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006b8e:	683b      	ldr	r3, [r7, #0]
 8006b90:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006b92:	461a      	mov	r2, r3
 8006b94:	f000 f8c8 	bl	8006d28 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	2140      	movs	r1, #64	@ 0x40
 8006b9e:	4618      	mov	r0, r3
 8006ba0:	f000 f921 	bl	8006de6 <TIM_ITRx_SetConfig>
      break;
 8006ba4:	e00c      	b.n	8006bc0 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	681a      	ldr	r2, [r3, #0]
 8006baa:	683b      	ldr	r3, [r7, #0]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	4619      	mov	r1, r3
 8006bb0:	4610      	mov	r0, r2
 8006bb2:	f000 f918 	bl	8006de6 <TIM_ITRx_SetConfig>
      break;
 8006bb6:	e003      	b.n	8006bc0 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8006bb8:	2301      	movs	r3, #1
 8006bba:	73fb      	strb	r3, [r7, #15]
      break;
 8006bbc:	e000      	b.n	8006bc0 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8006bbe:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	2201      	movs	r2, #1
 8006bc4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	2200      	movs	r2, #0
 8006bcc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006bd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8006bd2:	4618      	mov	r0, r3
 8006bd4:	3710      	adds	r7, #16
 8006bd6:	46bd      	mov	sp, r7
 8006bd8:	bd80      	pop	{r7, pc}
	...

08006bdc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006bdc:	b480      	push	{r7}
 8006bde:	b085      	sub	sp, #20
 8006be0:	af00      	add	r7, sp, #0
 8006be2:	6078      	str	r0, [r7, #4]
 8006be4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	4a46      	ldr	r2, [pc, #280]	@ (8006d08 <TIM_Base_SetConfig+0x12c>)
 8006bf0:	4293      	cmp	r3, r2
 8006bf2:	d013      	beq.n	8006c1c <TIM_Base_SetConfig+0x40>
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006bfa:	d00f      	beq.n	8006c1c <TIM_Base_SetConfig+0x40>
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	4a43      	ldr	r2, [pc, #268]	@ (8006d0c <TIM_Base_SetConfig+0x130>)
 8006c00:	4293      	cmp	r3, r2
 8006c02:	d00b      	beq.n	8006c1c <TIM_Base_SetConfig+0x40>
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	4a42      	ldr	r2, [pc, #264]	@ (8006d10 <TIM_Base_SetConfig+0x134>)
 8006c08:	4293      	cmp	r3, r2
 8006c0a:	d007      	beq.n	8006c1c <TIM_Base_SetConfig+0x40>
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	4a41      	ldr	r2, [pc, #260]	@ (8006d14 <TIM_Base_SetConfig+0x138>)
 8006c10:	4293      	cmp	r3, r2
 8006c12:	d003      	beq.n	8006c1c <TIM_Base_SetConfig+0x40>
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	4a40      	ldr	r2, [pc, #256]	@ (8006d18 <TIM_Base_SetConfig+0x13c>)
 8006c18:	4293      	cmp	r3, r2
 8006c1a:	d108      	bne.n	8006c2e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006c22:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006c24:	683b      	ldr	r3, [r7, #0]
 8006c26:	685b      	ldr	r3, [r3, #4]
 8006c28:	68fa      	ldr	r2, [r7, #12]
 8006c2a:	4313      	orrs	r3, r2
 8006c2c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	4a35      	ldr	r2, [pc, #212]	@ (8006d08 <TIM_Base_SetConfig+0x12c>)
 8006c32:	4293      	cmp	r3, r2
 8006c34:	d01f      	beq.n	8006c76 <TIM_Base_SetConfig+0x9a>
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006c3c:	d01b      	beq.n	8006c76 <TIM_Base_SetConfig+0x9a>
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	4a32      	ldr	r2, [pc, #200]	@ (8006d0c <TIM_Base_SetConfig+0x130>)
 8006c42:	4293      	cmp	r3, r2
 8006c44:	d017      	beq.n	8006c76 <TIM_Base_SetConfig+0x9a>
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	4a31      	ldr	r2, [pc, #196]	@ (8006d10 <TIM_Base_SetConfig+0x134>)
 8006c4a:	4293      	cmp	r3, r2
 8006c4c:	d013      	beq.n	8006c76 <TIM_Base_SetConfig+0x9a>
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	4a30      	ldr	r2, [pc, #192]	@ (8006d14 <TIM_Base_SetConfig+0x138>)
 8006c52:	4293      	cmp	r3, r2
 8006c54:	d00f      	beq.n	8006c76 <TIM_Base_SetConfig+0x9a>
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	4a2f      	ldr	r2, [pc, #188]	@ (8006d18 <TIM_Base_SetConfig+0x13c>)
 8006c5a:	4293      	cmp	r3, r2
 8006c5c:	d00b      	beq.n	8006c76 <TIM_Base_SetConfig+0x9a>
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	4a2e      	ldr	r2, [pc, #184]	@ (8006d1c <TIM_Base_SetConfig+0x140>)
 8006c62:	4293      	cmp	r3, r2
 8006c64:	d007      	beq.n	8006c76 <TIM_Base_SetConfig+0x9a>
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	4a2d      	ldr	r2, [pc, #180]	@ (8006d20 <TIM_Base_SetConfig+0x144>)
 8006c6a:	4293      	cmp	r3, r2
 8006c6c:	d003      	beq.n	8006c76 <TIM_Base_SetConfig+0x9a>
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	4a2c      	ldr	r2, [pc, #176]	@ (8006d24 <TIM_Base_SetConfig+0x148>)
 8006c72:	4293      	cmp	r3, r2
 8006c74:	d108      	bne.n	8006c88 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006c7c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006c7e:	683b      	ldr	r3, [r7, #0]
 8006c80:	68db      	ldr	r3, [r3, #12]
 8006c82:	68fa      	ldr	r2, [r7, #12]
 8006c84:	4313      	orrs	r3, r2
 8006c86:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006c8e:	683b      	ldr	r3, [r7, #0]
 8006c90:	695b      	ldr	r3, [r3, #20]
 8006c92:	4313      	orrs	r3, r2
 8006c94:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	68fa      	ldr	r2, [r7, #12]
 8006c9a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006c9c:	683b      	ldr	r3, [r7, #0]
 8006c9e:	689a      	ldr	r2, [r3, #8]
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006ca4:	683b      	ldr	r3, [r7, #0]
 8006ca6:	681a      	ldr	r2, [r3, #0]
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	4a16      	ldr	r2, [pc, #88]	@ (8006d08 <TIM_Base_SetConfig+0x12c>)
 8006cb0:	4293      	cmp	r3, r2
 8006cb2:	d00f      	beq.n	8006cd4 <TIM_Base_SetConfig+0xf8>
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	4a18      	ldr	r2, [pc, #96]	@ (8006d18 <TIM_Base_SetConfig+0x13c>)
 8006cb8:	4293      	cmp	r3, r2
 8006cba:	d00b      	beq.n	8006cd4 <TIM_Base_SetConfig+0xf8>
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	4a17      	ldr	r2, [pc, #92]	@ (8006d1c <TIM_Base_SetConfig+0x140>)
 8006cc0:	4293      	cmp	r3, r2
 8006cc2:	d007      	beq.n	8006cd4 <TIM_Base_SetConfig+0xf8>
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	4a16      	ldr	r2, [pc, #88]	@ (8006d20 <TIM_Base_SetConfig+0x144>)
 8006cc8:	4293      	cmp	r3, r2
 8006cca:	d003      	beq.n	8006cd4 <TIM_Base_SetConfig+0xf8>
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	4a15      	ldr	r2, [pc, #84]	@ (8006d24 <TIM_Base_SetConfig+0x148>)
 8006cd0:	4293      	cmp	r3, r2
 8006cd2:	d103      	bne.n	8006cdc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006cd4:	683b      	ldr	r3, [r7, #0]
 8006cd6:	691a      	ldr	r2, [r3, #16]
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	2201      	movs	r2, #1
 8006ce0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	691b      	ldr	r3, [r3, #16]
 8006ce6:	f003 0301 	and.w	r3, r3, #1
 8006cea:	2b01      	cmp	r3, #1
 8006cec:	d105      	bne.n	8006cfa <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	691b      	ldr	r3, [r3, #16]
 8006cf2:	f023 0201 	bic.w	r2, r3, #1
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	611a      	str	r2, [r3, #16]
  }
}
 8006cfa:	bf00      	nop
 8006cfc:	3714      	adds	r7, #20
 8006cfe:	46bd      	mov	sp, r7
 8006d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d04:	4770      	bx	lr
 8006d06:	bf00      	nop
 8006d08:	40012c00 	.word	0x40012c00
 8006d0c:	40000400 	.word	0x40000400
 8006d10:	40000800 	.word	0x40000800
 8006d14:	40000c00 	.word	0x40000c00
 8006d18:	40013400 	.word	0x40013400
 8006d1c:	40014000 	.word	0x40014000
 8006d20:	40014400 	.word	0x40014400
 8006d24:	40014800 	.word	0x40014800

08006d28 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006d28:	b480      	push	{r7}
 8006d2a:	b087      	sub	sp, #28
 8006d2c:	af00      	add	r7, sp, #0
 8006d2e:	60f8      	str	r0, [r7, #12]
 8006d30:	60b9      	str	r1, [r7, #8]
 8006d32:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	6a1b      	ldr	r3, [r3, #32]
 8006d38:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	6a1b      	ldr	r3, [r3, #32]
 8006d3e:	f023 0201 	bic.w	r2, r3, #1
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	699b      	ldr	r3, [r3, #24]
 8006d4a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006d4c:	693b      	ldr	r3, [r7, #16]
 8006d4e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006d52:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	011b      	lsls	r3, r3, #4
 8006d58:	693a      	ldr	r2, [r7, #16]
 8006d5a:	4313      	orrs	r3, r2
 8006d5c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006d5e:	697b      	ldr	r3, [r7, #20]
 8006d60:	f023 030a 	bic.w	r3, r3, #10
 8006d64:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006d66:	697a      	ldr	r2, [r7, #20]
 8006d68:	68bb      	ldr	r3, [r7, #8]
 8006d6a:	4313      	orrs	r3, r2
 8006d6c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	693a      	ldr	r2, [r7, #16]
 8006d72:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	697a      	ldr	r2, [r7, #20]
 8006d78:	621a      	str	r2, [r3, #32]
}
 8006d7a:	bf00      	nop
 8006d7c:	371c      	adds	r7, #28
 8006d7e:	46bd      	mov	sp, r7
 8006d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d84:	4770      	bx	lr

08006d86 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006d86:	b480      	push	{r7}
 8006d88:	b087      	sub	sp, #28
 8006d8a:	af00      	add	r7, sp, #0
 8006d8c:	60f8      	str	r0, [r7, #12]
 8006d8e:	60b9      	str	r1, [r7, #8]
 8006d90:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	6a1b      	ldr	r3, [r3, #32]
 8006d96:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	6a1b      	ldr	r3, [r3, #32]
 8006d9c:	f023 0210 	bic.w	r2, r3, #16
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	699b      	ldr	r3, [r3, #24]
 8006da8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006daa:	693b      	ldr	r3, [r7, #16]
 8006dac:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006db0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	031b      	lsls	r3, r3, #12
 8006db6:	693a      	ldr	r2, [r7, #16]
 8006db8:	4313      	orrs	r3, r2
 8006dba:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006dbc:	697b      	ldr	r3, [r7, #20]
 8006dbe:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006dc2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006dc4:	68bb      	ldr	r3, [r7, #8]
 8006dc6:	011b      	lsls	r3, r3, #4
 8006dc8:	697a      	ldr	r2, [r7, #20]
 8006dca:	4313      	orrs	r3, r2
 8006dcc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	693a      	ldr	r2, [r7, #16]
 8006dd2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	697a      	ldr	r2, [r7, #20]
 8006dd8:	621a      	str	r2, [r3, #32]
}
 8006dda:	bf00      	nop
 8006ddc:	371c      	adds	r7, #28
 8006dde:	46bd      	mov	sp, r7
 8006de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006de4:	4770      	bx	lr

08006de6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006de6:	b480      	push	{r7}
 8006de8:	b085      	sub	sp, #20
 8006dea:	af00      	add	r7, sp, #0
 8006dec:	6078      	str	r0, [r7, #4]
 8006dee:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	689b      	ldr	r3, [r3, #8]
 8006df4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006dfc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006dfe:	683a      	ldr	r2, [r7, #0]
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	4313      	orrs	r3, r2
 8006e04:	f043 0307 	orr.w	r3, r3, #7
 8006e08:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	68fa      	ldr	r2, [r7, #12]
 8006e0e:	609a      	str	r2, [r3, #8]
}
 8006e10:	bf00      	nop
 8006e12:	3714      	adds	r7, #20
 8006e14:	46bd      	mov	sp, r7
 8006e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e1a:	4770      	bx	lr

08006e1c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006e1c:	b480      	push	{r7}
 8006e1e:	b087      	sub	sp, #28
 8006e20:	af00      	add	r7, sp, #0
 8006e22:	60f8      	str	r0, [r7, #12]
 8006e24:	60b9      	str	r1, [r7, #8]
 8006e26:	607a      	str	r2, [r7, #4]
 8006e28:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	689b      	ldr	r3, [r3, #8]
 8006e2e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006e30:	697b      	ldr	r3, [r7, #20]
 8006e32:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006e36:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006e38:	683b      	ldr	r3, [r7, #0]
 8006e3a:	021a      	lsls	r2, r3, #8
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	431a      	orrs	r2, r3
 8006e40:	68bb      	ldr	r3, [r7, #8]
 8006e42:	4313      	orrs	r3, r2
 8006e44:	697a      	ldr	r2, [r7, #20]
 8006e46:	4313      	orrs	r3, r2
 8006e48:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	697a      	ldr	r2, [r7, #20]
 8006e4e:	609a      	str	r2, [r3, #8]
}
 8006e50:	bf00      	nop
 8006e52:	371c      	adds	r7, #28
 8006e54:	46bd      	mov	sp, r7
 8006e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e5a:	4770      	bx	lr

08006e5c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006e5c:	b480      	push	{r7}
 8006e5e:	b085      	sub	sp, #20
 8006e60:	af00      	add	r7, sp, #0
 8006e62:	6078      	str	r0, [r7, #4]
 8006e64:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006e6c:	2b01      	cmp	r3, #1
 8006e6e:	d101      	bne.n	8006e74 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006e70:	2302      	movs	r3, #2
 8006e72:	e068      	b.n	8006f46 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	2201      	movs	r2, #1
 8006e78:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	2202      	movs	r2, #2
 8006e80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	685b      	ldr	r3, [r3, #4]
 8006e8a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	689b      	ldr	r3, [r3, #8]
 8006e92:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	4a2e      	ldr	r2, [pc, #184]	@ (8006f54 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8006e9a:	4293      	cmp	r3, r2
 8006e9c:	d004      	beq.n	8006ea8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	4a2d      	ldr	r2, [pc, #180]	@ (8006f58 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006ea4:	4293      	cmp	r3, r2
 8006ea6:	d108      	bne.n	8006eba <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8006eae:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006eb0:	683b      	ldr	r3, [r7, #0]
 8006eb2:	685b      	ldr	r3, [r3, #4]
 8006eb4:	68fa      	ldr	r2, [r7, #12]
 8006eb6:	4313      	orrs	r3, r2
 8006eb8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006ec0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006ec2:	683b      	ldr	r3, [r7, #0]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	68fa      	ldr	r2, [r7, #12]
 8006ec8:	4313      	orrs	r3, r2
 8006eca:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	68fa      	ldr	r2, [r7, #12]
 8006ed2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	4a1e      	ldr	r2, [pc, #120]	@ (8006f54 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8006eda:	4293      	cmp	r3, r2
 8006edc:	d01d      	beq.n	8006f1a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006ee6:	d018      	beq.n	8006f1a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	4a1b      	ldr	r2, [pc, #108]	@ (8006f5c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006eee:	4293      	cmp	r3, r2
 8006ef0:	d013      	beq.n	8006f1a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	4a1a      	ldr	r2, [pc, #104]	@ (8006f60 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006ef8:	4293      	cmp	r3, r2
 8006efa:	d00e      	beq.n	8006f1a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	4a18      	ldr	r2, [pc, #96]	@ (8006f64 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8006f02:	4293      	cmp	r3, r2
 8006f04:	d009      	beq.n	8006f1a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	4a13      	ldr	r2, [pc, #76]	@ (8006f58 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006f0c:	4293      	cmp	r3, r2
 8006f0e:	d004      	beq.n	8006f1a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	4a14      	ldr	r2, [pc, #80]	@ (8006f68 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8006f16:	4293      	cmp	r3, r2
 8006f18:	d10c      	bne.n	8006f34 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006f1a:	68bb      	ldr	r3, [r7, #8]
 8006f1c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006f20:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006f22:	683b      	ldr	r3, [r7, #0]
 8006f24:	689b      	ldr	r3, [r3, #8]
 8006f26:	68ba      	ldr	r2, [r7, #8]
 8006f28:	4313      	orrs	r3, r2
 8006f2a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	68ba      	ldr	r2, [r7, #8]
 8006f32:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	2201      	movs	r2, #1
 8006f38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	2200      	movs	r2, #0
 8006f40:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006f44:	2300      	movs	r3, #0
}
 8006f46:	4618      	mov	r0, r3
 8006f48:	3714      	adds	r7, #20
 8006f4a:	46bd      	mov	sp, r7
 8006f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f50:	4770      	bx	lr
 8006f52:	bf00      	nop
 8006f54:	40012c00 	.word	0x40012c00
 8006f58:	40013400 	.word	0x40013400
 8006f5c:	40000400 	.word	0x40000400
 8006f60:	40000800 	.word	0x40000800
 8006f64:	40000c00 	.word	0x40000c00
 8006f68:	40014000 	.word	0x40014000

08006f6c <SDMMC_Init>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Init SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 8006f6c:	b084      	sub	sp, #16
 8006f6e:	b480      	push	{r7}
 8006f70:	b085      	sub	sp, #20
 8006f72:	af00      	add	r7, sp, #0
 8006f74:	6078      	str	r0, [r7, #4]
 8006f76:	f107 001c 	add.w	r0, r7, #28
 8006f7a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8006f7e:	2300      	movs	r3, #0
 8006f80:	60fb      	str	r3, [r7, #12]

  /* Set SDMMC configuration parameters */
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  tmpreg |= Init.ClockBypass;
#endif
  tmpreg |= (Init.ClockEdge           |\
 8006f82:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      |\
 8006f84:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8006f86:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8006f88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockPowerSave      |\
 8006f8a:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8006f8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.BusWide             |\
 8006f8e:	431a      	orrs	r2, r3
             Init.ClockDiv
 8006f90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.HardwareFlowControl |\
 8006f92:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8006f94:	68fa      	ldr	r2, [r7, #12]
 8006f96:	4313      	orrs	r3, r2
 8006f98:	60fb      	str	r3, [r7, #12]
             );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	685a      	ldr	r2, [r3, #4]
 8006f9e:	4b07      	ldr	r3, [pc, #28]	@ (8006fbc <SDMMC_Init+0x50>)
 8006fa0:	4013      	ands	r3, r2
 8006fa2:	68fa      	ldr	r2, [r7, #12]
 8006fa4:	431a      	orrs	r2, r3
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8006faa:	2300      	movs	r3, #0
}
 8006fac:	4618      	mov	r0, r3
 8006fae:	3714      	adds	r7, #20
 8006fb0:	46bd      	mov	sp, r7
 8006fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb6:	b004      	add	sp, #16
 8006fb8:	4770      	bx	lr
 8006fba:	bf00      	nop
 8006fbc:	ffc02c00 	.word	0xffc02c00

08006fc0 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 8006fc0:	b480      	push	{r7}
 8006fc2:	b083      	sub	sp, #12
 8006fc4:	af00      	add	r7, sp, #0
 8006fc6:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 8006fce:	4618      	mov	r0, r3
 8006fd0:	370c      	adds	r7, #12
 8006fd2:	46bd      	mov	sp, r7
 8006fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fd8:	4770      	bx	lr

08006fda <SDMMC_WriteFIFO>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  pWriteData pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 8006fda:	b480      	push	{r7}
 8006fdc:	b083      	sub	sp, #12
 8006fde:	af00      	add	r7, sp, #0
 8006fe0:	6078      	str	r0, [r7, #4]
 8006fe2:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 8006fe4:	683b      	ldr	r3, [r7, #0]
 8006fe6:	681a      	ldr	r2, [r3, #0]
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 8006fee:	2300      	movs	r3, #0
}
 8006ff0:	4618      	mov	r0, r3
 8006ff2:	370c      	adds	r7, #12
 8006ff4:	46bd      	mov	sp, r7
 8006ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ffa:	4770      	bx	lr

08006ffc <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 8006ffc:	b580      	push	{r7, lr}
 8006ffe:	b082      	sub	sp, #8
 8007000:	af00      	add	r7, sp, #0
 8007002:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	f043 0203 	orr.w	r2, r3, #3
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	601a      	str	r2, [r3, #0]
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 8007010:	2002      	movs	r0, #2
 8007012:	f7fa ff0f 	bl	8001e34 <HAL_Delay>

  return HAL_OK;
 8007016:	2300      	movs	r3, #0
}
 8007018:	4618      	mov	r0, r3
 800701a:	3708      	adds	r7, #8
 800701c:	46bd      	mov	sp, r7
 800701e:	bd80      	pop	{r7, pc}

08007020 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 8007020:	b480      	push	{r7}
 8007022:	b083      	sub	sp, #12
 8007024:	af00      	add	r7, sp, #0
 8007026:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	f003 0303 	and.w	r3, r3, #3
}
 8007030:	4618      	mov	r0, r3
 8007032:	370c      	adds	r7, #12
 8007034:	46bd      	mov	sp, r7
 8007036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800703a:	4770      	bx	lr

0800703c <SDMMC_SendCommand>:
  * @param  Command pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800703c:	b480      	push	{r7}
 800703e:	b085      	sub	sp, #20
 8007040:	af00      	add	r7, sp, #0
 8007042:	6078      	str	r0, [r7, #4]
 8007044:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8007046:	2300      	movs	r3, #0
 8007048:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800704a:	683b      	ldr	r3, [r7, #0]
 800704c:	681a      	ldr	r2, [r3, #0]
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8007052:	683b      	ldr	r3, [r7, #0]
 8007054:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8007056:	683b      	ldr	r3, [r7, #0]
 8007058:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800705a:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800705c:	683b      	ldr	r3, [r7, #0]
 800705e:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8007060:	431a      	orrs	r2, r3
                       Command->CPSM);
 8007062:	683b      	ldr	r3, [r7, #0]
 8007064:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8007066:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8007068:	68fa      	ldr	r2, [r7, #12]
 800706a:	4313      	orrs	r3, r2
 800706c:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	68da      	ldr	r2, [r3, #12]
 8007072:	4b06      	ldr	r3, [pc, #24]	@ (800708c <SDMMC_SendCommand+0x50>)
 8007074:	4013      	ands	r3, r2
 8007076:	68fa      	ldr	r2, [r7, #12]
 8007078:	431a      	orrs	r2, r3
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800707e:	2300      	movs	r3, #0
}
 8007080:	4618      	mov	r0, r3
 8007082:	3714      	adds	r7, #20
 8007084:	46bd      	mov	sp, r7
 8007086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800708a:	4770      	bx	lr
 800708c:	fffee0c0 	.word	0xfffee0c0

08007090 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 8007090:	b480      	push	{r7}
 8007092:	b083      	sub	sp, #12
 8007094:	af00      	add	r7, sp, #0
 8007096:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	691b      	ldr	r3, [r3, #16]
 800709c:	b2db      	uxtb	r3, r3
}
 800709e:	4618      	mov	r0, r3
 80070a0:	370c      	adds	r7, #12
 80070a2:	46bd      	mov	sp, r7
 80070a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a8:	4770      	bx	lr

080070aa <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 80070aa:	b480      	push	{r7}
 80070ac:	b085      	sub	sp, #20
 80070ae:	af00      	add	r7, sp, #0
 80070b0:	6078      	str	r0, [r7, #4]
 80070b2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	3314      	adds	r3, #20
 80070b8:	461a      	mov	r2, r3
 80070ba:	683b      	ldr	r3, [r7, #0]
 80070bc:	4413      	add	r3, r2
 80070be:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	681b      	ldr	r3, [r3, #0]
}
 80070c4:	4618      	mov	r0, r3
 80070c6:	3714      	adds	r7, #20
 80070c8:	46bd      	mov	sp, r7
 80070ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ce:	4770      	bx	lr

080070d0 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 80070d0:	b480      	push	{r7}
 80070d2:	b085      	sub	sp, #20
 80070d4:	af00      	add	r7, sp, #0
 80070d6:	6078      	str	r0, [r7, #4]
 80070d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80070da:	2300      	movs	r3, #0
 80070dc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 80070de:	683b      	ldr	r3, [r7, #0]
 80070e0:	681a      	ldr	r2, [r3, #0]
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 80070e6:	683b      	ldr	r3, [r7, #0]
 80070e8:	685a      	ldr	r2, [r3, #4]
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80070ee:	683b      	ldr	r3, [r7, #0]
 80070f0:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 80070f2:	683b      	ldr	r3, [r7, #0]
 80070f4:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80070f6:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 80070f8:	683b      	ldr	r3, [r7, #0]
 80070fa:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 80070fc:	431a      	orrs	r2, r3
                       Data->DPSM);
 80070fe:	683b      	ldr	r3, [r7, #0]
 8007100:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8007102:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8007104:	68fa      	ldr	r2, [r7, #12]
 8007106:	4313      	orrs	r3, r2
 8007108:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800710e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	431a      	orrs	r2, r3
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 800711a:	2300      	movs	r3, #0

}
 800711c:	4618      	mov	r0, r3
 800711e:	3714      	adds	r7, #20
 8007120:	46bd      	mov	sp, r7
 8007122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007126:	4770      	bx	lr

08007128 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 8007128:	b580      	push	{r7, lr}
 800712a:	b088      	sub	sp, #32
 800712c:	af00      	add	r7, sp, #0
 800712e:	6078      	str	r0, [r7, #4]
 8007130:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8007132:	683b      	ldr	r3, [r7, #0]
 8007134:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8007136:	2310      	movs	r3, #16
 8007138:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800713a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800713e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007140:	2300      	movs	r3, #0
 8007142:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007144:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8007148:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800714a:	f107 0308 	add.w	r3, r7, #8
 800714e:	4619      	mov	r1, r3
 8007150:	6878      	ldr	r0, [r7, #4]
 8007152:	f7ff ff73 	bl	800703c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 8007156:	f241 3288 	movw	r2, #5000	@ 0x1388
 800715a:	2110      	movs	r1, #16
 800715c:	6878      	ldr	r0, [r7, #4]
 800715e:	f000 fa7b 	bl	8007658 <SDMMC_GetCmdResp1>
 8007162:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007164:	69fb      	ldr	r3, [r7, #28]
}
 8007166:	4618      	mov	r0, r3
 8007168:	3720      	adds	r7, #32
 800716a:	46bd      	mov	sp, r7
 800716c:	bd80      	pop	{r7, pc}

0800716e <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800716e:	b580      	push	{r7, lr}
 8007170:	b088      	sub	sp, #32
 8007172:	af00      	add	r7, sp, #0
 8007174:	6078      	str	r0, [r7, #4]
 8007176:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8007178:	683b      	ldr	r3, [r7, #0]
 800717a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800717c:	2311      	movs	r3, #17
 800717e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007180:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8007184:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007186:	2300      	movs	r3, #0
 8007188:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800718a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800718e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007190:	f107 0308 	add.w	r3, r7, #8
 8007194:	4619      	mov	r1, r3
 8007196:	6878      	ldr	r0, [r7, #4]
 8007198:	f7ff ff50 	bl	800703c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800719c:	f241 3288 	movw	r2, #5000	@ 0x1388
 80071a0:	2111      	movs	r1, #17
 80071a2:	6878      	ldr	r0, [r7, #4]
 80071a4:	f000 fa58 	bl	8007658 <SDMMC_GetCmdResp1>
 80071a8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80071aa:	69fb      	ldr	r3, [r7, #28]
}
 80071ac:	4618      	mov	r0, r3
 80071ae:	3720      	adds	r7, #32
 80071b0:	46bd      	mov	sp, r7
 80071b2:	bd80      	pop	{r7, pc}

080071b4 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 80071b4:	b580      	push	{r7, lr}
 80071b6:	b088      	sub	sp, #32
 80071b8:	af00      	add	r7, sp, #0
 80071ba:	6078      	str	r0, [r7, #4]
 80071bc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80071be:	683b      	ldr	r3, [r7, #0]
 80071c0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 80071c2:	2312      	movs	r3, #18
 80071c4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80071c6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80071ca:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80071cc:	2300      	movs	r3, #0
 80071ce:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80071d0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80071d4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80071d6:	f107 0308 	add.w	r3, r7, #8
 80071da:	4619      	mov	r1, r3
 80071dc:	6878      	ldr	r0, [r7, #4]
 80071de:	f7ff ff2d 	bl	800703c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 80071e2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80071e6:	2112      	movs	r1, #18
 80071e8:	6878      	ldr	r0, [r7, #4]
 80071ea:	f000 fa35 	bl	8007658 <SDMMC_GetCmdResp1>
 80071ee:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80071f0:	69fb      	ldr	r3, [r7, #28]
}
 80071f2:	4618      	mov	r0, r3
 80071f4:	3720      	adds	r7, #32
 80071f6:	46bd      	mov	sp, r7
 80071f8:	bd80      	pop	{r7, pc}

080071fa <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 80071fa:	b580      	push	{r7, lr}
 80071fc:	b088      	sub	sp, #32
 80071fe:	af00      	add	r7, sp, #0
 8007200:	6078      	str	r0, [r7, #4]
 8007202:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8007204:	683b      	ldr	r3, [r7, #0]
 8007206:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8007208:	2318      	movs	r3, #24
 800720a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800720c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8007210:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007212:	2300      	movs	r3, #0
 8007214:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007216:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800721a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800721c:	f107 0308 	add.w	r3, r7, #8
 8007220:	4619      	mov	r1, r3
 8007222:	6878      	ldr	r0, [r7, #4]
 8007224:	f7ff ff0a 	bl	800703c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8007228:	f241 3288 	movw	r2, #5000	@ 0x1388
 800722c:	2118      	movs	r1, #24
 800722e:	6878      	ldr	r0, [r7, #4]
 8007230:	f000 fa12 	bl	8007658 <SDMMC_GetCmdResp1>
 8007234:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007236:	69fb      	ldr	r3, [r7, #28]
}
 8007238:	4618      	mov	r0, r3
 800723a:	3720      	adds	r7, #32
 800723c:	46bd      	mov	sp, r7
 800723e:	bd80      	pop	{r7, pc}

08007240 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8007240:	b580      	push	{r7, lr}
 8007242:	b088      	sub	sp, #32
 8007244:	af00      	add	r7, sp, #0
 8007246:	6078      	str	r0, [r7, #4]
 8007248:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800724a:	683b      	ldr	r3, [r7, #0]
 800724c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800724e:	2319      	movs	r3, #25
 8007250:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007252:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8007256:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007258:	2300      	movs	r3, #0
 800725a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800725c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8007260:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007262:	f107 0308 	add.w	r3, r7, #8
 8007266:	4619      	mov	r1, r3
 8007268:	6878      	ldr	r0, [r7, #4]
 800726a:	f7ff fee7 	bl	800703c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800726e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007272:	2119      	movs	r1, #25
 8007274:	6878      	ldr	r0, [r7, #4]
 8007276:	f000 f9ef 	bl	8007658 <SDMMC_GetCmdResp1>
 800727a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800727c:	69fb      	ldr	r3, [r7, #28]
}
 800727e:	4618      	mov	r0, r3
 8007280:	3720      	adds	r7, #32
 8007282:	46bd      	mov	sp, r7
 8007284:	bd80      	pop	{r7, pc}
	...

08007288 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 8007288:	b580      	push	{r7, lr}
 800728a:	b088      	sub	sp, #32
 800728c:	af00      	add	r7, sp, #0
 800728e:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8007290:	2300      	movs	r3, #0
 8007292:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8007294:	230c      	movs	r3, #12
 8007296:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007298:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800729c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800729e:	2300      	movs	r3, #0
 80072a0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80072a2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80072a6:	61bb      	str	r3, [r7, #24]

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	68db      	ldr	r3, [r3, #12]
 80072ac:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	68db      	ldr	r3, [r3, #12]
 80072b8:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	60da      	str	r2, [r3, #12]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80072c0:	f107 0308 	add.w	r3, r7, #8
 80072c4:	4619      	mov	r1, r3
 80072c6:	6878      	ldr	r0, [r7, #4]
 80072c8:	f7ff feb8 	bl	800703c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 80072cc:	4a08      	ldr	r2, [pc, #32]	@ (80072f0 <SDMMC_CmdStopTransfer+0x68>)
 80072ce:	210c      	movs	r1, #12
 80072d0:	6878      	ldr	r0, [r7, #4]
 80072d2:	f000 f9c1 	bl	8007658 <SDMMC_GetCmdResp1>
 80072d6:	61f8      	str	r0, [r7, #28]

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	68db      	ldr	r3, [r3, #12]
 80072dc:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	60da      	str	r2, [r3, #12]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  return errorstate;
 80072e4:	69fb      	ldr	r3, [r7, #28]
}
 80072e6:	4618      	mov	r0, r3
 80072e8:	3720      	adds	r7, #32
 80072ea:	46bd      	mov	sp, r7
 80072ec:	bd80      	pop	{r7, pc}
 80072ee:	bf00      	nop
 80072f0:	05f5e100 	.word	0x05f5e100

080072f4 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  addr Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 80072f4:	b580      	push	{r7, lr}
 80072f6:	b08a      	sub	sp, #40	@ 0x28
 80072f8:	af00      	add	r7, sp, #0
 80072fa:	60f8      	str	r0, [r7, #12]
 80072fc:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8007300:	683b      	ldr	r3, [r7, #0]
 8007302:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8007304:	2307      	movs	r3, #7
 8007306:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007308:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800730c:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800730e:	2300      	movs	r3, #0
 8007310:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007312:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8007316:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007318:	f107 0310 	add.w	r3, r7, #16
 800731c:	4619      	mov	r1, r3
 800731e:	68f8      	ldr	r0, [r7, #12]
 8007320:	f7ff fe8c 	bl	800703c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 8007324:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007328:	2107      	movs	r1, #7
 800732a:	68f8      	ldr	r0, [r7, #12]
 800732c:	f000 f994 	bl	8007658 <SDMMC_GetCmdResp1>
 8007330:	6278      	str	r0, [r7, #36]	@ 0x24

  return errorstate;
 8007332:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8007334:	4618      	mov	r0, r3
 8007336:	3728      	adds	r7, #40	@ 0x28
 8007338:	46bd      	mov	sp, r7
 800733a:	bd80      	pop	{r7, pc}

0800733c <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800733c:	b580      	push	{r7, lr}
 800733e:	b088      	sub	sp, #32
 8007340:	af00      	add	r7, sp, #0
 8007342:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 8007344:	2300      	movs	r3, #0
 8007346:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8007348:	2300      	movs	r3, #0
 800734a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800734c:	2300      	movs	r3, #0
 800734e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007350:	2300      	movs	r3, #0
 8007352:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007354:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8007358:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800735a:	f107 0308 	add.w	r3, r7, #8
 800735e:	4619      	mov	r1, r3
 8007360:	6878      	ldr	r0, [r7, #4]
 8007362:	f7ff fe6b 	bl	800703c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 8007366:	6878      	ldr	r0, [r7, #4]
 8007368:	f000 fbb8 	bl	8007adc <SDMMC_GetCmdError>
 800736c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800736e:	69fb      	ldr	r3, [r7, #28]
}
 8007370:	4618      	mov	r0, r3
 8007372:	3720      	adds	r7, #32
 8007374:	46bd      	mov	sp, r7
 8007376:	bd80      	pop	{r7, pc}

08007378 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 8007378:	b580      	push	{r7, lr}
 800737a:	b088      	sub	sp, #32
 800737c:	af00      	add	r7, sp, #0
 800737e:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8007380:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 8007384:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8007386:	2308      	movs	r3, #8
 8007388:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800738a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800738e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007390:	2300      	movs	r3, #0
 8007392:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007394:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8007398:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800739a:	f107 0308 	add.w	r3, r7, #8
 800739e:	4619      	mov	r1, r3
 80073a0:	6878      	ldr	r0, [r7, #4]
 80073a2:	f7ff fe4b 	bl	800703c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 80073a6:	6878      	ldr	r0, [r7, #4]
 80073a8:	f000 fb4a 	bl	8007a40 <SDMMC_GetCmdResp7>
 80073ac:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80073ae:	69fb      	ldr	r3, [r7, #28]
}
 80073b0:	4618      	mov	r0, r3
 80073b2:	3720      	adds	r7, #32
 80073b4:	46bd      	mov	sp, r7
 80073b6:	bd80      	pop	{r7, pc}

080073b8 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80073b8:	b580      	push	{r7, lr}
 80073ba:	b088      	sub	sp, #32
 80073bc:	af00      	add	r7, sp, #0
 80073be:	6078      	str	r0, [r7, #4]
 80073c0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 80073c2:	683b      	ldr	r3, [r7, #0]
 80073c4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 80073c6:	2337      	movs	r3, #55	@ 0x37
 80073c8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80073ca:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80073ce:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80073d0:	2300      	movs	r3, #0
 80073d2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80073d4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80073d8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80073da:	f107 0308 	add.w	r3, r7, #8
 80073de:	4619      	mov	r1, r3
 80073e0:	6878      	ldr	r0, [r7, #4]
 80073e2:	f7ff fe2b 	bl	800703c <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 80073e6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80073ea:	2137      	movs	r1, #55	@ 0x37
 80073ec:	6878      	ldr	r0, [r7, #4]
 80073ee:	f000 f933 	bl	8007658 <SDMMC_GetCmdResp1>
 80073f2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80073f4:	69fb      	ldr	r3, [r7, #28]
}
 80073f6:	4618      	mov	r0, r3
 80073f8:	3720      	adds	r7, #32
 80073fa:	46bd      	mov	sp, r7
 80073fc:	bd80      	pop	{r7, pc}

080073fe <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80073fe:	b580      	push	{r7, lr}
 8007400:	b088      	sub	sp, #32
 8007402:	af00      	add	r7, sp, #0
 8007404:	6078      	str	r0, [r7, #4]
 8007406:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  sdmmc_cmdinit.Argument         = Argument;
 8007408:	683b      	ldr	r3, [r7, #0]
 800740a:	60bb      	str	r3, [r7, #8]
#else
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800740c:	2329      	movs	r3, #41	@ 0x29
 800740e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007410:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8007414:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007416:	2300      	movs	r3, #0
 8007418:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800741a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800741e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007420:	f107 0308 	add.w	r3, r7, #8
 8007424:	4619      	mov	r1, r3
 8007426:	6878      	ldr	r0, [r7, #4]
 8007428:	f7ff fe08 	bl	800703c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800742c:	6878      	ldr	r0, [r7, #4]
 800742e:	f000 fa4f 	bl	80078d0 <SDMMC_GetCmdResp3>
 8007432:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007434:	69fb      	ldr	r3, [r7, #28]
}
 8007436:	4618      	mov	r0, r3
 8007438:	3720      	adds	r7, #32
 800743a:	46bd      	mov	sp, r7
 800743c:	bd80      	pop	{r7, pc}

0800743e <SDMMC_CmdBusWidth>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  BusWidth BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 800743e:	b580      	push	{r7, lr}
 8007440:	b088      	sub	sp, #32
 8007442:	af00      	add	r7, sp, #0
 8007444:	6078      	str	r0, [r7, #4]
 8007446:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8007448:	683b      	ldr	r3, [r7, #0]
 800744a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800744c:	2306      	movs	r3, #6
 800744e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007450:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8007454:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007456:	2300      	movs	r3, #0
 8007458:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800745a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800745e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007460:	f107 0308 	add.w	r3, r7, #8
 8007464:	4619      	mov	r1, r3
 8007466:	6878      	ldr	r0, [r7, #4]
 8007468:	f7ff fde8 	bl	800703c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 800746c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007470:	2106      	movs	r1, #6
 8007472:	6878      	ldr	r0, [r7, #4]
 8007474:	f000 f8f0 	bl	8007658 <SDMMC_GetCmdResp1>
 8007478:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800747a:	69fb      	ldr	r3, [r7, #28]
}
 800747c:	4618      	mov	r0, r3
 800747e:	3720      	adds	r7, #32
 8007480:	46bd      	mov	sp, r7
 8007482:	bd80      	pop	{r7, pc}

08007484 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 8007484:	b580      	push	{r7, lr}
 8007486:	b088      	sub	sp, #32
 8007488:	af00      	add	r7, sp, #0
 800748a:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800748c:	2300      	movs	r3, #0
 800748e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8007490:	2333      	movs	r3, #51	@ 0x33
 8007492:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007494:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8007498:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800749a:	2300      	movs	r3, #0
 800749c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800749e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80074a2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80074a4:	f107 0308 	add.w	r3, r7, #8
 80074a8:	4619      	mov	r1, r3
 80074aa:	6878      	ldr	r0, [r7, #4]
 80074ac:	f7ff fdc6 	bl	800703c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 80074b0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80074b4:	2133      	movs	r1, #51	@ 0x33
 80074b6:	6878      	ldr	r0, [r7, #4]
 80074b8:	f000 f8ce 	bl	8007658 <SDMMC_GetCmdResp1>
 80074bc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80074be:	69fb      	ldr	r3, [r7, #28]
}
 80074c0:	4618      	mov	r0, r3
 80074c2:	3720      	adds	r7, #32
 80074c4:	46bd      	mov	sp, r7
 80074c6:	bd80      	pop	{r7, pc}

080074c8 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 80074c8:	b580      	push	{r7, lr}
 80074ca:	b088      	sub	sp, #32
 80074cc:	af00      	add	r7, sp, #0
 80074ce:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 80074d0:	2300      	movs	r3, #0
 80074d2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 80074d4:	2302      	movs	r3, #2
 80074d6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 80074d8:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80074dc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80074de:	2300      	movs	r3, #0
 80074e0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80074e2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80074e6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80074e8:	f107 0308 	add.w	r3, r7, #8
 80074ec:	4619      	mov	r1, r3
 80074ee:	6878      	ldr	r0, [r7, #4]
 80074f0:	f7ff fda4 	bl	800703c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 80074f4:	6878      	ldr	r0, [r7, #4]
 80074f6:	f000 f9a1 	bl	800783c <SDMMC_GetCmdResp2>
 80074fa:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80074fc:	69fb      	ldr	r3, [r7, #28]
}
 80074fe:	4618      	mov	r0, r3
 8007500:	3720      	adds	r7, #32
 8007502:	46bd      	mov	sp, r7
 8007504:	bd80      	pop	{r7, pc}

08007506 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8007506:	b580      	push	{r7, lr}
 8007508:	b088      	sub	sp, #32
 800750a:	af00      	add	r7, sp, #0
 800750c:	6078      	str	r0, [r7, #4]
 800750e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8007510:	683b      	ldr	r3, [r7, #0]
 8007512:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8007514:	2309      	movs	r3, #9
 8007516:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8007518:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800751c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800751e:	2300      	movs	r3, #0
 8007520:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007522:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8007526:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007528:	f107 0308 	add.w	r3, r7, #8
 800752c:	4619      	mov	r1, r3
 800752e:	6878      	ldr	r0, [r7, #4]
 8007530:	f7ff fd84 	bl	800703c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8007534:	6878      	ldr	r0, [r7, #4]
 8007536:	f000 f981 	bl	800783c <SDMMC_GetCmdResp2>
 800753a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800753c:	69fb      	ldr	r3, [r7, #28]
}
 800753e:	4618      	mov	r0, r3
 8007540:	3720      	adds	r7, #32
 8007542:	46bd      	mov	sp, r7
 8007544:	bd80      	pop	{r7, pc}

08007546 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  pRCA Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 8007546:	b580      	push	{r7, lr}
 8007548:	b088      	sub	sp, #32
 800754a:	af00      	add	r7, sp, #0
 800754c:	6078      	str	r0, [r7, #4]
 800754e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8007550:	2300      	movs	r3, #0
 8007552:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8007554:	2303      	movs	r3, #3
 8007556:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007558:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800755c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800755e:	2300      	movs	r3, #0
 8007560:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007562:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8007566:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007568:	f107 0308 	add.w	r3, r7, #8
 800756c:	4619      	mov	r1, r3
 800756e:	6878      	ldr	r0, [r7, #4]
 8007570:	f7ff fd64 	bl	800703c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8007574:	683a      	ldr	r2, [r7, #0]
 8007576:	2103      	movs	r1, #3
 8007578:	6878      	ldr	r0, [r7, #4]
 800757a:	f000 f9e9 	bl	8007950 <SDMMC_GetCmdResp6>
 800757e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007580:	69fb      	ldr	r3, [r7, #28]
}
 8007582:	4618      	mov	r0, r3
 8007584:	3720      	adds	r7, #32
 8007586:	46bd      	mov	sp, r7
 8007588:	bd80      	pop	{r7, pc}

0800758a <SDMMC_CmdSendStatus>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800758a:	b580      	push	{r7, lr}
 800758c:	b088      	sub	sp, #32
 800758e:	af00      	add	r7, sp, #0
 8007590:	6078      	str	r0, [r7, #4]
 8007592:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 8007594:	683b      	ldr	r3, [r7, #0]
 8007596:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8007598:	230d      	movs	r3, #13
 800759a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800759c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80075a0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80075a2:	2300      	movs	r3, #0
 80075a4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80075a6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80075aa:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80075ac:	f107 0308 	add.w	r3, r7, #8
 80075b0:	4619      	mov	r1, r3
 80075b2:	6878      	ldr	r0, [r7, #4]
 80075b4:	f7ff fd42 	bl	800703c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 80075b8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80075bc:	210d      	movs	r1, #13
 80075be:	6878      	ldr	r0, [r7, #4]
 80075c0:	f000 f84a 	bl	8007658 <SDMMC_GetCmdResp1>
 80075c4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80075c6:	69fb      	ldr	r3, [r7, #28]
}
 80075c8:	4618      	mov	r0, r3
 80075ca:	3720      	adds	r7, #32
 80075cc:	46bd      	mov	sp, r7
 80075ce:	bd80      	pop	{r7, pc}

080075d0 <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 80075d0:	b580      	push	{r7, lr}
 80075d2:	b088      	sub	sp, #32
 80075d4:	af00      	add	r7, sp, #0
 80075d6:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 80075d8:	2300      	movs	r3, #0
 80075da:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 80075dc:	230d      	movs	r3, #13
 80075de:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80075e0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80075e4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80075e6:	2300      	movs	r3, #0
 80075e8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80075ea:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80075ee:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80075f0:	f107 0308 	add.w	r3, r7, #8
 80075f4:	4619      	mov	r1, r3
 80075f6:	6878      	ldr	r0, [r7, #4]
 80075f8:	f7ff fd20 	bl	800703c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 80075fc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007600:	210d      	movs	r1, #13
 8007602:	6878      	ldr	r0, [r7, #4]
 8007604:	f000 f828 	bl	8007658 <SDMMC_GetCmdResp1>
 8007608:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800760a:	69fb      	ldr	r3, [r7, #28]
}
 800760c:	4618      	mov	r0, r3
 800760e:	3720      	adds	r7, #32
 8007610:	46bd      	mov	sp, r7
 8007612:	bd80      	pop	{r7, pc}

08007614 <SDMMC_CmdVoltageSwitch>:
  *         condition register (OCR)
  * @param  None
  * @retval HAL status
  */
uint32_t SDMMC_CmdVoltageSwitch(SDMMC_TypeDef *SDMMCx)
{
 8007614:	b580      	push	{r7, lr}
 8007616:	b088      	sub	sp, #32
 8007618:	af00      	add	r7, sp, #0
 800761a:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0x00000000;
 800761c:	2300      	movs	r3, #0
 800761e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_VOLTAGE_SWITCH;
 8007620:	230b      	movs	r3, #11
 8007622:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007624:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8007628:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800762a:	2300      	movs	r3, #0
 800762c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800762e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8007632:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007634:	f107 0308 	add.w	r3, r7, #8
 8007638:	4619      	mov	r1, r3
 800763a:	6878      	ldr	r0, [r7, #4]
 800763c:	f7ff fcfe 	bl	800703c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_VOLTAGE_SWITCH, SDMMC_CMDTIMEOUT);
 8007640:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007644:	210b      	movs	r1, #11
 8007646:	6878      	ldr	r0, [r7, #4]
 8007648:	f000 f806 	bl	8007658 <SDMMC_GetCmdResp1>
 800764c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800764e:	69fb      	ldr	r3, [r7, #28]
}
 8007650:	4618      	mov	r0, r3
 8007652:	3720      	adds	r7, #32
 8007654:	46bd      	mov	sp, r7
 8007656:	bd80      	pop	{r7, pc}

08007658 <SDMMC_GetCmdResp1>:
  * @param  hsd SD handle
  * @param  SD_CMD The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 8007658:	b580      	push	{r7, lr}
 800765a:	b088      	sub	sp, #32
 800765c:	af00      	add	r7, sp, #0
 800765e:	60f8      	str	r0, [r7, #12]
 8007660:	460b      	mov	r3, r1
 8007662:	607a      	str	r2, [r7, #4]
 8007664:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8007666:	4b70      	ldr	r3, [pc, #448]	@ (8007828 <SDMMC_GetCmdResp1+0x1d0>)
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	4a70      	ldr	r2, [pc, #448]	@ (800782c <SDMMC_GetCmdResp1+0x1d4>)
 800766c:	fba2 2303 	umull	r2, r3, r2, r3
 8007670:	0a5a      	lsrs	r2, r3, #9
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	fb02 f303 	mul.w	r3, r2, r3
 8007678:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800767a:	69fb      	ldr	r3, [r7, #28]
 800767c:	1e5a      	subs	r2, r3, #1
 800767e:	61fa      	str	r2, [r7, #28]
 8007680:	2b00      	cmp	r3, #0
 8007682:	d102      	bne.n	800768a <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007684:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8007688:	e0c9      	b.n	800781e <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800768e:	61bb      	str	r3, [r7, #24]
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 8007690:	69ba      	ldr	r2, [r7, #24]
 8007692:	4b67      	ldr	r3, [pc, #412]	@ (8007830 <SDMMC_GetCmdResp1+0x1d8>)
 8007694:	4013      	ands	r3, r2
 8007696:	2b00      	cmp	r3, #0
 8007698:	d0ef      	beq.n	800767a <SDMMC_GetCmdResp1+0x22>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800769a:	69bb      	ldr	r3, [r7, #24]
 800769c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d1ea      	bne.n	800767a <SDMMC_GetCmdResp1+0x22>
#else
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80076a8:	f003 0304 	and.w	r3, r3, #4
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d004      	beq.n	80076ba <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	2204      	movs	r2, #4
 80076b4:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80076b6:	2304      	movs	r3, #4
 80076b8:	e0b1      	b.n	800781e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80076be:	f003 0301 	and.w	r3, r3, #1
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d004      	beq.n	80076d0 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	2201      	movs	r2, #1
 80076ca:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 80076cc:	2301      	movs	r3, #1
 80076ce:	e0a6      	b.n	800781e <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	4a58      	ldr	r2, [pc, #352]	@ (8007834 <SDMMC_GetCmdResp1+0x1dc>)
 80076d4:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 80076d6:	68f8      	ldr	r0, [r7, #12]
 80076d8:	f7ff fcda 	bl	8007090 <SDMMC_GetCommandResponse>
 80076dc:	4603      	mov	r3, r0
 80076de:	461a      	mov	r2, r3
 80076e0:	7afb      	ldrb	r3, [r7, #11]
 80076e2:	4293      	cmp	r3, r2
 80076e4:	d001      	beq.n	80076ea <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80076e6:	2301      	movs	r3, #1
 80076e8:	e099      	b.n	800781e <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 80076ea:	2100      	movs	r1, #0
 80076ec:	68f8      	ldr	r0, [r7, #12]
 80076ee:	f7ff fcdc 	bl	80070aa <SDMMC_GetResponse>
 80076f2:	6178      	str	r0, [r7, #20]

  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 80076f4:	697a      	ldr	r2, [r7, #20]
 80076f6:	4b50      	ldr	r3, [pc, #320]	@ (8007838 <SDMMC_GetCmdResp1+0x1e0>)
 80076f8:	4013      	ands	r3, r2
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d101      	bne.n	8007702 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 80076fe:	2300      	movs	r3, #0
 8007700:	e08d      	b.n	800781e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8007702:	697b      	ldr	r3, [r7, #20]
 8007704:	2b00      	cmp	r3, #0
 8007706:	da02      	bge.n	800770e <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8007708:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800770c:	e087      	b.n	800781e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800770e:	697b      	ldr	r3, [r7, #20]
 8007710:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8007714:	2b00      	cmp	r3, #0
 8007716:	d001      	beq.n	800771c <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8007718:	2340      	movs	r3, #64	@ 0x40
 800771a:	e080      	b.n	800781e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800771c:	697b      	ldr	r3, [r7, #20]
 800771e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007722:	2b00      	cmp	r3, #0
 8007724:	d001      	beq.n	800772a <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8007726:	2380      	movs	r3, #128	@ 0x80
 8007728:	e079      	b.n	800781e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800772a:	697b      	ldr	r3, [r7, #20]
 800772c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007730:	2b00      	cmp	r3, #0
 8007732:	d002      	beq.n	800773a <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8007734:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8007738:	e071      	b.n	800781e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800773a:	697b      	ldr	r3, [r7, #20]
 800773c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007740:	2b00      	cmp	r3, #0
 8007742:	d002      	beq.n	800774a <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8007744:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007748:	e069      	b.n	800781e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800774a:	697b      	ldr	r3, [r7, #20]
 800774c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8007750:	2b00      	cmp	r3, #0
 8007752:	d002      	beq.n	800775a <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8007754:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007758:	e061      	b.n	800781e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800775a:	697b      	ldr	r3, [r7, #20]
 800775c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007760:	2b00      	cmp	r3, #0
 8007762:	d002      	beq.n	800776a <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8007764:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8007768:	e059      	b.n	800781e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800776a:	697b      	ldr	r3, [r7, #20]
 800776c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007770:	2b00      	cmp	r3, #0
 8007772:	d002      	beq.n	800777a <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8007774:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8007778:	e051      	b.n	800781e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800777a:	697b      	ldr	r3, [r7, #20]
 800777c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007780:	2b00      	cmp	r3, #0
 8007782:	d002      	beq.n	800778a <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8007784:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8007788:	e049      	b.n	800781e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800778a:	697b      	ldr	r3, [r7, #20]
 800778c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007790:	2b00      	cmp	r3, #0
 8007792:	d002      	beq.n	800779a <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8007794:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8007798:	e041      	b.n	800781e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800779a:	697b      	ldr	r3, [r7, #20]
 800779c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d002      	beq.n	80077aa <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 80077a4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80077a8:	e039      	b.n	800781e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 80077aa:	697b      	ldr	r3, [r7, #20]
 80077ac:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d002      	beq.n	80077ba <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 80077b4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80077b8:	e031      	b.n	800781e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 80077ba:	697b      	ldr	r3, [r7, #20]
 80077bc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d002      	beq.n	80077ca <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 80077c4:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 80077c8:	e029      	b.n	800781e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 80077ca:	697b      	ldr	r3, [r7, #20]
 80077cc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d002      	beq.n	80077da <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 80077d4:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 80077d8:	e021      	b.n	800781e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 80077da:	697b      	ldr	r3, [r7, #20]
 80077dc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d002      	beq.n	80077ea <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 80077e4:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80077e8:	e019      	b.n	800781e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 80077ea:	697b      	ldr	r3, [r7, #20]
 80077ec:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d002      	beq.n	80077fa <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 80077f4:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80077f8:	e011      	b.n	800781e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 80077fa:	697b      	ldr	r3, [r7, #20]
 80077fc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007800:	2b00      	cmp	r3, #0
 8007802:	d002      	beq.n	800780a <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8007804:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8007808:	e009      	b.n	800781e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800780a:	697b      	ldr	r3, [r7, #20]
 800780c:	f003 0308 	and.w	r3, r3, #8
 8007810:	2b00      	cmp	r3, #0
 8007812:	d002      	beq.n	800781a <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8007814:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 8007818:	e001      	b.n	800781e <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800781a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800781e:	4618      	mov	r0, r3
 8007820:	3720      	adds	r7, #32
 8007822:	46bd      	mov	sp, r7
 8007824:	bd80      	pop	{r7, pc}
 8007826:	bf00      	nop
 8007828:	20000000 	.word	0x20000000
 800782c:	10624dd3 	.word	0x10624dd3
 8007830:	00200045 	.word	0x00200045
 8007834:	002000c5 	.word	0x002000c5
 8007838:	fdffe008 	.word	0xfdffe008

0800783c <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800783c:	b480      	push	{r7}
 800783e:	b085      	sub	sp, #20
 8007840:	af00      	add	r7, sp, #0
 8007842:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007844:	4b1f      	ldr	r3, [pc, #124]	@ (80078c4 <SDMMC_GetCmdResp2+0x88>)
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	4a1f      	ldr	r2, [pc, #124]	@ (80078c8 <SDMMC_GetCmdResp2+0x8c>)
 800784a:	fba2 2303 	umull	r2, r3, r2, r3
 800784e:	0a5b      	lsrs	r3, r3, #9
 8007850:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007854:	fb02 f303 	mul.w	r3, r2, r3
 8007858:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	1e5a      	subs	r2, r3, #1
 800785e:	60fa      	str	r2, [r7, #12]
 8007860:	2b00      	cmp	r3, #0
 8007862:	d102      	bne.n	800786a <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007864:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8007868:	e026      	b.n	80078b8 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800786e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8007870:	68bb      	ldr	r3, [r7, #8]
 8007872:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8007876:	2b00      	cmp	r3, #0
 8007878:	d0ef      	beq.n	800785a <SDMMC_GetCmdResp2+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800787a:	68bb      	ldr	r3, [r7, #8]
 800787c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8007880:	2b00      	cmp	r3, #0
 8007882:	d1ea      	bne.n	800785a <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007888:	f003 0304 	and.w	r3, r3, #4
 800788c:	2b00      	cmp	r3, #0
 800788e:	d004      	beq.n	800789a <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	2204      	movs	r2, #4
 8007894:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007896:	2304      	movs	r3, #4
 8007898:	e00e      	b.n	80078b8 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800789e:	f003 0301 	and.w	r3, r3, #1
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d004      	beq.n	80078b0 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	2201      	movs	r2, #1
 80078aa:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 80078ac:	2301      	movs	r3, #1
 80078ae:	e003      	b.n	80078b8 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	4a06      	ldr	r2, [pc, #24]	@ (80078cc <SDMMC_GetCmdResp2+0x90>)
 80078b4:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 80078b6:	2300      	movs	r3, #0
}
 80078b8:	4618      	mov	r0, r3
 80078ba:	3714      	adds	r7, #20
 80078bc:	46bd      	mov	sp, r7
 80078be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078c2:	4770      	bx	lr
 80078c4:	20000000 	.word	0x20000000
 80078c8:	10624dd3 	.word	0x10624dd3
 80078cc:	002000c5 	.word	0x002000c5

080078d0 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 80078d0:	b480      	push	{r7}
 80078d2:	b085      	sub	sp, #20
 80078d4:	af00      	add	r7, sp, #0
 80078d6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80078d8:	4b1a      	ldr	r3, [pc, #104]	@ (8007944 <SDMMC_GetCmdResp3+0x74>)
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	4a1a      	ldr	r2, [pc, #104]	@ (8007948 <SDMMC_GetCmdResp3+0x78>)
 80078de:	fba2 2303 	umull	r2, r3, r2, r3
 80078e2:	0a5b      	lsrs	r3, r3, #9
 80078e4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80078e8:	fb02 f303 	mul.w	r3, r2, r3
 80078ec:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	1e5a      	subs	r2, r3, #1
 80078f2:	60fa      	str	r2, [r7, #12]
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d102      	bne.n	80078fe <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80078f8:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80078fc:	e01b      	b.n	8007936 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007902:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8007904:	68bb      	ldr	r3, [r7, #8]
 8007906:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800790a:	2b00      	cmp	r3, #0
 800790c:	d0ef      	beq.n	80078ee <SDMMC_GetCmdResp3+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800790e:	68bb      	ldr	r3, [r7, #8]
 8007910:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8007914:	2b00      	cmp	r3, #0
 8007916:	d1ea      	bne.n	80078ee <SDMMC_GetCmdResp3+0x1e>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800791c:	f003 0304 	and.w	r3, r3, #4
 8007920:	2b00      	cmp	r3, #0
 8007922:	d004      	beq.n	800792e <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	2204      	movs	r2, #4
 8007928:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800792a:	2304      	movs	r3, #4
 800792c:	e003      	b.n	8007936 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	4a06      	ldr	r2, [pc, #24]	@ (800794c <SDMMC_GetCmdResp3+0x7c>)
 8007932:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 8007934:	2300      	movs	r3, #0
}
 8007936:	4618      	mov	r0, r3
 8007938:	3714      	adds	r7, #20
 800793a:	46bd      	mov	sp, r7
 800793c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007940:	4770      	bx	lr
 8007942:	bf00      	nop
 8007944:	20000000 	.word	0x20000000
 8007948:	10624dd3 	.word	0x10624dd3
 800794c:	002000c5 	.word	0x002000c5

08007950 <SDMMC_GetCmdResp6>:
  * @param  pRCA Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8007950:	b580      	push	{r7, lr}
 8007952:	b088      	sub	sp, #32
 8007954:	af00      	add	r7, sp, #0
 8007956:	60f8      	str	r0, [r7, #12]
 8007958:	460b      	mov	r3, r1
 800795a:	607a      	str	r2, [r7, #4]
 800795c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800795e:	4b35      	ldr	r3, [pc, #212]	@ (8007a34 <SDMMC_GetCmdResp6+0xe4>)
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	4a35      	ldr	r2, [pc, #212]	@ (8007a38 <SDMMC_GetCmdResp6+0xe8>)
 8007964:	fba2 2303 	umull	r2, r3, r2, r3
 8007968:	0a5b      	lsrs	r3, r3, #9
 800796a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800796e:	fb02 f303 	mul.w	r3, r2, r3
 8007972:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 8007974:	69fb      	ldr	r3, [r7, #28]
 8007976:	1e5a      	subs	r2, r3, #1
 8007978:	61fa      	str	r2, [r7, #28]
 800797a:	2b00      	cmp	r3, #0
 800797c:	d102      	bne.n	8007984 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800797e:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8007982:	e052      	b.n	8007a2a <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007988:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800798a:	69bb      	ldr	r3, [r7, #24]
 800798c:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8007990:	2b00      	cmp	r3, #0
 8007992:	d0ef      	beq.n	8007974 <SDMMC_GetCmdResp6+0x24>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8007994:	69bb      	ldr	r3, [r7, #24]
 8007996:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800799a:	2b00      	cmp	r3, #0
 800799c:	d1ea      	bne.n	8007974 <SDMMC_GetCmdResp6+0x24>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80079a2:	f003 0304 	and.w	r3, r3, #4
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d004      	beq.n	80079b4 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	2204      	movs	r2, #4
 80079ae:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80079b0:	2304      	movs	r3, #4
 80079b2:	e03a      	b.n	8007a2a <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80079b8:	f003 0301 	and.w	r3, r3, #1
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d004      	beq.n	80079ca <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	2201      	movs	r2, #1
 80079c4:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 80079c6:	2301      	movs	r3, #1
 80079c8:	e02f      	b.n	8007a2a <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 80079ca:	68f8      	ldr	r0, [r7, #12]
 80079cc:	f7ff fb60 	bl	8007090 <SDMMC_GetCommandResponse>
 80079d0:	4603      	mov	r3, r0
 80079d2:	461a      	mov	r2, r3
 80079d4:	7afb      	ldrb	r3, [r7, #11]
 80079d6:	4293      	cmp	r3, r2
 80079d8:	d001      	beq.n	80079de <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80079da:	2301      	movs	r3, #1
 80079dc:	e025      	b.n	8007a2a <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	4a16      	ldr	r2, [pc, #88]	@ (8007a3c <SDMMC_GetCmdResp6+0xec>)
 80079e2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 80079e4:	2100      	movs	r1, #0
 80079e6:	68f8      	ldr	r0, [r7, #12]
 80079e8:	f7ff fb5f 	bl	80070aa <SDMMC_GetResponse>
 80079ec:	6178      	str	r0, [r7, #20]

  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 80079ee:	697b      	ldr	r3, [r7, #20]
 80079f0:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d106      	bne.n	8007a06 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 80079f8:	697b      	ldr	r3, [r7, #20]
 80079fa:	0c1b      	lsrs	r3, r3, #16
 80079fc:	b29a      	uxth	r2, r3
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 8007a02:	2300      	movs	r3, #0
 8007a04:	e011      	b.n	8007a2a <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8007a06:	697b      	ldr	r3, [r7, #20]
 8007a08:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d002      	beq.n	8007a16 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8007a10:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8007a14:	e009      	b.n	8007a2a <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8007a16:	697b      	ldr	r3, [r7, #20]
 8007a18:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d002      	beq.n	8007a26 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8007a20:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8007a24:	e001      	b.n	8007a2a <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8007a26:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 8007a2a:	4618      	mov	r0, r3
 8007a2c:	3720      	adds	r7, #32
 8007a2e:	46bd      	mov	sp, r7
 8007a30:	bd80      	pop	{r7, pc}
 8007a32:	bf00      	nop
 8007a34:	20000000 	.word	0x20000000
 8007a38:	10624dd3 	.word	0x10624dd3
 8007a3c:	002000c5 	.word	0x002000c5

08007a40 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 8007a40:	b480      	push	{r7}
 8007a42:	b085      	sub	sp, #20
 8007a44:	af00      	add	r7, sp, #0
 8007a46:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007a48:	4b22      	ldr	r3, [pc, #136]	@ (8007ad4 <SDMMC_GetCmdResp7+0x94>)
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	4a22      	ldr	r2, [pc, #136]	@ (8007ad8 <SDMMC_GetCmdResp7+0x98>)
 8007a4e:	fba2 2303 	umull	r2, r3, r2, r3
 8007a52:	0a5b      	lsrs	r3, r3, #9
 8007a54:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007a58:	fb02 f303 	mul.w	r3, r2, r3
 8007a5c:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	1e5a      	subs	r2, r3, #1
 8007a62:	60fa      	str	r2, [r7, #12]
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d102      	bne.n	8007a6e <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007a68:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8007a6c:	e02c      	b.n	8007ac8 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007a72:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8007a74:	68bb      	ldr	r3, [r7, #8]
 8007a76:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d0ef      	beq.n	8007a5e <SDMMC_GetCmdResp7+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8007a7e:	68bb      	ldr	r3, [r7, #8]
 8007a80:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d1ea      	bne.n	8007a5e <SDMMC_GetCmdResp7+0x1e>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007a8c:	f003 0304 	and.w	r3, r3, #4
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d004      	beq.n	8007a9e <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	2204      	movs	r2, #4
 8007a98:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007a9a:	2304      	movs	r3, #4
 8007a9c:	e014      	b.n	8007ac8 <SDMMC_GetCmdResp7+0x88>
  }

  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007aa2:	f003 0301 	and.w	r3, r3, #1
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d004      	beq.n	8007ab4 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	2201      	movs	r2, #1
 8007aae:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007ab0:	2301      	movs	r3, #1
 8007ab2:	e009      	b.n	8007ac8 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007ab8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d002      	beq.n	8007ac6 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	2240      	movs	r2, #64	@ 0x40
 8007ac4:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 8007ac6:	2300      	movs	r3, #0

}
 8007ac8:	4618      	mov	r0, r3
 8007aca:	3714      	adds	r7, #20
 8007acc:	46bd      	mov	sp, r7
 8007ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ad2:	4770      	bx	lr
 8007ad4:	20000000 	.word	0x20000000
 8007ad8:	10624dd3 	.word	0x10624dd3

08007adc <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 8007adc:	b480      	push	{r7}
 8007ade:	b085      	sub	sp, #20
 8007ae0:	af00      	add	r7, sp, #0
 8007ae2:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007ae4:	4b11      	ldr	r3, [pc, #68]	@ (8007b2c <SDMMC_GetCmdError+0x50>)
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	4a11      	ldr	r2, [pc, #68]	@ (8007b30 <SDMMC_GetCmdError+0x54>)
 8007aea:	fba2 2303 	umull	r2, r3, r2, r3
 8007aee:	0a5b      	lsrs	r3, r3, #9
 8007af0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007af4:	fb02 f303 	mul.w	r3, r2, r3
 8007af8:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	1e5a      	subs	r2, r3, #1
 8007afe:	60fa      	str	r2, [r7, #12]
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d102      	bne.n	8007b0a <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007b04:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8007b08:	e009      	b.n	8007b1e <SDMMC_GetCmdError+0x42>
    }

  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007b0e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d0f1      	beq.n	8007afa <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	4a06      	ldr	r2, [pc, #24]	@ (8007b34 <SDMMC_GetCmdError+0x58>)
 8007b1a:	639a      	str	r2, [r3, #56]	@ 0x38

  return SDMMC_ERROR_NONE;
 8007b1c:	2300      	movs	r3, #0
}
 8007b1e:	4618      	mov	r0, r3
 8007b20:	3714      	adds	r7, #20
 8007b22:	46bd      	mov	sp, r7
 8007b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b28:	4770      	bx	lr
 8007b2a:	bf00      	nop
 8007b2c:	20000000 	.word	0x20000000
 8007b30:	10624dd3 	.word	0x10624dd3
 8007b34:	002000c5 	.word	0x002000c5

08007b38 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8007b38:	b580      	push	{r7, lr}
 8007b3a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8007b3c:	4904      	ldr	r1, [pc, #16]	@ (8007b50 <MX_FATFS_Init+0x18>)
 8007b3e:	4805      	ldr	r0, [pc, #20]	@ (8007b54 <MX_FATFS_Init+0x1c>)
 8007b40:	f002 ff36 	bl	800a9b0 <FATFS_LinkDriver>
 8007b44:	4603      	mov	r3, r0
 8007b46:	461a      	mov	r2, r3
 8007b48:	4b03      	ldr	r3, [pc, #12]	@ (8007b58 <MX_FATFS_Init+0x20>)
 8007b4a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8007b4c:	bf00      	nop
 8007b4e:	bd80      	pop	{r7, pc}
 8007b50:	20008318 	.word	0x20008318
 8007b54:	0800db88 	.word	0x0800db88
 8007b58:	20008314 	.word	0x20008314

08007b5c <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8007b5c:	b480      	push	{r7}
 8007b5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8007b60:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8007b62:	4618      	mov	r0, r3
 8007b64:	46bd      	mov	sp, r7
 8007b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b6a:	4770      	bx	lr

08007b6c <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8007b6c:	b580      	push	{r7, lr}
 8007b6e:	b082      	sub	sp, #8
 8007b70:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8007b72:	2300      	movs	r3, #0
 8007b74:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8007b76:	f000 f885 	bl	8007c84 <BSP_SD_IsDetected>
 8007b7a:	4603      	mov	r3, r0
 8007b7c:	2b01      	cmp	r3, #1
 8007b7e:	d001      	beq.n	8007b84 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 8007b80:	2302      	movs	r3, #2
 8007b82:	e012      	b.n	8007baa <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 8007b84:	480b      	ldr	r0, [pc, #44]	@ (8007bb4 <BSP_SD_Init+0x48>)
 8007b86:	f7fd f99f 	bl	8004ec8 <HAL_SD_Init>
 8007b8a:	4603      	mov	r3, r0
 8007b8c:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 8007b8e:	79fb      	ldrb	r3, [r7, #7]
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	d109      	bne.n	8007ba8 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 8007b94:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8007b98:	4806      	ldr	r0, [pc, #24]	@ (8007bb4 <BSP_SD_Init+0x48>)
 8007b9a:	f7fe f85f 	bl	8005c5c <HAL_SD_ConfigWideBusOperation>
 8007b9e:	4603      	mov	r3, r0
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d001      	beq.n	8007ba8 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 8007ba4:	2301      	movs	r3, #1
 8007ba6:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 8007ba8:	79fb      	ldrb	r3, [r7, #7]
}
 8007baa:	4618      	mov	r0, r3
 8007bac:	3708      	adds	r7, #8
 8007bae:	46bd      	mov	sp, r7
 8007bb0:	bd80      	pop	{r7, pc}
 8007bb2:	bf00      	nop
 8007bb4:	20000a7c 	.word	0x20000a7c

08007bb8 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 8007bb8:	b580      	push	{r7, lr}
 8007bba:	b086      	sub	sp, #24
 8007bbc:	af00      	add	r7, sp, #0
 8007bbe:	60f8      	str	r0, [r7, #12]
 8007bc0:	60b9      	str	r1, [r7, #8]
 8007bc2:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8007bc4:	2300      	movs	r3, #0
 8007bc6:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	68ba      	ldr	r2, [r7, #8]
 8007bcc:	68f9      	ldr	r1, [r7, #12]
 8007bce:	4806      	ldr	r0, [pc, #24]	@ (8007be8 <BSP_SD_ReadBlocks_DMA+0x30>)
 8007bd0:	f7fd faae 	bl	8005130 <HAL_SD_ReadBlocks_DMA>
 8007bd4:	4603      	mov	r3, r0
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d001      	beq.n	8007bde <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8007bda:	2301      	movs	r3, #1
 8007bdc:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8007bde:	7dfb      	ldrb	r3, [r7, #23]
}
 8007be0:	4618      	mov	r0, r3
 8007be2:	3718      	adds	r7, #24
 8007be4:	46bd      	mov	sp, r7
 8007be6:	bd80      	pop	{r7, pc}
 8007be8:	20000a7c 	.word	0x20000a7c

08007bec <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 8007bec:	b580      	push	{r7, lr}
 8007bee:	b086      	sub	sp, #24
 8007bf0:	af00      	add	r7, sp, #0
 8007bf2:	60f8      	str	r0, [r7, #12]
 8007bf4:	60b9      	str	r1, [r7, #8]
 8007bf6:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8007bf8:	2300      	movs	r3, #0
 8007bfa:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	68ba      	ldr	r2, [r7, #8]
 8007c00:	68f9      	ldr	r1, [r7, #12]
 8007c02:	4806      	ldr	r0, [pc, #24]	@ (8007c1c <BSP_SD_WriteBlocks_DMA+0x30>)
 8007c04:	f7fd fb3c 	bl	8005280 <HAL_SD_WriteBlocks_DMA>
 8007c08:	4603      	mov	r3, r0
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d001      	beq.n	8007c12 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8007c0e:	2301      	movs	r3, #1
 8007c10:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8007c12:	7dfb      	ldrb	r3, [r7, #23]
}
 8007c14:	4618      	mov	r0, r3
 8007c16:	3718      	adds	r7, #24
 8007c18:	46bd      	mov	sp, r7
 8007c1a:	bd80      	pop	{r7, pc}
 8007c1c:	20000a7c 	.word	0x20000a7c

08007c20 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8007c20:	b580      	push	{r7, lr}
 8007c22:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8007c24:	4805      	ldr	r0, [pc, #20]	@ (8007c3c <BSP_SD_GetCardState+0x1c>)
 8007c26:	f7fe f92d 	bl	8005e84 <HAL_SD_GetCardState>
 8007c2a:	4603      	mov	r3, r0
 8007c2c:	2b04      	cmp	r3, #4
 8007c2e:	bf14      	ite	ne
 8007c30:	2301      	movne	r3, #1
 8007c32:	2300      	moveq	r3, #0
 8007c34:	b2db      	uxtb	r3, r3
}
 8007c36:	4618      	mov	r0, r3
 8007c38:	bd80      	pop	{r7, pc}
 8007c3a:	bf00      	nop
 8007c3c:	20000a7c 	.word	0x20000a7c

08007c40 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(BSP_SD_CardInfo *CardInfo)
{
 8007c40:	b580      	push	{r7, lr}
 8007c42:	b082      	sub	sp, #8
 8007c44:	af00      	add	r7, sp, #0
 8007c46:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 8007c48:	6879      	ldr	r1, [r7, #4]
 8007c4a:	4803      	ldr	r0, [pc, #12]	@ (8007c58 <BSP_SD_GetCardInfo+0x18>)
 8007c4c:	f7fd ffda 	bl	8005c04 <HAL_SD_GetCardInfo>
}
 8007c50:	bf00      	nop
 8007c52:	3708      	adds	r7, #8
 8007c54:	46bd      	mov	sp, r7
 8007c56:	bd80      	pop	{r7, pc}
 8007c58:	20000a7c 	.word	0x20000a7c

08007c5c <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8007c5c:	b580      	push	{r7, lr}
 8007c5e:	b082      	sub	sp, #8
 8007c60:	af00      	add	r7, sp, #0
 8007c62:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 8007c64:	f000 f9a0 	bl	8007fa8 <BSP_SD_WriteCpltCallback>
}
 8007c68:	bf00      	nop
 8007c6a:	3708      	adds	r7, #8
 8007c6c:	46bd      	mov	sp, r7
 8007c6e:	bd80      	pop	{r7, pc}

08007c70 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8007c70:	b580      	push	{r7, lr}
 8007c72:	b082      	sub	sp, #8
 8007c74:	af00      	add	r7, sp, #0
 8007c76:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 8007c78:	f000 f9a2 	bl	8007fc0 <BSP_SD_ReadCpltCallback>
}
 8007c7c:	bf00      	nop
 8007c7e:	3708      	adds	r7, #8
 8007c80:	46bd      	mov	sp, r7
 8007c82:	bd80      	pop	{r7, pc}

08007c84 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8007c84:	b580      	push	{r7, lr}
 8007c86:	b082      	sub	sp, #8
 8007c88:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8007c8a:	2301      	movs	r3, #1
 8007c8c:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 8007c8e:	f000 f80b 	bl	8007ca8 <BSP_PlatformIsDetected>
 8007c92:	4603      	mov	r3, r0
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d101      	bne.n	8007c9c <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 8007c98:	2300      	movs	r3, #0
 8007c9a:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8007c9c:	79fb      	ldrb	r3, [r7, #7]
 8007c9e:	b2db      	uxtb	r3, r3
}
 8007ca0:	4618      	mov	r0, r3
 8007ca2:	3708      	adds	r7, #8
 8007ca4:	46bd      	mov	sp, r7
 8007ca6:	bd80      	pop	{r7, pc}

08007ca8 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 8007ca8:	b580      	push	{r7, lr}
 8007caa:	b082      	sub	sp, #8
 8007cac:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 8007cae:	2301      	movs	r3, #1
 8007cb0:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 8007cb2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8007cb6:	4806      	ldr	r0, [pc, #24]	@ (8007cd0 <BSP_PlatformIsDetected+0x28>)
 8007cb8:	f7fa fb84 	bl	80023c4 <HAL_GPIO_ReadPin>
 8007cbc:	4603      	mov	r3, r0
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d001      	beq.n	8007cc6 <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 8007cc2:	2300      	movs	r3, #0
 8007cc4:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 8007cc6:	79fb      	ldrb	r3, [r7, #7]
}
 8007cc8:	4618      	mov	r0, r3
 8007cca:	3708      	adds	r7, #8
 8007ccc:	46bd      	mov	sp, r7
 8007cce:	bd80      	pop	{r7, pc}
 8007cd0:	48000800 	.word	0x48000800

08007cd4 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 8007cd4:	b580      	push	{r7, lr}
 8007cd6:	b084      	sub	sp, #16
 8007cd8:	af00      	add	r7, sp, #0
 8007cda:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 8007cdc:	f7fa f89e 	bl	8001e1c <HAL_GetTick>
 8007ce0:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 8007ce2:	e006      	b.n	8007cf2 <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8007ce4:	f7ff ff9c 	bl	8007c20 <BSP_SD_GetCardState>
 8007ce8:	4603      	mov	r3, r0
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d101      	bne.n	8007cf2 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 8007cee:	2300      	movs	r3, #0
 8007cf0:	e009      	b.n	8007d06 <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 8007cf2:	f7fa f893 	bl	8001e1c <HAL_GetTick>
 8007cf6:	4602      	mov	r2, r0
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	1ad3      	subs	r3, r2, r3
 8007cfc:	687a      	ldr	r2, [r7, #4]
 8007cfe:	429a      	cmp	r2, r3
 8007d00:	d8f0      	bhi.n	8007ce4 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 8007d02:	f04f 33ff 	mov.w	r3, #4294967295
}
 8007d06:	4618      	mov	r0, r3
 8007d08:	3710      	adds	r7, #16
 8007d0a:	46bd      	mov	sp, r7
 8007d0c:	bd80      	pop	{r7, pc}
	...

08007d10 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8007d10:	b580      	push	{r7, lr}
 8007d12:	b082      	sub	sp, #8
 8007d14:	af00      	add	r7, sp, #0
 8007d16:	4603      	mov	r3, r0
 8007d18:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8007d1a:	4b0b      	ldr	r3, [pc, #44]	@ (8007d48 <SD_CheckStatus+0x38>)
 8007d1c:	2201      	movs	r2, #1
 8007d1e:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8007d20:	f7ff ff7e 	bl	8007c20 <BSP_SD_GetCardState>
 8007d24:	4603      	mov	r3, r0
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d107      	bne.n	8007d3a <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8007d2a:	4b07      	ldr	r3, [pc, #28]	@ (8007d48 <SD_CheckStatus+0x38>)
 8007d2c:	781b      	ldrb	r3, [r3, #0]
 8007d2e:	b2db      	uxtb	r3, r3
 8007d30:	f023 0301 	bic.w	r3, r3, #1
 8007d34:	b2da      	uxtb	r2, r3
 8007d36:	4b04      	ldr	r3, [pc, #16]	@ (8007d48 <SD_CheckStatus+0x38>)
 8007d38:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8007d3a:	4b03      	ldr	r3, [pc, #12]	@ (8007d48 <SD_CheckStatus+0x38>)
 8007d3c:	781b      	ldrb	r3, [r3, #0]
 8007d3e:	b2db      	uxtb	r3, r3
}
 8007d40:	4618      	mov	r0, r3
 8007d42:	3708      	adds	r7, #8
 8007d44:	46bd      	mov	sp, r7
 8007d46:	bd80      	pop	{r7, pc}
 8007d48:	20000009 	.word	0x20000009

08007d4c <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8007d4c:	b580      	push	{r7, lr}
 8007d4e:	b082      	sub	sp, #8
 8007d50:	af00      	add	r7, sp, #0
 8007d52:	4603      	mov	r3, r0
 8007d54:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8007d56:	f7ff ff09 	bl	8007b6c <BSP_SD_Init>
 8007d5a:	4603      	mov	r3, r0
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d107      	bne.n	8007d70 <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 8007d60:	79fb      	ldrb	r3, [r7, #7]
 8007d62:	4618      	mov	r0, r3
 8007d64:	f7ff ffd4 	bl	8007d10 <SD_CheckStatus>
 8007d68:	4603      	mov	r3, r0
 8007d6a:	461a      	mov	r2, r3
 8007d6c:	4b04      	ldr	r3, [pc, #16]	@ (8007d80 <SD_initialize+0x34>)
 8007d6e:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 8007d70:	4b03      	ldr	r3, [pc, #12]	@ (8007d80 <SD_initialize+0x34>)
 8007d72:	781b      	ldrb	r3, [r3, #0]
 8007d74:	b2db      	uxtb	r3, r3
}
 8007d76:	4618      	mov	r0, r3
 8007d78:	3708      	adds	r7, #8
 8007d7a:	46bd      	mov	sp, r7
 8007d7c:	bd80      	pop	{r7, pc}
 8007d7e:	bf00      	nop
 8007d80:	20000009 	.word	0x20000009

08007d84 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8007d84:	b580      	push	{r7, lr}
 8007d86:	b082      	sub	sp, #8
 8007d88:	af00      	add	r7, sp, #0
 8007d8a:	4603      	mov	r3, r0
 8007d8c:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8007d8e:	79fb      	ldrb	r3, [r7, #7]
 8007d90:	4618      	mov	r0, r3
 8007d92:	f7ff ffbd 	bl	8007d10 <SD_CheckStatus>
 8007d96:	4603      	mov	r3, r0
}
 8007d98:	4618      	mov	r0, r3
 8007d9a:	3708      	adds	r7, #8
 8007d9c:	46bd      	mov	sp, r7
 8007d9e:	bd80      	pop	{r7, pc}

08007da0 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8007da0:	b580      	push	{r7, lr}
 8007da2:	b086      	sub	sp, #24
 8007da4:	af00      	add	r7, sp, #0
 8007da6:	60b9      	str	r1, [r7, #8]
 8007da8:	607a      	str	r2, [r7, #4]
 8007daa:	603b      	str	r3, [r7, #0]
 8007dac:	4603      	mov	r3, r0
 8007dae:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8007db0:	2301      	movs	r3, #1
 8007db2:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8007db4:	f247 5030 	movw	r0, #30000	@ 0x7530
 8007db8:	f7ff ff8c 	bl	8007cd4 <SD_CheckStatusWithTimeout>
 8007dbc:	4603      	mov	r3, r0
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	da01      	bge.n	8007dc6 <SD_read+0x26>
  {
    return res;
 8007dc2:	7dfb      	ldrb	r3, [r7, #23]
 8007dc4:	e03b      	b.n	8007e3e <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 8007dc6:	683a      	ldr	r2, [r7, #0]
 8007dc8:	6879      	ldr	r1, [r7, #4]
 8007dca:	68b8      	ldr	r0, [r7, #8]
 8007dcc:	f7ff fef4 	bl	8007bb8 <BSP_SD_ReadBlocks_DMA>
 8007dd0:	4603      	mov	r3, r0
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d132      	bne.n	8007e3c <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 8007dd6:	4b1c      	ldr	r3, [pc, #112]	@ (8007e48 <SD_read+0xa8>)
 8007dd8:	2200      	movs	r2, #0
 8007dda:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 8007ddc:	f7fa f81e 	bl	8001e1c <HAL_GetTick>
 8007de0:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8007de2:	bf00      	nop
 8007de4:	4b18      	ldr	r3, [pc, #96]	@ (8007e48 <SD_read+0xa8>)
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d108      	bne.n	8007dfe <SD_read+0x5e>
 8007dec:	f7fa f816 	bl	8001e1c <HAL_GetTick>
 8007df0:	4602      	mov	r2, r0
 8007df2:	693b      	ldr	r3, [r7, #16]
 8007df4:	1ad3      	subs	r3, r2, r3
 8007df6:	f247 522f 	movw	r2, #29999	@ 0x752f
 8007dfa:	4293      	cmp	r3, r2
 8007dfc:	d9f2      	bls.n	8007de4 <SD_read+0x44>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 8007dfe:	4b12      	ldr	r3, [pc, #72]	@ (8007e48 <SD_read+0xa8>)
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d102      	bne.n	8007e0c <SD_read+0x6c>
      {
        res = RES_ERROR;
 8007e06:	2301      	movs	r3, #1
 8007e08:	75fb      	strb	r3, [r7, #23]
 8007e0a:	e017      	b.n	8007e3c <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 8007e0c:	4b0e      	ldr	r3, [pc, #56]	@ (8007e48 <SD_read+0xa8>)
 8007e0e:	2200      	movs	r2, #0
 8007e10:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8007e12:	f7fa f803 	bl	8001e1c <HAL_GetTick>
 8007e16:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8007e18:	e007      	b.n	8007e2a <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8007e1a:	f7ff ff01 	bl	8007c20 <BSP_SD_GetCardState>
 8007e1e:	4603      	mov	r3, r0
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	d102      	bne.n	8007e2a <SD_read+0x8a>
          {
            res = RES_OK;
 8007e24:	2300      	movs	r3, #0
 8007e26:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 8007e28:	e008      	b.n	8007e3c <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8007e2a:	f7f9 fff7 	bl	8001e1c <HAL_GetTick>
 8007e2e:	4602      	mov	r2, r0
 8007e30:	693b      	ldr	r3, [r7, #16]
 8007e32:	1ad3      	subs	r3, r2, r3
 8007e34:	f247 522f 	movw	r2, #29999	@ 0x752f
 8007e38:	4293      	cmp	r3, r2
 8007e3a:	d9ee      	bls.n	8007e1a <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 8007e3c:	7dfb      	ldrb	r3, [r7, #23]
}
 8007e3e:	4618      	mov	r0, r3
 8007e40:	3718      	adds	r7, #24
 8007e42:	46bd      	mov	sp, r7
 8007e44:	bd80      	pop	{r7, pc}
 8007e46:	bf00      	nop
 8007e48:	20008550 	.word	0x20008550

08007e4c <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8007e4c:	b580      	push	{r7, lr}
 8007e4e:	b086      	sub	sp, #24
 8007e50:	af00      	add	r7, sp, #0
 8007e52:	60b9      	str	r1, [r7, #8]
 8007e54:	607a      	str	r2, [r7, #4]
 8007e56:	603b      	str	r3, [r7, #0]
 8007e58:	4603      	mov	r3, r0
 8007e5a:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8007e5c:	2301      	movs	r3, #1
 8007e5e:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 8007e60:	4b24      	ldr	r3, [pc, #144]	@ (8007ef4 <SD_write+0xa8>)
 8007e62:	2200      	movs	r2, #0
 8007e64:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8007e66:	f247 5030 	movw	r0, #30000	@ 0x7530
 8007e6a:	f7ff ff33 	bl	8007cd4 <SD_CheckStatusWithTimeout>
 8007e6e:	4603      	mov	r3, r0
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	da01      	bge.n	8007e78 <SD_write+0x2c>
  {
    return res;
 8007e74:	7dfb      	ldrb	r3, [r7, #23]
 8007e76:	e038      	b.n	8007eea <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 8007e78:	683a      	ldr	r2, [r7, #0]
 8007e7a:	6879      	ldr	r1, [r7, #4]
 8007e7c:	68b8      	ldr	r0, [r7, #8]
 8007e7e:	f7ff feb5 	bl	8007bec <BSP_SD_WriteBlocks_DMA>
 8007e82:	4603      	mov	r3, r0
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d12f      	bne.n	8007ee8 <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 8007e88:	f7f9 ffc8 	bl	8001e1c <HAL_GetTick>
 8007e8c:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8007e8e:	bf00      	nop
 8007e90:	4b18      	ldr	r3, [pc, #96]	@ (8007ef4 <SD_write+0xa8>)
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	d108      	bne.n	8007eaa <SD_write+0x5e>
 8007e98:	f7f9 ffc0 	bl	8001e1c <HAL_GetTick>
 8007e9c:	4602      	mov	r2, r0
 8007e9e:	693b      	ldr	r3, [r7, #16]
 8007ea0:	1ad3      	subs	r3, r2, r3
 8007ea2:	f247 522f 	movw	r2, #29999	@ 0x752f
 8007ea6:	4293      	cmp	r3, r2
 8007ea8:	d9f2      	bls.n	8007e90 <SD_write+0x44>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 8007eaa:	4b12      	ldr	r3, [pc, #72]	@ (8007ef4 <SD_write+0xa8>)
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d102      	bne.n	8007eb8 <SD_write+0x6c>
      {
        res = RES_ERROR;
 8007eb2:	2301      	movs	r3, #1
 8007eb4:	75fb      	strb	r3, [r7, #23]
 8007eb6:	e017      	b.n	8007ee8 <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 8007eb8:	4b0e      	ldr	r3, [pc, #56]	@ (8007ef4 <SD_write+0xa8>)
 8007eba:	2200      	movs	r2, #0
 8007ebc:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8007ebe:	f7f9 ffad 	bl	8001e1c <HAL_GetTick>
 8007ec2:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8007ec4:	e007      	b.n	8007ed6 <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8007ec6:	f7ff feab 	bl	8007c20 <BSP_SD_GetCardState>
 8007eca:	4603      	mov	r3, r0
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	d102      	bne.n	8007ed6 <SD_write+0x8a>
          {
            res = RES_OK;
 8007ed0:	2300      	movs	r3, #0
 8007ed2:	75fb      	strb	r3, [r7, #23]
            break;
 8007ed4:	e008      	b.n	8007ee8 <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8007ed6:	f7f9 ffa1 	bl	8001e1c <HAL_GetTick>
 8007eda:	4602      	mov	r2, r0
 8007edc:	693b      	ldr	r3, [r7, #16]
 8007ede:	1ad3      	subs	r3, r2, r3
 8007ee0:	f247 522f 	movw	r2, #29999	@ 0x752f
 8007ee4:	4293      	cmp	r3, r2
 8007ee6:	d9ee      	bls.n	8007ec6 <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 8007ee8:	7dfb      	ldrb	r3, [r7, #23]
}
 8007eea:	4618      	mov	r0, r3
 8007eec:	3718      	adds	r7, #24
 8007eee:	46bd      	mov	sp, r7
 8007ef0:	bd80      	pop	{r7, pc}
 8007ef2:	bf00      	nop
 8007ef4:	2000854c 	.word	0x2000854c

08007ef8 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8007ef8:	b580      	push	{r7, lr}
 8007efa:	b08c      	sub	sp, #48	@ 0x30
 8007efc:	af00      	add	r7, sp, #0
 8007efe:	4603      	mov	r3, r0
 8007f00:	603a      	str	r2, [r7, #0]
 8007f02:	71fb      	strb	r3, [r7, #7]
 8007f04:	460b      	mov	r3, r1
 8007f06:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8007f08:	2301      	movs	r3, #1
 8007f0a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8007f0e:	4b25      	ldr	r3, [pc, #148]	@ (8007fa4 <SD_ioctl+0xac>)
 8007f10:	781b      	ldrb	r3, [r3, #0]
 8007f12:	b2db      	uxtb	r3, r3
 8007f14:	f003 0301 	and.w	r3, r3, #1
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	d001      	beq.n	8007f20 <SD_ioctl+0x28>
 8007f1c:	2303      	movs	r3, #3
 8007f1e:	e03c      	b.n	8007f9a <SD_ioctl+0xa2>

  switch (cmd)
 8007f20:	79bb      	ldrb	r3, [r7, #6]
 8007f22:	2b03      	cmp	r3, #3
 8007f24:	d834      	bhi.n	8007f90 <SD_ioctl+0x98>
 8007f26:	a201      	add	r2, pc, #4	@ (adr r2, 8007f2c <SD_ioctl+0x34>)
 8007f28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f2c:	08007f3d 	.word	0x08007f3d
 8007f30:	08007f45 	.word	0x08007f45
 8007f34:	08007f5d 	.word	0x08007f5d
 8007f38:	08007f77 	.word	0x08007f77
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8007f3c:	2300      	movs	r3, #0
 8007f3e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8007f42:	e028      	b.n	8007f96 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8007f44:	f107 0308 	add.w	r3, r7, #8
 8007f48:	4618      	mov	r0, r3
 8007f4a:	f7ff fe79 	bl	8007c40 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8007f4e:	6a3a      	ldr	r2, [r7, #32]
 8007f50:	683b      	ldr	r3, [r7, #0]
 8007f52:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8007f54:	2300      	movs	r3, #0
 8007f56:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8007f5a:	e01c      	b.n	8007f96 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8007f5c:	f107 0308 	add.w	r3, r7, #8
 8007f60:	4618      	mov	r0, r3
 8007f62:	f7ff fe6d 	bl	8007c40 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8007f66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f68:	b29a      	uxth	r2, r3
 8007f6a:	683b      	ldr	r3, [r7, #0]
 8007f6c:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8007f6e:	2300      	movs	r3, #0
 8007f70:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8007f74:	e00f      	b.n	8007f96 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8007f76:	f107 0308 	add.w	r3, r7, #8
 8007f7a:	4618      	mov	r0, r3
 8007f7c:	f7ff fe60 	bl	8007c40 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8007f80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f82:	0a5a      	lsrs	r2, r3, #9
 8007f84:	683b      	ldr	r3, [r7, #0]
 8007f86:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8007f88:	2300      	movs	r3, #0
 8007f8a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8007f8e:	e002      	b.n	8007f96 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8007f90:	2304      	movs	r3, #4
 8007f92:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  return res;
 8007f96:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8007f9a:	4618      	mov	r0, r3
 8007f9c:	3730      	adds	r7, #48	@ 0x30
 8007f9e:	46bd      	mov	sp, r7
 8007fa0:	bd80      	pop	{r7, pc}
 8007fa2:	bf00      	nop
 8007fa4:	20000009 	.word	0x20000009

08007fa8 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 8007fa8:	b480      	push	{r7}
 8007faa:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 8007fac:	4b03      	ldr	r3, [pc, #12]	@ (8007fbc <BSP_SD_WriteCpltCallback+0x14>)
 8007fae:	2201      	movs	r2, #1
 8007fb0:	601a      	str	r2, [r3, #0]
}
 8007fb2:	bf00      	nop
 8007fb4:	46bd      	mov	sp, r7
 8007fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fba:	4770      	bx	lr
 8007fbc:	2000854c 	.word	0x2000854c

08007fc0 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 8007fc0:	b480      	push	{r7}
 8007fc2:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 8007fc4:	4b03      	ldr	r3, [pc, #12]	@ (8007fd4 <BSP_SD_ReadCpltCallback+0x14>)
 8007fc6:	2201      	movs	r2, #1
 8007fc8:	601a      	str	r2, [r3, #0]
}
 8007fca:	bf00      	nop
 8007fcc:	46bd      	mov	sp, r7
 8007fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fd2:	4770      	bx	lr
 8007fd4:	20008550 	.word	0x20008550

08007fd8 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8007fd8:	b580      	push	{r7, lr}
 8007fda:	b084      	sub	sp, #16
 8007fdc:	af00      	add	r7, sp, #0
 8007fde:	4603      	mov	r3, r0
 8007fe0:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8007fe2:	79fb      	ldrb	r3, [r7, #7]
 8007fe4:	4a08      	ldr	r2, [pc, #32]	@ (8008008 <disk_status+0x30>)
 8007fe6:	009b      	lsls	r3, r3, #2
 8007fe8:	4413      	add	r3, r2
 8007fea:	685b      	ldr	r3, [r3, #4]
 8007fec:	685b      	ldr	r3, [r3, #4]
 8007fee:	79fa      	ldrb	r2, [r7, #7]
 8007ff0:	4905      	ldr	r1, [pc, #20]	@ (8008008 <disk_status+0x30>)
 8007ff2:	440a      	add	r2, r1
 8007ff4:	7a12      	ldrb	r2, [r2, #8]
 8007ff6:	4610      	mov	r0, r2
 8007ff8:	4798      	blx	r3
 8007ffa:	4603      	mov	r3, r0
 8007ffc:	73fb      	strb	r3, [r7, #15]
  return stat;
 8007ffe:	7bfb      	ldrb	r3, [r7, #15]
}
 8008000:	4618      	mov	r0, r3
 8008002:	3710      	adds	r7, #16
 8008004:	46bd      	mov	sp, r7
 8008006:	bd80      	pop	{r7, pc}
 8008008:	2000857c 	.word	0x2000857c

0800800c <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800800c:	b580      	push	{r7, lr}
 800800e:	b084      	sub	sp, #16
 8008010:	af00      	add	r7, sp, #0
 8008012:	4603      	mov	r3, r0
 8008014:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8008016:	2300      	movs	r3, #0
 8008018:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800801a:	79fb      	ldrb	r3, [r7, #7]
 800801c:	4a0d      	ldr	r2, [pc, #52]	@ (8008054 <disk_initialize+0x48>)
 800801e:	5cd3      	ldrb	r3, [r2, r3]
 8008020:	2b00      	cmp	r3, #0
 8008022:	d111      	bne.n	8008048 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8008024:	79fb      	ldrb	r3, [r7, #7]
 8008026:	4a0b      	ldr	r2, [pc, #44]	@ (8008054 <disk_initialize+0x48>)
 8008028:	2101      	movs	r1, #1
 800802a:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800802c:	79fb      	ldrb	r3, [r7, #7]
 800802e:	4a09      	ldr	r2, [pc, #36]	@ (8008054 <disk_initialize+0x48>)
 8008030:	009b      	lsls	r3, r3, #2
 8008032:	4413      	add	r3, r2
 8008034:	685b      	ldr	r3, [r3, #4]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	79fa      	ldrb	r2, [r7, #7]
 800803a:	4906      	ldr	r1, [pc, #24]	@ (8008054 <disk_initialize+0x48>)
 800803c:	440a      	add	r2, r1
 800803e:	7a12      	ldrb	r2, [r2, #8]
 8008040:	4610      	mov	r0, r2
 8008042:	4798      	blx	r3
 8008044:	4603      	mov	r3, r0
 8008046:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8008048:	7bfb      	ldrb	r3, [r7, #15]
}
 800804a:	4618      	mov	r0, r3
 800804c:	3710      	adds	r7, #16
 800804e:	46bd      	mov	sp, r7
 8008050:	bd80      	pop	{r7, pc}
 8008052:	bf00      	nop
 8008054:	2000857c 	.word	0x2000857c

08008058 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8008058:	b590      	push	{r4, r7, lr}
 800805a:	b087      	sub	sp, #28
 800805c:	af00      	add	r7, sp, #0
 800805e:	60b9      	str	r1, [r7, #8]
 8008060:	607a      	str	r2, [r7, #4]
 8008062:	603b      	str	r3, [r7, #0]
 8008064:	4603      	mov	r3, r0
 8008066:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8008068:	7bfb      	ldrb	r3, [r7, #15]
 800806a:	4a0a      	ldr	r2, [pc, #40]	@ (8008094 <disk_read+0x3c>)
 800806c:	009b      	lsls	r3, r3, #2
 800806e:	4413      	add	r3, r2
 8008070:	685b      	ldr	r3, [r3, #4]
 8008072:	689c      	ldr	r4, [r3, #8]
 8008074:	7bfb      	ldrb	r3, [r7, #15]
 8008076:	4a07      	ldr	r2, [pc, #28]	@ (8008094 <disk_read+0x3c>)
 8008078:	4413      	add	r3, r2
 800807a:	7a18      	ldrb	r0, [r3, #8]
 800807c:	683b      	ldr	r3, [r7, #0]
 800807e:	687a      	ldr	r2, [r7, #4]
 8008080:	68b9      	ldr	r1, [r7, #8]
 8008082:	47a0      	blx	r4
 8008084:	4603      	mov	r3, r0
 8008086:	75fb      	strb	r3, [r7, #23]
  return res;
 8008088:	7dfb      	ldrb	r3, [r7, #23]
}
 800808a:	4618      	mov	r0, r3
 800808c:	371c      	adds	r7, #28
 800808e:	46bd      	mov	sp, r7
 8008090:	bd90      	pop	{r4, r7, pc}
 8008092:	bf00      	nop
 8008094:	2000857c 	.word	0x2000857c

08008098 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8008098:	b590      	push	{r4, r7, lr}
 800809a:	b087      	sub	sp, #28
 800809c:	af00      	add	r7, sp, #0
 800809e:	60b9      	str	r1, [r7, #8]
 80080a0:	607a      	str	r2, [r7, #4]
 80080a2:	603b      	str	r3, [r7, #0]
 80080a4:	4603      	mov	r3, r0
 80080a6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 80080a8:	7bfb      	ldrb	r3, [r7, #15]
 80080aa:	4a0a      	ldr	r2, [pc, #40]	@ (80080d4 <disk_write+0x3c>)
 80080ac:	009b      	lsls	r3, r3, #2
 80080ae:	4413      	add	r3, r2
 80080b0:	685b      	ldr	r3, [r3, #4]
 80080b2:	68dc      	ldr	r4, [r3, #12]
 80080b4:	7bfb      	ldrb	r3, [r7, #15]
 80080b6:	4a07      	ldr	r2, [pc, #28]	@ (80080d4 <disk_write+0x3c>)
 80080b8:	4413      	add	r3, r2
 80080ba:	7a18      	ldrb	r0, [r3, #8]
 80080bc:	683b      	ldr	r3, [r7, #0]
 80080be:	687a      	ldr	r2, [r7, #4]
 80080c0:	68b9      	ldr	r1, [r7, #8]
 80080c2:	47a0      	blx	r4
 80080c4:	4603      	mov	r3, r0
 80080c6:	75fb      	strb	r3, [r7, #23]
  return res;
 80080c8:	7dfb      	ldrb	r3, [r7, #23]
}
 80080ca:	4618      	mov	r0, r3
 80080cc:	371c      	adds	r7, #28
 80080ce:	46bd      	mov	sp, r7
 80080d0:	bd90      	pop	{r4, r7, pc}
 80080d2:	bf00      	nop
 80080d4:	2000857c 	.word	0x2000857c

080080d8 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 80080d8:	b580      	push	{r7, lr}
 80080da:	b084      	sub	sp, #16
 80080dc:	af00      	add	r7, sp, #0
 80080de:	4603      	mov	r3, r0
 80080e0:	603a      	str	r2, [r7, #0]
 80080e2:	71fb      	strb	r3, [r7, #7]
 80080e4:	460b      	mov	r3, r1
 80080e6:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80080e8:	79fb      	ldrb	r3, [r7, #7]
 80080ea:	4a09      	ldr	r2, [pc, #36]	@ (8008110 <disk_ioctl+0x38>)
 80080ec:	009b      	lsls	r3, r3, #2
 80080ee:	4413      	add	r3, r2
 80080f0:	685b      	ldr	r3, [r3, #4]
 80080f2:	691b      	ldr	r3, [r3, #16]
 80080f4:	79fa      	ldrb	r2, [r7, #7]
 80080f6:	4906      	ldr	r1, [pc, #24]	@ (8008110 <disk_ioctl+0x38>)
 80080f8:	440a      	add	r2, r1
 80080fa:	7a10      	ldrb	r0, [r2, #8]
 80080fc:	79b9      	ldrb	r1, [r7, #6]
 80080fe:	683a      	ldr	r2, [r7, #0]
 8008100:	4798      	blx	r3
 8008102:	4603      	mov	r3, r0
 8008104:	73fb      	strb	r3, [r7, #15]
  return res;
 8008106:	7bfb      	ldrb	r3, [r7, #15]
}
 8008108:	4618      	mov	r0, r3
 800810a:	3710      	adds	r7, #16
 800810c:	46bd      	mov	sp, r7
 800810e:	bd80      	pop	{r7, pc}
 8008110:	2000857c 	.word	0x2000857c

08008114 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8008114:	b480      	push	{r7}
 8008116:	b085      	sub	sp, #20
 8008118:	af00      	add	r7, sp, #0
 800811a:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	3301      	adds	r3, #1
 8008120:	781b      	ldrb	r3, [r3, #0]
 8008122:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8008124:	89fb      	ldrh	r3, [r7, #14]
 8008126:	021b      	lsls	r3, r3, #8
 8008128:	b21a      	sxth	r2, r3
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	781b      	ldrb	r3, [r3, #0]
 800812e:	b21b      	sxth	r3, r3
 8008130:	4313      	orrs	r3, r2
 8008132:	b21b      	sxth	r3, r3
 8008134:	81fb      	strh	r3, [r7, #14]
	return rv;
 8008136:	89fb      	ldrh	r3, [r7, #14]
}
 8008138:	4618      	mov	r0, r3
 800813a:	3714      	adds	r7, #20
 800813c:	46bd      	mov	sp, r7
 800813e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008142:	4770      	bx	lr

08008144 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8008144:	b480      	push	{r7}
 8008146:	b085      	sub	sp, #20
 8008148:	af00      	add	r7, sp, #0
 800814a:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	3303      	adds	r3, #3
 8008150:	781b      	ldrb	r3, [r3, #0]
 8008152:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	021b      	lsls	r3, r3, #8
 8008158:	687a      	ldr	r2, [r7, #4]
 800815a:	3202      	adds	r2, #2
 800815c:	7812      	ldrb	r2, [r2, #0]
 800815e:	4313      	orrs	r3, r2
 8008160:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	021b      	lsls	r3, r3, #8
 8008166:	687a      	ldr	r2, [r7, #4]
 8008168:	3201      	adds	r2, #1
 800816a:	7812      	ldrb	r2, [r2, #0]
 800816c:	4313      	orrs	r3, r2
 800816e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	021b      	lsls	r3, r3, #8
 8008174:	687a      	ldr	r2, [r7, #4]
 8008176:	7812      	ldrb	r2, [r2, #0]
 8008178:	4313      	orrs	r3, r2
 800817a:	60fb      	str	r3, [r7, #12]
	return rv;
 800817c:	68fb      	ldr	r3, [r7, #12]
}
 800817e:	4618      	mov	r0, r3
 8008180:	3714      	adds	r7, #20
 8008182:	46bd      	mov	sp, r7
 8008184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008188:	4770      	bx	lr

0800818a <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800818a:	b480      	push	{r7}
 800818c:	b083      	sub	sp, #12
 800818e:	af00      	add	r7, sp, #0
 8008190:	6078      	str	r0, [r7, #4]
 8008192:	460b      	mov	r3, r1
 8008194:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	1c5a      	adds	r2, r3, #1
 800819a:	607a      	str	r2, [r7, #4]
 800819c:	887a      	ldrh	r2, [r7, #2]
 800819e:	b2d2      	uxtb	r2, r2
 80081a0:	701a      	strb	r2, [r3, #0]
 80081a2:	887b      	ldrh	r3, [r7, #2]
 80081a4:	0a1b      	lsrs	r3, r3, #8
 80081a6:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	1c5a      	adds	r2, r3, #1
 80081ac:	607a      	str	r2, [r7, #4]
 80081ae:	887a      	ldrh	r2, [r7, #2]
 80081b0:	b2d2      	uxtb	r2, r2
 80081b2:	701a      	strb	r2, [r3, #0]
}
 80081b4:	bf00      	nop
 80081b6:	370c      	adds	r7, #12
 80081b8:	46bd      	mov	sp, r7
 80081ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081be:	4770      	bx	lr

080081c0 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 80081c0:	b480      	push	{r7}
 80081c2:	b083      	sub	sp, #12
 80081c4:	af00      	add	r7, sp, #0
 80081c6:	6078      	str	r0, [r7, #4]
 80081c8:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	1c5a      	adds	r2, r3, #1
 80081ce:	607a      	str	r2, [r7, #4]
 80081d0:	683a      	ldr	r2, [r7, #0]
 80081d2:	b2d2      	uxtb	r2, r2
 80081d4:	701a      	strb	r2, [r3, #0]
 80081d6:	683b      	ldr	r3, [r7, #0]
 80081d8:	0a1b      	lsrs	r3, r3, #8
 80081da:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	1c5a      	adds	r2, r3, #1
 80081e0:	607a      	str	r2, [r7, #4]
 80081e2:	683a      	ldr	r2, [r7, #0]
 80081e4:	b2d2      	uxtb	r2, r2
 80081e6:	701a      	strb	r2, [r3, #0]
 80081e8:	683b      	ldr	r3, [r7, #0]
 80081ea:	0a1b      	lsrs	r3, r3, #8
 80081ec:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	1c5a      	adds	r2, r3, #1
 80081f2:	607a      	str	r2, [r7, #4]
 80081f4:	683a      	ldr	r2, [r7, #0]
 80081f6:	b2d2      	uxtb	r2, r2
 80081f8:	701a      	strb	r2, [r3, #0]
 80081fa:	683b      	ldr	r3, [r7, #0]
 80081fc:	0a1b      	lsrs	r3, r3, #8
 80081fe:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	1c5a      	adds	r2, r3, #1
 8008204:	607a      	str	r2, [r7, #4]
 8008206:	683a      	ldr	r2, [r7, #0]
 8008208:	b2d2      	uxtb	r2, r2
 800820a:	701a      	strb	r2, [r3, #0]
}
 800820c:	bf00      	nop
 800820e:	370c      	adds	r7, #12
 8008210:	46bd      	mov	sp, r7
 8008212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008216:	4770      	bx	lr

08008218 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8008218:	b480      	push	{r7}
 800821a:	b087      	sub	sp, #28
 800821c:	af00      	add	r7, sp, #0
 800821e:	60f8      	str	r0, [r7, #12]
 8008220:	60b9      	str	r1, [r7, #8]
 8008222:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8008228:	68bb      	ldr	r3, [r7, #8]
 800822a:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	2b00      	cmp	r3, #0
 8008230:	d00d      	beq.n	800824e <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8008232:	693a      	ldr	r2, [r7, #16]
 8008234:	1c53      	adds	r3, r2, #1
 8008236:	613b      	str	r3, [r7, #16]
 8008238:	697b      	ldr	r3, [r7, #20]
 800823a:	1c59      	adds	r1, r3, #1
 800823c:	6179      	str	r1, [r7, #20]
 800823e:	7812      	ldrb	r2, [r2, #0]
 8008240:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	3b01      	subs	r3, #1
 8008246:	607b      	str	r3, [r7, #4]
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	2b00      	cmp	r3, #0
 800824c:	d1f1      	bne.n	8008232 <mem_cpy+0x1a>
	}
}
 800824e:	bf00      	nop
 8008250:	371c      	adds	r7, #28
 8008252:	46bd      	mov	sp, r7
 8008254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008258:	4770      	bx	lr

0800825a <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800825a:	b480      	push	{r7}
 800825c:	b087      	sub	sp, #28
 800825e:	af00      	add	r7, sp, #0
 8008260:	60f8      	str	r0, [r7, #12]
 8008262:	60b9      	str	r1, [r7, #8]
 8008264:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800826a:	697b      	ldr	r3, [r7, #20]
 800826c:	1c5a      	adds	r2, r3, #1
 800826e:	617a      	str	r2, [r7, #20]
 8008270:	68ba      	ldr	r2, [r7, #8]
 8008272:	b2d2      	uxtb	r2, r2
 8008274:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	3b01      	subs	r3, #1
 800827a:	607b      	str	r3, [r7, #4]
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	2b00      	cmp	r3, #0
 8008280:	d1f3      	bne.n	800826a <mem_set+0x10>
}
 8008282:	bf00      	nop
 8008284:	bf00      	nop
 8008286:	371c      	adds	r7, #28
 8008288:	46bd      	mov	sp, r7
 800828a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800828e:	4770      	bx	lr

08008290 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8008290:	b480      	push	{r7}
 8008292:	b089      	sub	sp, #36	@ 0x24
 8008294:	af00      	add	r7, sp, #0
 8008296:	60f8      	str	r0, [r7, #12]
 8008298:	60b9      	str	r1, [r7, #8]
 800829a:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	61fb      	str	r3, [r7, #28]
 80082a0:	68bb      	ldr	r3, [r7, #8]
 80082a2:	61bb      	str	r3, [r7, #24]
	int r = 0;
 80082a4:	2300      	movs	r3, #0
 80082a6:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 80082a8:	69fb      	ldr	r3, [r7, #28]
 80082aa:	1c5a      	adds	r2, r3, #1
 80082ac:	61fa      	str	r2, [r7, #28]
 80082ae:	781b      	ldrb	r3, [r3, #0]
 80082b0:	4619      	mov	r1, r3
 80082b2:	69bb      	ldr	r3, [r7, #24]
 80082b4:	1c5a      	adds	r2, r3, #1
 80082b6:	61ba      	str	r2, [r7, #24]
 80082b8:	781b      	ldrb	r3, [r3, #0]
 80082ba:	1acb      	subs	r3, r1, r3
 80082bc:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	3b01      	subs	r3, #1
 80082c2:	607b      	str	r3, [r7, #4]
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	d002      	beq.n	80082d0 <mem_cmp+0x40>
 80082ca:	697b      	ldr	r3, [r7, #20]
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	d0eb      	beq.n	80082a8 <mem_cmp+0x18>

	return r;
 80082d0:	697b      	ldr	r3, [r7, #20]
}
 80082d2:	4618      	mov	r0, r3
 80082d4:	3724      	adds	r7, #36	@ 0x24
 80082d6:	46bd      	mov	sp, r7
 80082d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082dc:	4770      	bx	lr

080082de <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 80082de:	b480      	push	{r7}
 80082e0:	b083      	sub	sp, #12
 80082e2:	af00      	add	r7, sp, #0
 80082e4:	6078      	str	r0, [r7, #4]
 80082e6:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 80082e8:	e002      	b.n	80082f0 <chk_chr+0x12>
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	3301      	adds	r3, #1
 80082ee:	607b      	str	r3, [r7, #4]
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	781b      	ldrb	r3, [r3, #0]
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	d005      	beq.n	8008304 <chk_chr+0x26>
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	781b      	ldrb	r3, [r3, #0]
 80082fc:	461a      	mov	r2, r3
 80082fe:	683b      	ldr	r3, [r7, #0]
 8008300:	4293      	cmp	r3, r2
 8008302:	d1f2      	bne.n	80082ea <chk_chr+0xc>
	return *str;
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	781b      	ldrb	r3, [r3, #0]
}
 8008308:	4618      	mov	r0, r3
 800830a:	370c      	adds	r7, #12
 800830c:	46bd      	mov	sp, r7
 800830e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008312:	4770      	bx	lr

08008314 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8008314:	b480      	push	{r7}
 8008316:	b085      	sub	sp, #20
 8008318:	af00      	add	r7, sp, #0
 800831a:	6078      	str	r0, [r7, #4]
 800831c:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800831e:	2300      	movs	r3, #0
 8008320:	60bb      	str	r3, [r7, #8]
 8008322:	68bb      	ldr	r3, [r7, #8]
 8008324:	60fb      	str	r3, [r7, #12]
 8008326:	e029      	b.n	800837c <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8008328:	4a27      	ldr	r2, [pc, #156]	@ (80083c8 <chk_lock+0xb4>)
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	011b      	lsls	r3, r3, #4
 800832e:	4413      	add	r3, r2
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	2b00      	cmp	r3, #0
 8008334:	d01d      	beq.n	8008372 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8008336:	4a24      	ldr	r2, [pc, #144]	@ (80083c8 <chk_lock+0xb4>)
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	011b      	lsls	r3, r3, #4
 800833c:	4413      	add	r3, r2
 800833e:	681a      	ldr	r2, [r3, #0]
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	429a      	cmp	r2, r3
 8008346:	d116      	bne.n	8008376 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8008348:	4a1f      	ldr	r2, [pc, #124]	@ (80083c8 <chk_lock+0xb4>)
 800834a:	68fb      	ldr	r3, [r7, #12]
 800834c:	011b      	lsls	r3, r3, #4
 800834e:	4413      	add	r3, r2
 8008350:	3304      	adds	r3, #4
 8008352:	681a      	ldr	r2, [r3, #0]
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8008358:	429a      	cmp	r2, r3
 800835a:	d10c      	bne.n	8008376 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800835c:	4a1a      	ldr	r2, [pc, #104]	@ (80083c8 <chk_lock+0xb4>)
 800835e:	68fb      	ldr	r3, [r7, #12]
 8008360:	011b      	lsls	r3, r3, #4
 8008362:	4413      	add	r3, r2
 8008364:	3308      	adds	r3, #8
 8008366:	681a      	ldr	r2, [r3, #0]
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800836c:	429a      	cmp	r2, r3
 800836e:	d102      	bne.n	8008376 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8008370:	e007      	b.n	8008382 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8008372:	2301      	movs	r3, #1
 8008374:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	3301      	adds	r3, #1
 800837a:	60fb      	str	r3, [r7, #12]
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	2b01      	cmp	r3, #1
 8008380:	d9d2      	bls.n	8008328 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	2b02      	cmp	r3, #2
 8008386:	d109      	bne.n	800839c <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8008388:	68bb      	ldr	r3, [r7, #8]
 800838a:	2b00      	cmp	r3, #0
 800838c:	d102      	bne.n	8008394 <chk_lock+0x80>
 800838e:	683b      	ldr	r3, [r7, #0]
 8008390:	2b02      	cmp	r3, #2
 8008392:	d101      	bne.n	8008398 <chk_lock+0x84>
 8008394:	2300      	movs	r3, #0
 8008396:	e010      	b.n	80083ba <chk_lock+0xa6>
 8008398:	2312      	movs	r3, #18
 800839a:	e00e      	b.n	80083ba <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800839c:	683b      	ldr	r3, [r7, #0]
 800839e:	2b00      	cmp	r3, #0
 80083a0:	d108      	bne.n	80083b4 <chk_lock+0xa0>
 80083a2:	4a09      	ldr	r2, [pc, #36]	@ (80083c8 <chk_lock+0xb4>)
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	011b      	lsls	r3, r3, #4
 80083a8:	4413      	add	r3, r2
 80083aa:	330c      	adds	r3, #12
 80083ac:	881b      	ldrh	r3, [r3, #0]
 80083ae:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80083b2:	d101      	bne.n	80083b8 <chk_lock+0xa4>
 80083b4:	2310      	movs	r3, #16
 80083b6:	e000      	b.n	80083ba <chk_lock+0xa6>
 80083b8:	2300      	movs	r3, #0
}
 80083ba:	4618      	mov	r0, r3
 80083bc:	3714      	adds	r7, #20
 80083be:	46bd      	mov	sp, r7
 80083c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083c4:	4770      	bx	lr
 80083c6:	bf00      	nop
 80083c8:	2000855c 	.word	0x2000855c

080083cc <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 80083cc:	b480      	push	{r7}
 80083ce:	b083      	sub	sp, #12
 80083d0:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80083d2:	2300      	movs	r3, #0
 80083d4:	607b      	str	r3, [r7, #4]
 80083d6:	e002      	b.n	80083de <enq_lock+0x12>
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	3301      	adds	r3, #1
 80083dc:	607b      	str	r3, [r7, #4]
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	2b01      	cmp	r3, #1
 80083e2:	d806      	bhi.n	80083f2 <enq_lock+0x26>
 80083e4:	4a09      	ldr	r2, [pc, #36]	@ (800840c <enq_lock+0x40>)
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	011b      	lsls	r3, r3, #4
 80083ea:	4413      	add	r3, r2
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	d1f2      	bne.n	80083d8 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	2b02      	cmp	r3, #2
 80083f6:	bf14      	ite	ne
 80083f8:	2301      	movne	r3, #1
 80083fa:	2300      	moveq	r3, #0
 80083fc:	b2db      	uxtb	r3, r3
}
 80083fe:	4618      	mov	r0, r3
 8008400:	370c      	adds	r7, #12
 8008402:	46bd      	mov	sp, r7
 8008404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008408:	4770      	bx	lr
 800840a:	bf00      	nop
 800840c:	2000855c 	.word	0x2000855c

08008410 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8008410:	b480      	push	{r7}
 8008412:	b085      	sub	sp, #20
 8008414:	af00      	add	r7, sp, #0
 8008416:	6078      	str	r0, [r7, #4]
 8008418:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800841a:	2300      	movs	r3, #0
 800841c:	60fb      	str	r3, [r7, #12]
 800841e:	e01f      	b.n	8008460 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8008420:	4a41      	ldr	r2, [pc, #260]	@ (8008528 <inc_lock+0x118>)
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	011b      	lsls	r3, r3, #4
 8008426:	4413      	add	r3, r2
 8008428:	681a      	ldr	r2, [r3, #0]
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	429a      	cmp	r2, r3
 8008430:	d113      	bne.n	800845a <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8008432:	4a3d      	ldr	r2, [pc, #244]	@ (8008528 <inc_lock+0x118>)
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	011b      	lsls	r3, r3, #4
 8008438:	4413      	add	r3, r2
 800843a:	3304      	adds	r3, #4
 800843c:	681a      	ldr	r2, [r3, #0]
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8008442:	429a      	cmp	r2, r3
 8008444:	d109      	bne.n	800845a <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8008446:	4a38      	ldr	r2, [pc, #224]	@ (8008528 <inc_lock+0x118>)
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	011b      	lsls	r3, r3, #4
 800844c:	4413      	add	r3, r2
 800844e:	3308      	adds	r3, #8
 8008450:	681a      	ldr	r2, [r3, #0]
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8008456:	429a      	cmp	r2, r3
 8008458:	d006      	beq.n	8008468 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	3301      	adds	r3, #1
 800845e:	60fb      	str	r3, [r7, #12]
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	2b01      	cmp	r3, #1
 8008464:	d9dc      	bls.n	8008420 <inc_lock+0x10>
 8008466:	e000      	b.n	800846a <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8008468:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	2b02      	cmp	r3, #2
 800846e:	d132      	bne.n	80084d6 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8008470:	2300      	movs	r3, #0
 8008472:	60fb      	str	r3, [r7, #12]
 8008474:	e002      	b.n	800847c <inc_lock+0x6c>
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	3301      	adds	r3, #1
 800847a:	60fb      	str	r3, [r7, #12]
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	2b01      	cmp	r3, #1
 8008480:	d806      	bhi.n	8008490 <inc_lock+0x80>
 8008482:	4a29      	ldr	r2, [pc, #164]	@ (8008528 <inc_lock+0x118>)
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	011b      	lsls	r3, r3, #4
 8008488:	4413      	add	r3, r2
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	2b00      	cmp	r3, #0
 800848e:	d1f2      	bne.n	8008476 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	2b02      	cmp	r3, #2
 8008494:	d101      	bne.n	800849a <inc_lock+0x8a>
 8008496:	2300      	movs	r3, #0
 8008498:	e040      	b.n	800851c <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	681a      	ldr	r2, [r3, #0]
 800849e:	4922      	ldr	r1, [pc, #136]	@ (8008528 <inc_lock+0x118>)
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	011b      	lsls	r3, r3, #4
 80084a4:	440b      	add	r3, r1
 80084a6:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	689a      	ldr	r2, [r3, #8]
 80084ac:	491e      	ldr	r1, [pc, #120]	@ (8008528 <inc_lock+0x118>)
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	011b      	lsls	r3, r3, #4
 80084b2:	440b      	add	r3, r1
 80084b4:	3304      	adds	r3, #4
 80084b6:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	695a      	ldr	r2, [r3, #20]
 80084bc:	491a      	ldr	r1, [pc, #104]	@ (8008528 <inc_lock+0x118>)
 80084be:	68fb      	ldr	r3, [r7, #12]
 80084c0:	011b      	lsls	r3, r3, #4
 80084c2:	440b      	add	r3, r1
 80084c4:	3308      	adds	r3, #8
 80084c6:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 80084c8:	4a17      	ldr	r2, [pc, #92]	@ (8008528 <inc_lock+0x118>)
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	011b      	lsls	r3, r3, #4
 80084ce:	4413      	add	r3, r2
 80084d0:	330c      	adds	r3, #12
 80084d2:	2200      	movs	r2, #0
 80084d4:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 80084d6:	683b      	ldr	r3, [r7, #0]
 80084d8:	2b00      	cmp	r3, #0
 80084da:	d009      	beq.n	80084f0 <inc_lock+0xe0>
 80084dc:	4a12      	ldr	r2, [pc, #72]	@ (8008528 <inc_lock+0x118>)
 80084de:	68fb      	ldr	r3, [r7, #12]
 80084e0:	011b      	lsls	r3, r3, #4
 80084e2:	4413      	add	r3, r2
 80084e4:	330c      	adds	r3, #12
 80084e6:	881b      	ldrh	r3, [r3, #0]
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	d001      	beq.n	80084f0 <inc_lock+0xe0>
 80084ec:	2300      	movs	r3, #0
 80084ee:	e015      	b.n	800851c <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80084f0:	683b      	ldr	r3, [r7, #0]
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	d108      	bne.n	8008508 <inc_lock+0xf8>
 80084f6:	4a0c      	ldr	r2, [pc, #48]	@ (8008528 <inc_lock+0x118>)
 80084f8:	68fb      	ldr	r3, [r7, #12]
 80084fa:	011b      	lsls	r3, r3, #4
 80084fc:	4413      	add	r3, r2
 80084fe:	330c      	adds	r3, #12
 8008500:	881b      	ldrh	r3, [r3, #0]
 8008502:	3301      	adds	r3, #1
 8008504:	b29a      	uxth	r2, r3
 8008506:	e001      	b.n	800850c <inc_lock+0xfc>
 8008508:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800850c:	4906      	ldr	r1, [pc, #24]	@ (8008528 <inc_lock+0x118>)
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	011b      	lsls	r3, r3, #4
 8008512:	440b      	add	r3, r1
 8008514:	330c      	adds	r3, #12
 8008516:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	3301      	adds	r3, #1
}
 800851c:	4618      	mov	r0, r3
 800851e:	3714      	adds	r7, #20
 8008520:	46bd      	mov	sp, r7
 8008522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008526:	4770      	bx	lr
 8008528:	2000855c 	.word	0x2000855c

0800852c <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800852c:	b480      	push	{r7}
 800852e:	b085      	sub	sp, #20
 8008530:	af00      	add	r7, sp, #0
 8008532:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	3b01      	subs	r3, #1
 8008538:	607b      	str	r3, [r7, #4]
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	2b01      	cmp	r3, #1
 800853e:	d825      	bhi.n	800858c <dec_lock+0x60>
		n = Files[i].ctr;
 8008540:	4a17      	ldr	r2, [pc, #92]	@ (80085a0 <dec_lock+0x74>)
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	011b      	lsls	r3, r3, #4
 8008546:	4413      	add	r3, r2
 8008548:	330c      	adds	r3, #12
 800854a:	881b      	ldrh	r3, [r3, #0]
 800854c:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800854e:	89fb      	ldrh	r3, [r7, #14]
 8008550:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008554:	d101      	bne.n	800855a <dec_lock+0x2e>
 8008556:	2300      	movs	r3, #0
 8008558:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800855a:	89fb      	ldrh	r3, [r7, #14]
 800855c:	2b00      	cmp	r3, #0
 800855e:	d002      	beq.n	8008566 <dec_lock+0x3a>
 8008560:	89fb      	ldrh	r3, [r7, #14]
 8008562:	3b01      	subs	r3, #1
 8008564:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8008566:	4a0e      	ldr	r2, [pc, #56]	@ (80085a0 <dec_lock+0x74>)
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	011b      	lsls	r3, r3, #4
 800856c:	4413      	add	r3, r2
 800856e:	330c      	adds	r3, #12
 8008570:	89fa      	ldrh	r2, [r7, #14]
 8008572:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8008574:	89fb      	ldrh	r3, [r7, #14]
 8008576:	2b00      	cmp	r3, #0
 8008578:	d105      	bne.n	8008586 <dec_lock+0x5a>
 800857a:	4a09      	ldr	r2, [pc, #36]	@ (80085a0 <dec_lock+0x74>)
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	011b      	lsls	r3, r3, #4
 8008580:	4413      	add	r3, r2
 8008582:	2200      	movs	r2, #0
 8008584:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8008586:	2300      	movs	r3, #0
 8008588:	737b      	strb	r3, [r7, #13]
 800858a:	e001      	b.n	8008590 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800858c:	2302      	movs	r3, #2
 800858e:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8008590:	7b7b      	ldrb	r3, [r7, #13]
}
 8008592:	4618      	mov	r0, r3
 8008594:	3714      	adds	r7, #20
 8008596:	46bd      	mov	sp, r7
 8008598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800859c:	4770      	bx	lr
 800859e:	bf00      	nop
 80085a0:	2000855c 	.word	0x2000855c

080085a4 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 80085a4:	b480      	push	{r7}
 80085a6:	b085      	sub	sp, #20
 80085a8:	af00      	add	r7, sp, #0
 80085aa:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 80085ac:	2300      	movs	r3, #0
 80085ae:	60fb      	str	r3, [r7, #12]
 80085b0:	e010      	b.n	80085d4 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 80085b2:	4a0d      	ldr	r2, [pc, #52]	@ (80085e8 <clear_lock+0x44>)
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	011b      	lsls	r3, r3, #4
 80085b8:	4413      	add	r3, r2
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	687a      	ldr	r2, [r7, #4]
 80085be:	429a      	cmp	r2, r3
 80085c0:	d105      	bne.n	80085ce <clear_lock+0x2a>
 80085c2:	4a09      	ldr	r2, [pc, #36]	@ (80085e8 <clear_lock+0x44>)
 80085c4:	68fb      	ldr	r3, [r7, #12]
 80085c6:	011b      	lsls	r3, r3, #4
 80085c8:	4413      	add	r3, r2
 80085ca:	2200      	movs	r2, #0
 80085cc:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	3301      	adds	r3, #1
 80085d2:	60fb      	str	r3, [r7, #12]
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	2b01      	cmp	r3, #1
 80085d8:	d9eb      	bls.n	80085b2 <clear_lock+0xe>
	}
}
 80085da:	bf00      	nop
 80085dc:	bf00      	nop
 80085de:	3714      	adds	r7, #20
 80085e0:	46bd      	mov	sp, r7
 80085e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085e6:	4770      	bx	lr
 80085e8:	2000855c 	.word	0x2000855c

080085ec <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 80085ec:	b580      	push	{r7, lr}
 80085ee:	b086      	sub	sp, #24
 80085f0:	af00      	add	r7, sp, #0
 80085f2:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 80085f4:	2300      	movs	r3, #0
 80085f6:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	78db      	ldrb	r3, [r3, #3]
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	d034      	beq.n	800866a <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008604:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	7858      	ldrb	r0, [r3, #1]
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8008610:	2301      	movs	r3, #1
 8008612:	697a      	ldr	r2, [r7, #20]
 8008614:	f7ff fd40 	bl	8008098 <disk_write>
 8008618:	4603      	mov	r3, r0
 800861a:	2b00      	cmp	r3, #0
 800861c:	d002      	beq.n	8008624 <sync_window+0x38>
			res = FR_DISK_ERR;
 800861e:	2301      	movs	r3, #1
 8008620:	73fb      	strb	r3, [r7, #15]
 8008622:	e022      	b.n	800866a <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	2200      	movs	r2, #0
 8008628:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	6a1b      	ldr	r3, [r3, #32]
 800862e:	697a      	ldr	r2, [r7, #20]
 8008630:	1ad2      	subs	r2, r2, r3
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	699b      	ldr	r3, [r3, #24]
 8008636:	429a      	cmp	r2, r3
 8008638:	d217      	bcs.n	800866a <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	789b      	ldrb	r3, [r3, #2]
 800863e:	613b      	str	r3, [r7, #16]
 8008640:	e010      	b.n	8008664 <sync_window+0x78>
					wsect += fs->fsize;
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	699b      	ldr	r3, [r3, #24]
 8008646:	697a      	ldr	r2, [r7, #20]
 8008648:	4413      	add	r3, r2
 800864a:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	7858      	ldrb	r0, [r3, #1]
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8008656:	2301      	movs	r3, #1
 8008658:	697a      	ldr	r2, [r7, #20]
 800865a:	f7ff fd1d 	bl	8008098 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800865e:	693b      	ldr	r3, [r7, #16]
 8008660:	3b01      	subs	r3, #1
 8008662:	613b      	str	r3, [r7, #16]
 8008664:	693b      	ldr	r3, [r7, #16]
 8008666:	2b01      	cmp	r3, #1
 8008668:	d8eb      	bhi.n	8008642 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800866a:	7bfb      	ldrb	r3, [r7, #15]
}
 800866c:	4618      	mov	r0, r3
 800866e:	3718      	adds	r7, #24
 8008670:	46bd      	mov	sp, r7
 8008672:	bd80      	pop	{r7, pc}

08008674 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8008674:	b580      	push	{r7, lr}
 8008676:	b084      	sub	sp, #16
 8008678:	af00      	add	r7, sp, #0
 800867a:	6078      	str	r0, [r7, #4]
 800867c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800867e:	2300      	movs	r3, #0
 8008680:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008686:	683a      	ldr	r2, [r7, #0]
 8008688:	429a      	cmp	r2, r3
 800868a:	d01b      	beq.n	80086c4 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800868c:	6878      	ldr	r0, [r7, #4]
 800868e:	f7ff ffad 	bl	80085ec <sync_window>
 8008692:	4603      	mov	r3, r0
 8008694:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8008696:	7bfb      	ldrb	r3, [r7, #15]
 8008698:	2b00      	cmp	r3, #0
 800869a:	d113      	bne.n	80086c4 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	7858      	ldrb	r0, [r3, #1]
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80086a6:	2301      	movs	r3, #1
 80086a8:	683a      	ldr	r2, [r7, #0]
 80086aa:	f7ff fcd5 	bl	8008058 <disk_read>
 80086ae:	4603      	mov	r3, r0
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	d004      	beq.n	80086be <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 80086b4:	f04f 33ff 	mov.w	r3, #4294967295
 80086b8:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 80086ba:	2301      	movs	r3, #1
 80086bc:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	683a      	ldr	r2, [r7, #0]
 80086c2:	62da      	str	r2, [r3, #44]	@ 0x2c
		}
	}
	return res;
 80086c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80086c6:	4618      	mov	r0, r3
 80086c8:	3710      	adds	r7, #16
 80086ca:	46bd      	mov	sp, r7
 80086cc:	bd80      	pop	{r7, pc}
	...

080086d0 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 80086d0:	b580      	push	{r7, lr}
 80086d2:	b084      	sub	sp, #16
 80086d4:	af00      	add	r7, sp, #0
 80086d6:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 80086d8:	6878      	ldr	r0, [r7, #4]
 80086da:	f7ff ff87 	bl	80085ec <sync_window>
 80086de:	4603      	mov	r3, r0
 80086e0:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80086e2:	7bfb      	ldrb	r3, [r7, #15]
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	d158      	bne.n	800879a <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	781b      	ldrb	r3, [r3, #0]
 80086ec:	2b03      	cmp	r3, #3
 80086ee:	d148      	bne.n	8008782 <sync_fs+0xb2>
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	791b      	ldrb	r3, [r3, #4]
 80086f4:	2b01      	cmp	r3, #1
 80086f6:	d144      	bne.n	8008782 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	3330      	adds	r3, #48	@ 0x30
 80086fc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008700:	2100      	movs	r1, #0
 8008702:	4618      	mov	r0, r3
 8008704:	f7ff fda9 	bl	800825a <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	3330      	adds	r3, #48	@ 0x30
 800870c:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8008710:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 8008714:	4618      	mov	r0, r3
 8008716:	f7ff fd38 	bl	800818a <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	3330      	adds	r3, #48	@ 0x30
 800871e:	4921      	ldr	r1, [pc, #132]	@ (80087a4 <sync_fs+0xd4>)
 8008720:	4618      	mov	r0, r3
 8008722:	f7ff fd4d 	bl	80081c0 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	3330      	adds	r3, #48	@ 0x30
 800872a:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800872e:	491e      	ldr	r1, [pc, #120]	@ (80087a8 <sync_fs+0xd8>)
 8008730:	4618      	mov	r0, r3
 8008732:	f7ff fd45 	bl	80081c0 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	3330      	adds	r3, #48	@ 0x30
 800873a:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	691b      	ldr	r3, [r3, #16]
 8008742:	4619      	mov	r1, r3
 8008744:	4610      	mov	r0, r2
 8008746:	f7ff fd3b 	bl	80081c0 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	3330      	adds	r3, #48	@ 0x30
 800874e:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	68db      	ldr	r3, [r3, #12]
 8008756:	4619      	mov	r1, r3
 8008758:	4610      	mov	r0, r2
 800875a:	f7ff fd31 	bl	80081c0 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	69db      	ldr	r3, [r3, #28]
 8008762:	1c5a      	adds	r2, r3, #1
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	62da      	str	r2, [r3, #44]	@ 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	7858      	ldrb	r0, [r3, #1]
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008776:	2301      	movs	r3, #1
 8008778:	f7ff fc8e 	bl	8008098 <disk_write>
			fs->fsi_flag = 0;
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	2200      	movs	r2, #0
 8008780:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	785b      	ldrb	r3, [r3, #1]
 8008786:	2200      	movs	r2, #0
 8008788:	2100      	movs	r1, #0
 800878a:	4618      	mov	r0, r3
 800878c:	f7ff fca4 	bl	80080d8 <disk_ioctl>
 8008790:	4603      	mov	r3, r0
 8008792:	2b00      	cmp	r3, #0
 8008794:	d001      	beq.n	800879a <sync_fs+0xca>
 8008796:	2301      	movs	r3, #1
 8008798:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800879a:	7bfb      	ldrb	r3, [r7, #15]
}
 800879c:	4618      	mov	r0, r3
 800879e:	3710      	adds	r7, #16
 80087a0:	46bd      	mov	sp, r7
 80087a2:	bd80      	pop	{r7, pc}
 80087a4:	41615252 	.word	0x41615252
 80087a8:	61417272 	.word	0x61417272

080087ac <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 80087ac:	b480      	push	{r7}
 80087ae:	b083      	sub	sp, #12
 80087b0:	af00      	add	r7, sp, #0
 80087b2:	6078      	str	r0, [r7, #4]
 80087b4:	6039      	str	r1, [r7, #0]
	clst -= 2;
 80087b6:	683b      	ldr	r3, [r7, #0]
 80087b8:	3b02      	subs	r3, #2
 80087ba:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	695b      	ldr	r3, [r3, #20]
 80087c0:	3b02      	subs	r3, #2
 80087c2:	683a      	ldr	r2, [r7, #0]
 80087c4:	429a      	cmp	r2, r3
 80087c6:	d301      	bcc.n	80087cc <clust2sect+0x20>
 80087c8:	2300      	movs	r3, #0
 80087ca:	e008      	b.n	80087de <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	895b      	ldrh	r3, [r3, #10]
 80087d0:	461a      	mov	r2, r3
 80087d2:	683b      	ldr	r3, [r7, #0]
 80087d4:	fb03 f202 	mul.w	r2, r3, r2
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80087dc:	4413      	add	r3, r2
}
 80087de:	4618      	mov	r0, r3
 80087e0:	370c      	adds	r7, #12
 80087e2:	46bd      	mov	sp, r7
 80087e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087e8:	4770      	bx	lr

080087ea <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 80087ea:	b580      	push	{r7, lr}
 80087ec:	b086      	sub	sp, #24
 80087ee:	af00      	add	r7, sp, #0
 80087f0:	6078      	str	r0, [r7, #4]
 80087f2:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 80087fa:	683b      	ldr	r3, [r7, #0]
 80087fc:	2b01      	cmp	r3, #1
 80087fe:	d904      	bls.n	800880a <get_fat+0x20>
 8008800:	693b      	ldr	r3, [r7, #16]
 8008802:	695b      	ldr	r3, [r3, #20]
 8008804:	683a      	ldr	r2, [r7, #0]
 8008806:	429a      	cmp	r2, r3
 8008808:	d302      	bcc.n	8008810 <get_fat+0x26>
		val = 1;	/* Internal error */
 800880a:	2301      	movs	r3, #1
 800880c:	617b      	str	r3, [r7, #20]
 800880e:	e08e      	b.n	800892e <get_fat+0x144>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8008810:	f04f 33ff 	mov.w	r3, #4294967295
 8008814:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8008816:	693b      	ldr	r3, [r7, #16]
 8008818:	781b      	ldrb	r3, [r3, #0]
 800881a:	2b03      	cmp	r3, #3
 800881c:	d061      	beq.n	80088e2 <get_fat+0xf8>
 800881e:	2b03      	cmp	r3, #3
 8008820:	dc7b      	bgt.n	800891a <get_fat+0x130>
 8008822:	2b01      	cmp	r3, #1
 8008824:	d002      	beq.n	800882c <get_fat+0x42>
 8008826:	2b02      	cmp	r3, #2
 8008828:	d041      	beq.n	80088ae <get_fat+0xc4>
 800882a:	e076      	b.n	800891a <get_fat+0x130>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800882c:	683b      	ldr	r3, [r7, #0]
 800882e:	60fb      	str	r3, [r7, #12]
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	085b      	lsrs	r3, r3, #1
 8008834:	68fa      	ldr	r2, [r7, #12]
 8008836:	4413      	add	r3, r2
 8008838:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800883a:	693b      	ldr	r3, [r7, #16]
 800883c:	6a1a      	ldr	r2, [r3, #32]
 800883e:	68fb      	ldr	r3, [r7, #12]
 8008840:	0a5b      	lsrs	r3, r3, #9
 8008842:	4413      	add	r3, r2
 8008844:	4619      	mov	r1, r3
 8008846:	6938      	ldr	r0, [r7, #16]
 8008848:	f7ff ff14 	bl	8008674 <move_window>
 800884c:	4603      	mov	r3, r0
 800884e:	2b00      	cmp	r3, #0
 8008850:	d166      	bne.n	8008920 <get_fat+0x136>
			wc = fs->win[bc++ % SS(fs)];
 8008852:	68fb      	ldr	r3, [r7, #12]
 8008854:	1c5a      	adds	r2, r3, #1
 8008856:	60fa      	str	r2, [r7, #12]
 8008858:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800885c:	693a      	ldr	r2, [r7, #16]
 800885e:	4413      	add	r3, r2
 8008860:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8008864:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008866:	693b      	ldr	r3, [r7, #16]
 8008868:	6a1a      	ldr	r2, [r3, #32]
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	0a5b      	lsrs	r3, r3, #9
 800886e:	4413      	add	r3, r2
 8008870:	4619      	mov	r1, r3
 8008872:	6938      	ldr	r0, [r7, #16]
 8008874:	f7ff fefe 	bl	8008674 <move_window>
 8008878:	4603      	mov	r3, r0
 800887a:	2b00      	cmp	r3, #0
 800887c:	d152      	bne.n	8008924 <get_fat+0x13a>
			wc |= fs->win[bc % SS(fs)] << 8;
 800887e:	68fb      	ldr	r3, [r7, #12]
 8008880:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008884:	693a      	ldr	r2, [r7, #16]
 8008886:	4413      	add	r3, r2
 8008888:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800888c:	021b      	lsls	r3, r3, #8
 800888e:	68ba      	ldr	r2, [r7, #8]
 8008890:	4313      	orrs	r3, r2
 8008892:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8008894:	683b      	ldr	r3, [r7, #0]
 8008896:	f003 0301 	and.w	r3, r3, #1
 800889a:	2b00      	cmp	r3, #0
 800889c:	d002      	beq.n	80088a4 <get_fat+0xba>
 800889e:	68bb      	ldr	r3, [r7, #8]
 80088a0:	091b      	lsrs	r3, r3, #4
 80088a2:	e002      	b.n	80088aa <get_fat+0xc0>
 80088a4:	68bb      	ldr	r3, [r7, #8]
 80088a6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80088aa:	617b      	str	r3, [r7, #20]
			break;
 80088ac:	e03f      	b.n	800892e <get_fat+0x144>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80088ae:	693b      	ldr	r3, [r7, #16]
 80088b0:	6a1a      	ldr	r2, [r3, #32]
 80088b2:	683b      	ldr	r3, [r7, #0]
 80088b4:	0a1b      	lsrs	r3, r3, #8
 80088b6:	4413      	add	r3, r2
 80088b8:	4619      	mov	r1, r3
 80088ba:	6938      	ldr	r0, [r7, #16]
 80088bc:	f7ff feda 	bl	8008674 <move_window>
 80088c0:	4603      	mov	r3, r0
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	d130      	bne.n	8008928 <get_fat+0x13e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 80088c6:	693b      	ldr	r3, [r7, #16]
 80088c8:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80088cc:	683b      	ldr	r3, [r7, #0]
 80088ce:	005b      	lsls	r3, r3, #1
 80088d0:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 80088d4:	4413      	add	r3, r2
 80088d6:	4618      	mov	r0, r3
 80088d8:	f7ff fc1c 	bl	8008114 <ld_word>
 80088dc:	4603      	mov	r3, r0
 80088de:	617b      	str	r3, [r7, #20]
			break;
 80088e0:	e025      	b.n	800892e <get_fat+0x144>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80088e2:	693b      	ldr	r3, [r7, #16]
 80088e4:	6a1a      	ldr	r2, [r3, #32]
 80088e6:	683b      	ldr	r3, [r7, #0]
 80088e8:	09db      	lsrs	r3, r3, #7
 80088ea:	4413      	add	r3, r2
 80088ec:	4619      	mov	r1, r3
 80088ee:	6938      	ldr	r0, [r7, #16]
 80088f0:	f7ff fec0 	bl	8008674 <move_window>
 80088f4:	4603      	mov	r3, r0
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d118      	bne.n	800892c <get_fat+0x142>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 80088fa:	693b      	ldr	r3, [r7, #16]
 80088fc:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8008900:	683b      	ldr	r3, [r7, #0]
 8008902:	009b      	lsls	r3, r3, #2
 8008904:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8008908:	4413      	add	r3, r2
 800890a:	4618      	mov	r0, r3
 800890c:	f7ff fc1a 	bl	8008144 <ld_dword>
 8008910:	4603      	mov	r3, r0
 8008912:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8008916:	617b      	str	r3, [r7, #20]
			break;
 8008918:	e009      	b.n	800892e <get_fat+0x144>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800891a:	2301      	movs	r3, #1
 800891c:	617b      	str	r3, [r7, #20]
 800891e:	e006      	b.n	800892e <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008920:	bf00      	nop
 8008922:	e004      	b.n	800892e <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008924:	bf00      	nop
 8008926:	e002      	b.n	800892e <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8008928:	bf00      	nop
 800892a:	e000      	b.n	800892e <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800892c:	bf00      	nop
		}
	}

	return val;
 800892e:	697b      	ldr	r3, [r7, #20]
}
 8008930:	4618      	mov	r0, r3
 8008932:	3718      	adds	r7, #24
 8008934:	46bd      	mov	sp, r7
 8008936:	bd80      	pop	{r7, pc}

08008938 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8008938:	b590      	push	{r4, r7, lr}
 800893a:	b089      	sub	sp, #36	@ 0x24
 800893c:	af00      	add	r7, sp, #0
 800893e:	60f8      	str	r0, [r7, #12]
 8008940:	60b9      	str	r1, [r7, #8]
 8008942:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8008944:	2302      	movs	r3, #2
 8008946:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8008948:	68bb      	ldr	r3, [r7, #8]
 800894a:	2b01      	cmp	r3, #1
 800894c:	f240 80d9 	bls.w	8008b02 <put_fat+0x1ca>
 8008950:	68fb      	ldr	r3, [r7, #12]
 8008952:	695b      	ldr	r3, [r3, #20]
 8008954:	68ba      	ldr	r2, [r7, #8]
 8008956:	429a      	cmp	r2, r3
 8008958:	f080 80d3 	bcs.w	8008b02 <put_fat+0x1ca>
		switch (fs->fs_type) {
 800895c:	68fb      	ldr	r3, [r7, #12]
 800895e:	781b      	ldrb	r3, [r3, #0]
 8008960:	2b03      	cmp	r3, #3
 8008962:	f000 8096 	beq.w	8008a92 <put_fat+0x15a>
 8008966:	2b03      	cmp	r3, #3
 8008968:	f300 80cb 	bgt.w	8008b02 <put_fat+0x1ca>
 800896c:	2b01      	cmp	r3, #1
 800896e:	d002      	beq.n	8008976 <put_fat+0x3e>
 8008970:	2b02      	cmp	r3, #2
 8008972:	d06e      	beq.n	8008a52 <put_fat+0x11a>
 8008974:	e0c5      	b.n	8008b02 <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8008976:	68bb      	ldr	r3, [r7, #8]
 8008978:	61bb      	str	r3, [r7, #24]
 800897a:	69bb      	ldr	r3, [r7, #24]
 800897c:	085b      	lsrs	r3, r3, #1
 800897e:	69ba      	ldr	r2, [r7, #24]
 8008980:	4413      	add	r3, r2
 8008982:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8008984:	68fb      	ldr	r3, [r7, #12]
 8008986:	6a1a      	ldr	r2, [r3, #32]
 8008988:	69bb      	ldr	r3, [r7, #24]
 800898a:	0a5b      	lsrs	r3, r3, #9
 800898c:	4413      	add	r3, r2
 800898e:	4619      	mov	r1, r3
 8008990:	68f8      	ldr	r0, [r7, #12]
 8008992:	f7ff fe6f 	bl	8008674 <move_window>
 8008996:	4603      	mov	r3, r0
 8008998:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800899a:	7ffb      	ldrb	r3, [r7, #31]
 800899c:	2b00      	cmp	r3, #0
 800899e:	f040 80a9 	bne.w	8008af4 <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 80089a2:	68fb      	ldr	r3, [r7, #12]
 80089a4:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80089a8:	69bb      	ldr	r3, [r7, #24]
 80089aa:	1c59      	adds	r1, r3, #1
 80089ac:	61b9      	str	r1, [r7, #24]
 80089ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80089b2:	4413      	add	r3, r2
 80089b4:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 80089b6:	68bb      	ldr	r3, [r7, #8]
 80089b8:	f003 0301 	and.w	r3, r3, #1
 80089bc:	2b00      	cmp	r3, #0
 80089be:	d00d      	beq.n	80089dc <put_fat+0xa4>
 80089c0:	697b      	ldr	r3, [r7, #20]
 80089c2:	781b      	ldrb	r3, [r3, #0]
 80089c4:	b25b      	sxtb	r3, r3
 80089c6:	f003 030f 	and.w	r3, r3, #15
 80089ca:	b25a      	sxtb	r2, r3
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	b2db      	uxtb	r3, r3
 80089d0:	011b      	lsls	r3, r3, #4
 80089d2:	b25b      	sxtb	r3, r3
 80089d4:	4313      	orrs	r3, r2
 80089d6:	b25b      	sxtb	r3, r3
 80089d8:	b2db      	uxtb	r3, r3
 80089da:	e001      	b.n	80089e0 <put_fat+0xa8>
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	b2db      	uxtb	r3, r3
 80089e0:	697a      	ldr	r2, [r7, #20]
 80089e2:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	2201      	movs	r2, #1
 80089e8:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	6a1a      	ldr	r2, [r3, #32]
 80089ee:	69bb      	ldr	r3, [r7, #24]
 80089f0:	0a5b      	lsrs	r3, r3, #9
 80089f2:	4413      	add	r3, r2
 80089f4:	4619      	mov	r1, r3
 80089f6:	68f8      	ldr	r0, [r7, #12]
 80089f8:	f7ff fe3c 	bl	8008674 <move_window>
 80089fc:	4603      	mov	r3, r0
 80089fe:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8008a00:	7ffb      	ldrb	r3, [r7, #31]
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	d178      	bne.n	8008af8 <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 8008a06:	68fb      	ldr	r3, [r7, #12]
 8008a08:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8008a0c:	69bb      	ldr	r3, [r7, #24]
 8008a0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008a12:	4413      	add	r3, r2
 8008a14:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8008a16:	68bb      	ldr	r3, [r7, #8]
 8008a18:	f003 0301 	and.w	r3, r3, #1
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	d003      	beq.n	8008a28 <put_fat+0xf0>
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	091b      	lsrs	r3, r3, #4
 8008a24:	b2db      	uxtb	r3, r3
 8008a26:	e00e      	b.n	8008a46 <put_fat+0x10e>
 8008a28:	697b      	ldr	r3, [r7, #20]
 8008a2a:	781b      	ldrb	r3, [r3, #0]
 8008a2c:	b25b      	sxtb	r3, r3
 8008a2e:	f023 030f 	bic.w	r3, r3, #15
 8008a32:	b25a      	sxtb	r2, r3
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	0a1b      	lsrs	r3, r3, #8
 8008a38:	b25b      	sxtb	r3, r3
 8008a3a:	f003 030f 	and.w	r3, r3, #15
 8008a3e:	b25b      	sxtb	r3, r3
 8008a40:	4313      	orrs	r3, r2
 8008a42:	b25b      	sxtb	r3, r3
 8008a44:	b2db      	uxtb	r3, r3
 8008a46:	697a      	ldr	r2, [r7, #20]
 8008a48:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8008a4a:	68fb      	ldr	r3, [r7, #12]
 8008a4c:	2201      	movs	r2, #1
 8008a4e:	70da      	strb	r2, [r3, #3]
			break;
 8008a50:	e057      	b.n	8008b02 <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	6a1a      	ldr	r2, [r3, #32]
 8008a56:	68bb      	ldr	r3, [r7, #8]
 8008a58:	0a1b      	lsrs	r3, r3, #8
 8008a5a:	4413      	add	r3, r2
 8008a5c:	4619      	mov	r1, r3
 8008a5e:	68f8      	ldr	r0, [r7, #12]
 8008a60:	f7ff fe08 	bl	8008674 <move_window>
 8008a64:	4603      	mov	r3, r0
 8008a66:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8008a68:	7ffb      	ldrb	r3, [r7, #31]
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	d146      	bne.n	8008afc <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8008a6e:	68fb      	ldr	r3, [r7, #12]
 8008a70:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8008a74:	68bb      	ldr	r3, [r7, #8]
 8008a76:	005b      	lsls	r3, r3, #1
 8008a78:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 8008a7c:	4413      	add	r3, r2
 8008a7e:	687a      	ldr	r2, [r7, #4]
 8008a80:	b292      	uxth	r2, r2
 8008a82:	4611      	mov	r1, r2
 8008a84:	4618      	mov	r0, r3
 8008a86:	f7ff fb80 	bl	800818a <st_word>
			fs->wflag = 1;
 8008a8a:	68fb      	ldr	r3, [r7, #12]
 8008a8c:	2201      	movs	r2, #1
 8008a8e:	70da      	strb	r2, [r3, #3]
			break;
 8008a90:	e037      	b.n	8008b02 <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8008a92:	68fb      	ldr	r3, [r7, #12]
 8008a94:	6a1a      	ldr	r2, [r3, #32]
 8008a96:	68bb      	ldr	r3, [r7, #8]
 8008a98:	09db      	lsrs	r3, r3, #7
 8008a9a:	4413      	add	r3, r2
 8008a9c:	4619      	mov	r1, r3
 8008a9e:	68f8      	ldr	r0, [r7, #12]
 8008aa0:	f7ff fde8 	bl	8008674 <move_window>
 8008aa4:	4603      	mov	r3, r0
 8008aa6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8008aa8:	7ffb      	ldrb	r3, [r7, #31]
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	d128      	bne.n	8008b00 <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8008aba:	68bb      	ldr	r3, [r7, #8]
 8008abc:	009b      	lsls	r3, r3, #2
 8008abe:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8008ac2:	4413      	add	r3, r2
 8008ac4:	4618      	mov	r0, r3
 8008ac6:	f7ff fb3d 	bl	8008144 <ld_dword>
 8008aca:	4603      	mov	r3, r0
 8008acc:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8008ad0:	4323      	orrs	r3, r4
 8008ad2:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8008ad4:	68fb      	ldr	r3, [r7, #12]
 8008ad6:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8008ada:	68bb      	ldr	r3, [r7, #8]
 8008adc:	009b      	lsls	r3, r3, #2
 8008ade:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8008ae2:	4413      	add	r3, r2
 8008ae4:	6879      	ldr	r1, [r7, #4]
 8008ae6:	4618      	mov	r0, r3
 8008ae8:	f7ff fb6a 	bl	80081c0 <st_dword>
			fs->wflag = 1;
 8008aec:	68fb      	ldr	r3, [r7, #12]
 8008aee:	2201      	movs	r2, #1
 8008af0:	70da      	strb	r2, [r3, #3]
			break;
 8008af2:	e006      	b.n	8008b02 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8008af4:	bf00      	nop
 8008af6:	e004      	b.n	8008b02 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8008af8:	bf00      	nop
 8008afa:	e002      	b.n	8008b02 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8008afc:	bf00      	nop
 8008afe:	e000      	b.n	8008b02 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8008b00:	bf00      	nop
		}
	}
	return res;
 8008b02:	7ffb      	ldrb	r3, [r7, #31]
}
 8008b04:	4618      	mov	r0, r3
 8008b06:	3724      	adds	r7, #36	@ 0x24
 8008b08:	46bd      	mov	sp, r7
 8008b0a:	bd90      	pop	{r4, r7, pc}

08008b0c <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8008b0c:	b580      	push	{r7, lr}
 8008b0e:	b088      	sub	sp, #32
 8008b10:	af00      	add	r7, sp, #0
 8008b12:	60f8      	str	r0, [r7, #12]
 8008b14:	60b9      	str	r1, [r7, #8]
 8008b16:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8008b18:	2300      	movs	r3, #0
 8008b1a:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8008b1c:	68fb      	ldr	r3, [r7, #12]
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8008b22:	68bb      	ldr	r3, [r7, #8]
 8008b24:	2b01      	cmp	r3, #1
 8008b26:	d904      	bls.n	8008b32 <remove_chain+0x26>
 8008b28:	69bb      	ldr	r3, [r7, #24]
 8008b2a:	695b      	ldr	r3, [r3, #20]
 8008b2c:	68ba      	ldr	r2, [r7, #8]
 8008b2e:	429a      	cmp	r2, r3
 8008b30:	d301      	bcc.n	8008b36 <remove_chain+0x2a>
 8008b32:	2302      	movs	r3, #2
 8008b34:	e04b      	b.n	8008bce <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	2b00      	cmp	r3, #0
 8008b3a:	d00c      	beq.n	8008b56 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8008b3c:	f04f 32ff 	mov.w	r2, #4294967295
 8008b40:	6879      	ldr	r1, [r7, #4]
 8008b42:	69b8      	ldr	r0, [r7, #24]
 8008b44:	f7ff fef8 	bl	8008938 <put_fat>
 8008b48:	4603      	mov	r3, r0
 8008b4a:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8008b4c:	7ffb      	ldrb	r3, [r7, #31]
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	d001      	beq.n	8008b56 <remove_chain+0x4a>
 8008b52:	7ffb      	ldrb	r3, [r7, #31]
 8008b54:	e03b      	b.n	8008bce <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8008b56:	68b9      	ldr	r1, [r7, #8]
 8008b58:	68f8      	ldr	r0, [r7, #12]
 8008b5a:	f7ff fe46 	bl	80087ea <get_fat>
 8008b5e:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8008b60:	697b      	ldr	r3, [r7, #20]
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	d031      	beq.n	8008bca <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8008b66:	697b      	ldr	r3, [r7, #20]
 8008b68:	2b01      	cmp	r3, #1
 8008b6a:	d101      	bne.n	8008b70 <remove_chain+0x64>
 8008b6c:	2302      	movs	r3, #2
 8008b6e:	e02e      	b.n	8008bce <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8008b70:	697b      	ldr	r3, [r7, #20]
 8008b72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b76:	d101      	bne.n	8008b7c <remove_chain+0x70>
 8008b78:	2301      	movs	r3, #1
 8008b7a:	e028      	b.n	8008bce <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8008b7c:	2200      	movs	r2, #0
 8008b7e:	68b9      	ldr	r1, [r7, #8]
 8008b80:	69b8      	ldr	r0, [r7, #24]
 8008b82:	f7ff fed9 	bl	8008938 <put_fat>
 8008b86:	4603      	mov	r3, r0
 8008b88:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8008b8a:	7ffb      	ldrb	r3, [r7, #31]
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	d001      	beq.n	8008b94 <remove_chain+0x88>
 8008b90:	7ffb      	ldrb	r3, [r7, #31]
 8008b92:	e01c      	b.n	8008bce <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8008b94:	69bb      	ldr	r3, [r7, #24]
 8008b96:	691a      	ldr	r2, [r3, #16]
 8008b98:	69bb      	ldr	r3, [r7, #24]
 8008b9a:	695b      	ldr	r3, [r3, #20]
 8008b9c:	3b02      	subs	r3, #2
 8008b9e:	429a      	cmp	r2, r3
 8008ba0:	d20b      	bcs.n	8008bba <remove_chain+0xae>
			fs->free_clst++;
 8008ba2:	69bb      	ldr	r3, [r7, #24]
 8008ba4:	691b      	ldr	r3, [r3, #16]
 8008ba6:	1c5a      	adds	r2, r3, #1
 8008ba8:	69bb      	ldr	r3, [r7, #24]
 8008baa:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 8008bac:	69bb      	ldr	r3, [r7, #24]
 8008bae:	791b      	ldrb	r3, [r3, #4]
 8008bb0:	f043 0301 	orr.w	r3, r3, #1
 8008bb4:	b2da      	uxtb	r2, r3
 8008bb6:	69bb      	ldr	r3, [r7, #24]
 8008bb8:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8008bba:	697b      	ldr	r3, [r7, #20]
 8008bbc:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8008bbe:	69bb      	ldr	r3, [r7, #24]
 8008bc0:	695b      	ldr	r3, [r3, #20]
 8008bc2:	68ba      	ldr	r2, [r7, #8]
 8008bc4:	429a      	cmp	r2, r3
 8008bc6:	d3c6      	bcc.n	8008b56 <remove_chain+0x4a>
 8008bc8:	e000      	b.n	8008bcc <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8008bca:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8008bcc:	2300      	movs	r3, #0
}
 8008bce:	4618      	mov	r0, r3
 8008bd0:	3720      	adds	r7, #32
 8008bd2:	46bd      	mov	sp, r7
 8008bd4:	bd80      	pop	{r7, pc}

08008bd6 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8008bd6:	b580      	push	{r7, lr}
 8008bd8:	b088      	sub	sp, #32
 8008bda:	af00      	add	r7, sp, #0
 8008bdc:	6078      	str	r0, [r7, #4]
 8008bde:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8008be6:	683b      	ldr	r3, [r7, #0]
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	d10d      	bne.n	8008c08 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8008bec:	693b      	ldr	r3, [r7, #16]
 8008bee:	68db      	ldr	r3, [r3, #12]
 8008bf0:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8008bf2:	69bb      	ldr	r3, [r7, #24]
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	d004      	beq.n	8008c02 <create_chain+0x2c>
 8008bf8:	693b      	ldr	r3, [r7, #16]
 8008bfa:	695b      	ldr	r3, [r3, #20]
 8008bfc:	69ba      	ldr	r2, [r7, #24]
 8008bfe:	429a      	cmp	r2, r3
 8008c00:	d31b      	bcc.n	8008c3a <create_chain+0x64>
 8008c02:	2301      	movs	r3, #1
 8008c04:	61bb      	str	r3, [r7, #24]
 8008c06:	e018      	b.n	8008c3a <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8008c08:	6839      	ldr	r1, [r7, #0]
 8008c0a:	6878      	ldr	r0, [r7, #4]
 8008c0c:	f7ff fded 	bl	80087ea <get_fat>
 8008c10:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8008c12:	68fb      	ldr	r3, [r7, #12]
 8008c14:	2b01      	cmp	r3, #1
 8008c16:	d801      	bhi.n	8008c1c <create_chain+0x46>
 8008c18:	2301      	movs	r3, #1
 8008c1a:	e070      	b.n	8008cfe <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8008c1c:	68fb      	ldr	r3, [r7, #12]
 8008c1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c22:	d101      	bne.n	8008c28 <create_chain+0x52>
 8008c24:	68fb      	ldr	r3, [r7, #12]
 8008c26:	e06a      	b.n	8008cfe <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8008c28:	693b      	ldr	r3, [r7, #16]
 8008c2a:	695b      	ldr	r3, [r3, #20]
 8008c2c:	68fa      	ldr	r2, [r7, #12]
 8008c2e:	429a      	cmp	r2, r3
 8008c30:	d201      	bcs.n	8008c36 <create_chain+0x60>
 8008c32:	68fb      	ldr	r3, [r7, #12]
 8008c34:	e063      	b.n	8008cfe <create_chain+0x128>
		scl = clst;
 8008c36:	683b      	ldr	r3, [r7, #0]
 8008c38:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8008c3a:	69bb      	ldr	r3, [r7, #24]
 8008c3c:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8008c3e:	69fb      	ldr	r3, [r7, #28]
 8008c40:	3301      	adds	r3, #1
 8008c42:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8008c44:	693b      	ldr	r3, [r7, #16]
 8008c46:	695b      	ldr	r3, [r3, #20]
 8008c48:	69fa      	ldr	r2, [r7, #28]
 8008c4a:	429a      	cmp	r2, r3
 8008c4c:	d307      	bcc.n	8008c5e <create_chain+0x88>
				ncl = 2;
 8008c4e:	2302      	movs	r3, #2
 8008c50:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8008c52:	69fa      	ldr	r2, [r7, #28]
 8008c54:	69bb      	ldr	r3, [r7, #24]
 8008c56:	429a      	cmp	r2, r3
 8008c58:	d901      	bls.n	8008c5e <create_chain+0x88>
 8008c5a:	2300      	movs	r3, #0
 8008c5c:	e04f      	b.n	8008cfe <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8008c5e:	69f9      	ldr	r1, [r7, #28]
 8008c60:	6878      	ldr	r0, [r7, #4]
 8008c62:	f7ff fdc2 	bl	80087ea <get_fat>
 8008c66:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	d00e      	beq.n	8008c8c <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8008c6e:	68fb      	ldr	r3, [r7, #12]
 8008c70:	2b01      	cmp	r3, #1
 8008c72:	d003      	beq.n	8008c7c <create_chain+0xa6>
 8008c74:	68fb      	ldr	r3, [r7, #12]
 8008c76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c7a:	d101      	bne.n	8008c80 <create_chain+0xaa>
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	e03e      	b.n	8008cfe <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8008c80:	69fa      	ldr	r2, [r7, #28]
 8008c82:	69bb      	ldr	r3, [r7, #24]
 8008c84:	429a      	cmp	r2, r3
 8008c86:	d1da      	bne.n	8008c3e <create_chain+0x68>
 8008c88:	2300      	movs	r3, #0
 8008c8a:	e038      	b.n	8008cfe <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8008c8c:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8008c8e:	f04f 32ff 	mov.w	r2, #4294967295
 8008c92:	69f9      	ldr	r1, [r7, #28]
 8008c94:	6938      	ldr	r0, [r7, #16]
 8008c96:	f7ff fe4f 	bl	8008938 <put_fat>
 8008c9a:	4603      	mov	r3, r0
 8008c9c:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8008c9e:	7dfb      	ldrb	r3, [r7, #23]
 8008ca0:	2b00      	cmp	r3, #0
 8008ca2:	d109      	bne.n	8008cb8 <create_chain+0xe2>
 8008ca4:	683b      	ldr	r3, [r7, #0]
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	d006      	beq.n	8008cb8 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8008caa:	69fa      	ldr	r2, [r7, #28]
 8008cac:	6839      	ldr	r1, [r7, #0]
 8008cae:	6938      	ldr	r0, [r7, #16]
 8008cb0:	f7ff fe42 	bl	8008938 <put_fat>
 8008cb4:	4603      	mov	r3, r0
 8008cb6:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8008cb8:	7dfb      	ldrb	r3, [r7, #23]
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	d116      	bne.n	8008cec <create_chain+0x116>
		fs->last_clst = ncl;
 8008cbe:	693b      	ldr	r3, [r7, #16]
 8008cc0:	69fa      	ldr	r2, [r7, #28]
 8008cc2:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8008cc4:	693b      	ldr	r3, [r7, #16]
 8008cc6:	691a      	ldr	r2, [r3, #16]
 8008cc8:	693b      	ldr	r3, [r7, #16]
 8008cca:	695b      	ldr	r3, [r3, #20]
 8008ccc:	3b02      	subs	r3, #2
 8008cce:	429a      	cmp	r2, r3
 8008cd0:	d804      	bhi.n	8008cdc <create_chain+0x106>
 8008cd2:	693b      	ldr	r3, [r7, #16]
 8008cd4:	691b      	ldr	r3, [r3, #16]
 8008cd6:	1e5a      	subs	r2, r3, #1
 8008cd8:	693b      	ldr	r3, [r7, #16]
 8008cda:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 8008cdc:	693b      	ldr	r3, [r7, #16]
 8008cde:	791b      	ldrb	r3, [r3, #4]
 8008ce0:	f043 0301 	orr.w	r3, r3, #1
 8008ce4:	b2da      	uxtb	r2, r3
 8008ce6:	693b      	ldr	r3, [r7, #16]
 8008ce8:	711a      	strb	r2, [r3, #4]
 8008cea:	e007      	b.n	8008cfc <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8008cec:	7dfb      	ldrb	r3, [r7, #23]
 8008cee:	2b01      	cmp	r3, #1
 8008cf0:	d102      	bne.n	8008cf8 <create_chain+0x122>
 8008cf2:	f04f 33ff 	mov.w	r3, #4294967295
 8008cf6:	e000      	b.n	8008cfa <create_chain+0x124>
 8008cf8:	2301      	movs	r3, #1
 8008cfa:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8008cfc:	69fb      	ldr	r3, [r7, #28]
}
 8008cfe:	4618      	mov	r0, r3
 8008d00:	3720      	adds	r7, #32
 8008d02:	46bd      	mov	sp, r7
 8008d04:	bd80      	pop	{r7, pc}

08008d06 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8008d06:	b480      	push	{r7}
 8008d08:	b087      	sub	sp, #28
 8008d0a:	af00      	add	r7, sp, #0
 8008d0c:	6078      	str	r0, [r7, #4]
 8008d0e:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d1a:	3304      	adds	r3, #4
 8008d1c:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8008d1e:	683b      	ldr	r3, [r7, #0]
 8008d20:	0a5b      	lsrs	r3, r3, #9
 8008d22:	68fa      	ldr	r2, [r7, #12]
 8008d24:	8952      	ldrh	r2, [r2, #10]
 8008d26:	fbb3 f3f2 	udiv	r3, r3, r2
 8008d2a:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8008d2c:	693b      	ldr	r3, [r7, #16]
 8008d2e:	1d1a      	adds	r2, r3, #4
 8008d30:	613a      	str	r2, [r7, #16]
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8008d36:	68bb      	ldr	r3, [r7, #8]
 8008d38:	2b00      	cmp	r3, #0
 8008d3a:	d101      	bne.n	8008d40 <clmt_clust+0x3a>
 8008d3c:	2300      	movs	r3, #0
 8008d3e:	e010      	b.n	8008d62 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 8008d40:	697a      	ldr	r2, [r7, #20]
 8008d42:	68bb      	ldr	r3, [r7, #8]
 8008d44:	429a      	cmp	r2, r3
 8008d46:	d307      	bcc.n	8008d58 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 8008d48:	697a      	ldr	r2, [r7, #20]
 8008d4a:	68bb      	ldr	r3, [r7, #8]
 8008d4c:	1ad3      	subs	r3, r2, r3
 8008d4e:	617b      	str	r3, [r7, #20]
 8008d50:	693b      	ldr	r3, [r7, #16]
 8008d52:	3304      	adds	r3, #4
 8008d54:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8008d56:	e7e9      	b.n	8008d2c <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 8008d58:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8008d5a:	693b      	ldr	r3, [r7, #16]
 8008d5c:	681a      	ldr	r2, [r3, #0]
 8008d5e:	697b      	ldr	r3, [r7, #20]
 8008d60:	4413      	add	r3, r2
}
 8008d62:	4618      	mov	r0, r3
 8008d64:	371c      	adds	r7, #28
 8008d66:	46bd      	mov	sp, r7
 8008d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d6c:	4770      	bx	lr

08008d6e <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8008d6e:	b580      	push	{r7, lr}
 8008d70:	b086      	sub	sp, #24
 8008d72:	af00      	add	r7, sp, #0
 8008d74:	6078      	str	r0, [r7, #4]
 8008d76:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8008d7e:	683b      	ldr	r3, [r7, #0]
 8008d80:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008d84:	d204      	bcs.n	8008d90 <dir_sdi+0x22>
 8008d86:	683b      	ldr	r3, [r7, #0]
 8008d88:	f003 031f 	and.w	r3, r3, #31
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	d001      	beq.n	8008d94 <dir_sdi+0x26>
		return FR_INT_ERR;
 8008d90:	2302      	movs	r3, #2
 8008d92:	e063      	b.n	8008e5c <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	683a      	ldr	r2, [r7, #0]
 8008d98:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	689b      	ldr	r3, [r3, #8]
 8008d9e:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8008da0:	697b      	ldr	r3, [r7, #20]
 8008da2:	2b00      	cmp	r3, #0
 8008da4:	d106      	bne.n	8008db4 <dir_sdi+0x46>
 8008da6:	693b      	ldr	r3, [r7, #16]
 8008da8:	781b      	ldrb	r3, [r3, #0]
 8008daa:	2b02      	cmp	r3, #2
 8008dac:	d902      	bls.n	8008db4 <dir_sdi+0x46>
		clst = fs->dirbase;
 8008dae:	693b      	ldr	r3, [r7, #16]
 8008db0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008db2:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8008db4:	697b      	ldr	r3, [r7, #20]
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	d10c      	bne.n	8008dd4 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8008dba:	683b      	ldr	r3, [r7, #0]
 8008dbc:	095b      	lsrs	r3, r3, #5
 8008dbe:	693a      	ldr	r2, [r7, #16]
 8008dc0:	8912      	ldrh	r2, [r2, #8]
 8008dc2:	4293      	cmp	r3, r2
 8008dc4:	d301      	bcc.n	8008dca <dir_sdi+0x5c>
 8008dc6:	2302      	movs	r3, #2
 8008dc8:	e048      	b.n	8008e5c <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8008dca:	693b      	ldr	r3, [r7, #16]
 8008dcc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	61da      	str	r2, [r3, #28]
 8008dd2:	e029      	b.n	8008e28 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8008dd4:	693b      	ldr	r3, [r7, #16]
 8008dd6:	895b      	ldrh	r3, [r3, #10]
 8008dd8:	025b      	lsls	r3, r3, #9
 8008dda:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8008ddc:	e019      	b.n	8008e12 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	6979      	ldr	r1, [r7, #20]
 8008de2:	4618      	mov	r0, r3
 8008de4:	f7ff fd01 	bl	80087ea <get_fat>
 8008de8:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8008dea:	697b      	ldr	r3, [r7, #20]
 8008dec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008df0:	d101      	bne.n	8008df6 <dir_sdi+0x88>
 8008df2:	2301      	movs	r3, #1
 8008df4:	e032      	b.n	8008e5c <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8008df6:	697b      	ldr	r3, [r7, #20]
 8008df8:	2b01      	cmp	r3, #1
 8008dfa:	d904      	bls.n	8008e06 <dir_sdi+0x98>
 8008dfc:	693b      	ldr	r3, [r7, #16]
 8008dfe:	695b      	ldr	r3, [r3, #20]
 8008e00:	697a      	ldr	r2, [r7, #20]
 8008e02:	429a      	cmp	r2, r3
 8008e04:	d301      	bcc.n	8008e0a <dir_sdi+0x9c>
 8008e06:	2302      	movs	r3, #2
 8008e08:	e028      	b.n	8008e5c <dir_sdi+0xee>
			ofs -= csz;
 8008e0a:	683a      	ldr	r2, [r7, #0]
 8008e0c:	68fb      	ldr	r3, [r7, #12]
 8008e0e:	1ad3      	subs	r3, r2, r3
 8008e10:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8008e12:	683a      	ldr	r2, [r7, #0]
 8008e14:	68fb      	ldr	r3, [r7, #12]
 8008e16:	429a      	cmp	r2, r3
 8008e18:	d2e1      	bcs.n	8008dde <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8008e1a:	6979      	ldr	r1, [r7, #20]
 8008e1c:	6938      	ldr	r0, [r7, #16]
 8008e1e:	f7ff fcc5 	bl	80087ac <clust2sect>
 8008e22:	4602      	mov	r2, r0
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	697a      	ldr	r2, [r7, #20]
 8008e2c:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	69db      	ldr	r3, [r3, #28]
 8008e32:	2b00      	cmp	r3, #0
 8008e34:	d101      	bne.n	8008e3a <dir_sdi+0xcc>
 8008e36:	2302      	movs	r3, #2
 8008e38:	e010      	b.n	8008e5c <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	69da      	ldr	r2, [r3, #28]
 8008e3e:	683b      	ldr	r3, [r7, #0]
 8008e40:	0a5b      	lsrs	r3, r3, #9
 8008e42:	441a      	add	r2, r3
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8008e48:	693b      	ldr	r3, [r7, #16]
 8008e4a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8008e4e:	683b      	ldr	r3, [r7, #0]
 8008e50:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008e54:	441a      	add	r2, r3
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8008e5a:	2300      	movs	r3, #0
}
 8008e5c:	4618      	mov	r0, r3
 8008e5e:	3718      	adds	r7, #24
 8008e60:	46bd      	mov	sp, r7
 8008e62:	bd80      	pop	{r7, pc}

08008e64 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8008e64:	b580      	push	{r7, lr}
 8008e66:	b086      	sub	sp, #24
 8008e68:	af00      	add	r7, sp, #0
 8008e6a:	6078      	str	r0, [r7, #4]
 8008e6c:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	695b      	ldr	r3, [r3, #20]
 8008e78:	3320      	adds	r3, #32
 8008e7a:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	69db      	ldr	r3, [r3, #28]
 8008e80:	2b00      	cmp	r3, #0
 8008e82:	d003      	beq.n	8008e8c <dir_next+0x28>
 8008e84:	68bb      	ldr	r3, [r7, #8]
 8008e86:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008e8a:	d301      	bcc.n	8008e90 <dir_next+0x2c>
 8008e8c:	2304      	movs	r3, #4
 8008e8e:	e0aa      	b.n	8008fe6 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8008e90:	68bb      	ldr	r3, [r7, #8]
 8008e92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	f040 8098 	bne.w	8008fcc <dir_next+0x168>
		dp->sect++;				/* Next sector */
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	69db      	ldr	r3, [r3, #28]
 8008ea0:	1c5a      	adds	r2, r3, #1
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	699b      	ldr	r3, [r3, #24]
 8008eaa:	2b00      	cmp	r3, #0
 8008eac:	d10b      	bne.n	8008ec6 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8008eae:	68bb      	ldr	r3, [r7, #8]
 8008eb0:	095b      	lsrs	r3, r3, #5
 8008eb2:	68fa      	ldr	r2, [r7, #12]
 8008eb4:	8912      	ldrh	r2, [r2, #8]
 8008eb6:	4293      	cmp	r3, r2
 8008eb8:	f0c0 8088 	bcc.w	8008fcc <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	2200      	movs	r2, #0
 8008ec0:	61da      	str	r2, [r3, #28]
 8008ec2:	2304      	movs	r3, #4
 8008ec4:	e08f      	b.n	8008fe6 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8008ec6:	68bb      	ldr	r3, [r7, #8]
 8008ec8:	0a5b      	lsrs	r3, r3, #9
 8008eca:	68fa      	ldr	r2, [r7, #12]
 8008ecc:	8952      	ldrh	r2, [r2, #10]
 8008ece:	3a01      	subs	r2, #1
 8008ed0:	4013      	ands	r3, r2
 8008ed2:	2b00      	cmp	r3, #0
 8008ed4:	d17a      	bne.n	8008fcc <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8008ed6:	687a      	ldr	r2, [r7, #4]
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	699b      	ldr	r3, [r3, #24]
 8008edc:	4619      	mov	r1, r3
 8008ede:	4610      	mov	r0, r2
 8008ee0:	f7ff fc83 	bl	80087ea <get_fat>
 8008ee4:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8008ee6:	697b      	ldr	r3, [r7, #20]
 8008ee8:	2b01      	cmp	r3, #1
 8008eea:	d801      	bhi.n	8008ef0 <dir_next+0x8c>
 8008eec:	2302      	movs	r3, #2
 8008eee:	e07a      	b.n	8008fe6 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8008ef0:	697b      	ldr	r3, [r7, #20]
 8008ef2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ef6:	d101      	bne.n	8008efc <dir_next+0x98>
 8008ef8:	2301      	movs	r3, #1
 8008efa:	e074      	b.n	8008fe6 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	695b      	ldr	r3, [r3, #20]
 8008f00:	697a      	ldr	r2, [r7, #20]
 8008f02:	429a      	cmp	r2, r3
 8008f04:	d358      	bcc.n	8008fb8 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8008f06:	683b      	ldr	r3, [r7, #0]
 8008f08:	2b00      	cmp	r3, #0
 8008f0a:	d104      	bne.n	8008f16 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	2200      	movs	r2, #0
 8008f10:	61da      	str	r2, [r3, #28]
 8008f12:	2304      	movs	r3, #4
 8008f14:	e067      	b.n	8008fe6 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8008f16:	687a      	ldr	r2, [r7, #4]
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	699b      	ldr	r3, [r3, #24]
 8008f1c:	4619      	mov	r1, r3
 8008f1e:	4610      	mov	r0, r2
 8008f20:	f7ff fe59 	bl	8008bd6 <create_chain>
 8008f24:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8008f26:	697b      	ldr	r3, [r7, #20]
 8008f28:	2b00      	cmp	r3, #0
 8008f2a:	d101      	bne.n	8008f30 <dir_next+0xcc>
 8008f2c:	2307      	movs	r3, #7
 8008f2e:	e05a      	b.n	8008fe6 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8008f30:	697b      	ldr	r3, [r7, #20]
 8008f32:	2b01      	cmp	r3, #1
 8008f34:	d101      	bne.n	8008f3a <dir_next+0xd6>
 8008f36:	2302      	movs	r3, #2
 8008f38:	e055      	b.n	8008fe6 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8008f3a:	697b      	ldr	r3, [r7, #20]
 8008f3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f40:	d101      	bne.n	8008f46 <dir_next+0xe2>
 8008f42:	2301      	movs	r3, #1
 8008f44:	e04f      	b.n	8008fe6 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8008f46:	68f8      	ldr	r0, [r7, #12]
 8008f48:	f7ff fb50 	bl	80085ec <sync_window>
 8008f4c:	4603      	mov	r3, r0
 8008f4e:	2b00      	cmp	r3, #0
 8008f50:	d001      	beq.n	8008f56 <dir_next+0xf2>
 8008f52:	2301      	movs	r3, #1
 8008f54:	e047      	b.n	8008fe6 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8008f56:	68fb      	ldr	r3, [r7, #12]
 8008f58:	3330      	adds	r3, #48	@ 0x30
 8008f5a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008f5e:	2100      	movs	r1, #0
 8008f60:	4618      	mov	r0, r3
 8008f62:	f7ff f97a 	bl	800825a <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8008f66:	2300      	movs	r3, #0
 8008f68:	613b      	str	r3, [r7, #16]
 8008f6a:	6979      	ldr	r1, [r7, #20]
 8008f6c:	68f8      	ldr	r0, [r7, #12]
 8008f6e:	f7ff fc1d 	bl	80087ac <clust2sect>
 8008f72:	4602      	mov	r2, r0
 8008f74:	68fb      	ldr	r3, [r7, #12]
 8008f76:	62da      	str	r2, [r3, #44]	@ 0x2c
 8008f78:	e012      	b.n	8008fa0 <dir_next+0x13c>
						fs->wflag = 1;
 8008f7a:	68fb      	ldr	r3, [r7, #12]
 8008f7c:	2201      	movs	r2, #1
 8008f7e:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8008f80:	68f8      	ldr	r0, [r7, #12]
 8008f82:	f7ff fb33 	bl	80085ec <sync_window>
 8008f86:	4603      	mov	r3, r0
 8008f88:	2b00      	cmp	r3, #0
 8008f8a:	d001      	beq.n	8008f90 <dir_next+0x12c>
 8008f8c:	2301      	movs	r3, #1
 8008f8e:	e02a      	b.n	8008fe6 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8008f90:	693b      	ldr	r3, [r7, #16]
 8008f92:	3301      	adds	r3, #1
 8008f94:	613b      	str	r3, [r7, #16]
 8008f96:	68fb      	ldr	r3, [r7, #12]
 8008f98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f9a:	1c5a      	adds	r2, r3, #1
 8008f9c:	68fb      	ldr	r3, [r7, #12]
 8008f9e:	62da      	str	r2, [r3, #44]	@ 0x2c
 8008fa0:	68fb      	ldr	r3, [r7, #12]
 8008fa2:	895b      	ldrh	r3, [r3, #10]
 8008fa4:	461a      	mov	r2, r3
 8008fa6:	693b      	ldr	r3, [r7, #16]
 8008fa8:	4293      	cmp	r3, r2
 8008faa:	d3e6      	bcc.n	8008f7a <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 8008fac:	68fb      	ldr	r3, [r7, #12]
 8008fae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008fb0:	693b      	ldr	r3, [r7, #16]
 8008fb2:	1ad2      	subs	r2, r2, r3
 8008fb4:	68fb      	ldr	r3, [r7, #12]
 8008fb6:	62da      	str	r2, [r3, #44]	@ 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	697a      	ldr	r2, [r7, #20]
 8008fbc:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8008fbe:	6979      	ldr	r1, [r7, #20]
 8008fc0:	68f8      	ldr	r0, [r7, #12]
 8008fc2:	f7ff fbf3 	bl	80087ac <clust2sect>
 8008fc6:	4602      	mov	r2, r0
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	68ba      	ldr	r2, [r7, #8]
 8008fd0:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8008fd2:	68fb      	ldr	r3, [r7, #12]
 8008fd4:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8008fd8:	68bb      	ldr	r3, [r7, #8]
 8008fda:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008fde:	441a      	add	r2, r3
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8008fe4:	2300      	movs	r3, #0
}
 8008fe6:	4618      	mov	r0, r3
 8008fe8:	3718      	adds	r7, #24
 8008fea:	46bd      	mov	sp, r7
 8008fec:	bd80      	pop	{r7, pc}

08008fee <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8008fee:	b580      	push	{r7, lr}
 8008ff0:	b086      	sub	sp, #24
 8008ff2:	af00      	add	r7, sp, #0
 8008ff4:	6078      	str	r0, [r7, #4]
 8008ff6:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8008ffe:	2100      	movs	r1, #0
 8009000:	6878      	ldr	r0, [r7, #4]
 8009002:	f7ff feb4 	bl	8008d6e <dir_sdi>
 8009006:	4603      	mov	r3, r0
 8009008:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800900a:	7dfb      	ldrb	r3, [r7, #23]
 800900c:	2b00      	cmp	r3, #0
 800900e:	d12b      	bne.n	8009068 <dir_alloc+0x7a>
		n = 0;
 8009010:	2300      	movs	r3, #0
 8009012:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	69db      	ldr	r3, [r3, #28]
 8009018:	4619      	mov	r1, r3
 800901a:	68f8      	ldr	r0, [r7, #12]
 800901c:	f7ff fb2a 	bl	8008674 <move_window>
 8009020:	4603      	mov	r3, r0
 8009022:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8009024:	7dfb      	ldrb	r3, [r7, #23]
 8009026:	2b00      	cmp	r3, #0
 8009028:	d11d      	bne.n	8009066 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	6a1b      	ldr	r3, [r3, #32]
 800902e:	781b      	ldrb	r3, [r3, #0]
 8009030:	2be5      	cmp	r3, #229	@ 0xe5
 8009032:	d004      	beq.n	800903e <dir_alloc+0x50>
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	6a1b      	ldr	r3, [r3, #32]
 8009038:	781b      	ldrb	r3, [r3, #0]
 800903a:	2b00      	cmp	r3, #0
 800903c:	d107      	bne.n	800904e <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800903e:	693b      	ldr	r3, [r7, #16]
 8009040:	3301      	adds	r3, #1
 8009042:	613b      	str	r3, [r7, #16]
 8009044:	693a      	ldr	r2, [r7, #16]
 8009046:	683b      	ldr	r3, [r7, #0]
 8009048:	429a      	cmp	r2, r3
 800904a:	d102      	bne.n	8009052 <dir_alloc+0x64>
 800904c:	e00c      	b.n	8009068 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800904e:	2300      	movs	r3, #0
 8009050:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8009052:	2101      	movs	r1, #1
 8009054:	6878      	ldr	r0, [r7, #4]
 8009056:	f7ff ff05 	bl	8008e64 <dir_next>
 800905a:	4603      	mov	r3, r0
 800905c:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800905e:	7dfb      	ldrb	r3, [r7, #23]
 8009060:	2b00      	cmp	r3, #0
 8009062:	d0d7      	beq.n	8009014 <dir_alloc+0x26>
 8009064:	e000      	b.n	8009068 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8009066:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8009068:	7dfb      	ldrb	r3, [r7, #23]
 800906a:	2b04      	cmp	r3, #4
 800906c:	d101      	bne.n	8009072 <dir_alloc+0x84>
 800906e:	2307      	movs	r3, #7
 8009070:	75fb      	strb	r3, [r7, #23]
	return res;
 8009072:	7dfb      	ldrb	r3, [r7, #23]
}
 8009074:	4618      	mov	r0, r3
 8009076:	3718      	adds	r7, #24
 8009078:	46bd      	mov	sp, r7
 800907a:	bd80      	pop	{r7, pc}

0800907c <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800907c:	b580      	push	{r7, lr}
 800907e:	b084      	sub	sp, #16
 8009080:	af00      	add	r7, sp, #0
 8009082:	6078      	str	r0, [r7, #4]
 8009084:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8009086:	683b      	ldr	r3, [r7, #0]
 8009088:	331a      	adds	r3, #26
 800908a:	4618      	mov	r0, r3
 800908c:	f7ff f842 	bl	8008114 <ld_word>
 8009090:	4603      	mov	r3, r0
 8009092:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	781b      	ldrb	r3, [r3, #0]
 8009098:	2b03      	cmp	r3, #3
 800909a:	d109      	bne.n	80090b0 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800909c:	683b      	ldr	r3, [r7, #0]
 800909e:	3314      	adds	r3, #20
 80090a0:	4618      	mov	r0, r3
 80090a2:	f7ff f837 	bl	8008114 <ld_word>
 80090a6:	4603      	mov	r3, r0
 80090a8:	041b      	lsls	r3, r3, #16
 80090aa:	68fa      	ldr	r2, [r7, #12]
 80090ac:	4313      	orrs	r3, r2
 80090ae:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 80090b0:	68fb      	ldr	r3, [r7, #12]
}
 80090b2:	4618      	mov	r0, r3
 80090b4:	3710      	adds	r7, #16
 80090b6:	46bd      	mov	sp, r7
 80090b8:	bd80      	pop	{r7, pc}

080090ba <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 80090ba:	b580      	push	{r7, lr}
 80090bc:	b084      	sub	sp, #16
 80090be:	af00      	add	r7, sp, #0
 80090c0:	60f8      	str	r0, [r7, #12]
 80090c2:	60b9      	str	r1, [r7, #8]
 80090c4:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 80090c6:	68bb      	ldr	r3, [r7, #8]
 80090c8:	331a      	adds	r3, #26
 80090ca:	687a      	ldr	r2, [r7, #4]
 80090cc:	b292      	uxth	r2, r2
 80090ce:	4611      	mov	r1, r2
 80090d0:	4618      	mov	r0, r3
 80090d2:	f7ff f85a 	bl	800818a <st_word>
	if (fs->fs_type == FS_FAT32) {
 80090d6:	68fb      	ldr	r3, [r7, #12]
 80090d8:	781b      	ldrb	r3, [r3, #0]
 80090da:	2b03      	cmp	r3, #3
 80090dc:	d109      	bne.n	80090f2 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 80090de:	68bb      	ldr	r3, [r7, #8]
 80090e0:	f103 0214 	add.w	r2, r3, #20
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	0c1b      	lsrs	r3, r3, #16
 80090e8:	b29b      	uxth	r3, r3
 80090ea:	4619      	mov	r1, r3
 80090ec:	4610      	mov	r0, r2
 80090ee:	f7ff f84c 	bl	800818a <st_word>
	}
}
 80090f2:	bf00      	nop
 80090f4:	3710      	adds	r7, #16
 80090f6:	46bd      	mov	sp, r7
 80090f8:	bd80      	pop	{r7, pc}

080090fa <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 80090fa:	b580      	push	{r7, lr}
 80090fc:	b086      	sub	sp, #24
 80090fe:	af00      	add	r7, sp, #0
 8009100:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8009108:	2100      	movs	r1, #0
 800910a:	6878      	ldr	r0, [r7, #4]
 800910c:	f7ff fe2f 	bl	8008d6e <dir_sdi>
 8009110:	4603      	mov	r3, r0
 8009112:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8009114:	7dfb      	ldrb	r3, [r7, #23]
 8009116:	2b00      	cmp	r3, #0
 8009118:	d001      	beq.n	800911e <dir_find+0x24>
 800911a:	7dfb      	ldrb	r3, [r7, #23]
 800911c:	e03e      	b.n	800919c <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	69db      	ldr	r3, [r3, #28]
 8009122:	4619      	mov	r1, r3
 8009124:	6938      	ldr	r0, [r7, #16]
 8009126:	f7ff faa5 	bl	8008674 <move_window>
 800912a:	4603      	mov	r3, r0
 800912c:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800912e:	7dfb      	ldrb	r3, [r7, #23]
 8009130:	2b00      	cmp	r3, #0
 8009132:	d12f      	bne.n	8009194 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	6a1b      	ldr	r3, [r3, #32]
 8009138:	781b      	ldrb	r3, [r3, #0]
 800913a:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800913c:	7bfb      	ldrb	r3, [r7, #15]
 800913e:	2b00      	cmp	r3, #0
 8009140:	d102      	bne.n	8009148 <dir_find+0x4e>
 8009142:	2304      	movs	r3, #4
 8009144:	75fb      	strb	r3, [r7, #23]
 8009146:	e028      	b.n	800919a <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	6a1b      	ldr	r3, [r3, #32]
 800914c:	330b      	adds	r3, #11
 800914e:	781b      	ldrb	r3, [r3, #0]
 8009150:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009154:	b2da      	uxtb	r2, r3
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	6a1b      	ldr	r3, [r3, #32]
 800915e:	330b      	adds	r3, #11
 8009160:	781b      	ldrb	r3, [r3, #0]
 8009162:	f003 0308 	and.w	r3, r3, #8
 8009166:	2b00      	cmp	r3, #0
 8009168:	d10a      	bne.n	8009180 <dir_find+0x86>
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	6a18      	ldr	r0, [r3, #32]
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	3324      	adds	r3, #36	@ 0x24
 8009172:	220b      	movs	r2, #11
 8009174:	4619      	mov	r1, r3
 8009176:	f7ff f88b 	bl	8008290 <mem_cmp>
 800917a:	4603      	mov	r3, r0
 800917c:	2b00      	cmp	r3, #0
 800917e:	d00b      	beq.n	8009198 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8009180:	2100      	movs	r1, #0
 8009182:	6878      	ldr	r0, [r7, #4]
 8009184:	f7ff fe6e 	bl	8008e64 <dir_next>
 8009188:	4603      	mov	r3, r0
 800918a:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800918c:	7dfb      	ldrb	r3, [r7, #23]
 800918e:	2b00      	cmp	r3, #0
 8009190:	d0c5      	beq.n	800911e <dir_find+0x24>
 8009192:	e002      	b.n	800919a <dir_find+0xa0>
		if (res != FR_OK) break;
 8009194:	bf00      	nop
 8009196:	e000      	b.n	800919a <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8009198:	bf00      	nop

	return res;
 800919a:	7dfb      	ldrb	r3, [r7, #23]
}
 800919c:	4618      	mov	r0, r3
 800919e:	3718      	adds	r7, #24
 80091a0:	46bd      	mov	sp, r7
 80091a2:	bd80      	pop	{r7, pc}

080091a4 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 80091a4:	b580      	push	{r7, lr}
 80091a6:	b084      	sub	sp, #16
 80091a8:	af00      	add	r7, sp, #0
 80091aa:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 80091b2:	2101      	movs	r1, #1
 80091b4:	6878      	ldr	r0, [r7, #4]
 80091b6:	f7ff ff1a 	bl	8008fee <dir_alloc>
 80091ba:	4603      	mov	r3, r0
 80091bc:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 80091be:	7bfb      	ldrb	r3, [r7, #15]
 80091c0:	2b00      	cmp	r3, #0
 80091c2:	d11c      	bne.n	80091fe <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	69db      	ldr	r3, [r3, #28]
 80091c8:	4619      	mov	r1, r3
 80091ca:	68b8      	ldr	r0, [r7, #8]
 80091cc:	f7ff fa52 	bl	8008674 <move_window>
 80091d0:	4603      	mov	r3, r0
 80091d2:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 80091d4:	7bfb      	ldrb	r3, [r7, #15]
 80091d6:	2b00      	cmp	r3, #0
 80091d8:	d111      	bne.n	80091fe <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	6a1b      	ldr	r3, [r3, #32]
 80091de:	2220      	movs	r2, #32
 80091e0:	2100      	movs	r1, #0
 80091e2:	4618      	mov	r0, r3
 80091e4:	f7ff f839 	bl	800825a <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	6a18      	ldr	r0, [r3, #32]
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	3324      	adds	r3, #36	@ 0x24
 80091f0:	220b      	movs	r2, #11
 80091f2:	4619      	mov	r1, r3
 80091f4:	f7ff f810 	bl	8008218 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 80091f8:	68bb      	ldr	r3, [r7, #8]
 80091fa:	2201      	movs	r2, #1
 80091fc:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 80091fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8009200:	4618      	mov	r0, r3
 8009202:	3710      	adds	r7, #16
 8009204:	46bd      	mov	sp, r7
 8009206:	bd80      	pop	{r7, pc}

08009208 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8009208:	b580      	push	{r7, lr}
 800920a:	b088      	sub	sp, #32
 800920c:	af00      	add	r7, sp, #0
 800920e:	6078      	str	r0, [r7, #4]
 8009210:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8009212:	683b      	ldr	r3, [r7, #0]
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	60fb      	str	r3, [r7, #12]
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	3324      	adds	r3, #36	@ 0x24
 800921c:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800921e:	220b      	movs	r2, #11
 8009220:	2120      	movs	r1, #32
 8009222:	68b8      	ldr	r0, [r7, #8]
 8009224:	f7ff f819 	bl	800825a <mem_set>
	si = i = 0; ni = 8;
 8009228:	2300      	movs	r3, #0
 800922a:	613b      	str	r3, [r7, #16]
 800922c:	693b      	ldr	r3, [r7, #16]
 800922e:	61fb      	str	r3, [r7, #28]
 8009230:	2308      	movs	r3, #8
 8009232:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8009234:	69fb      	ldr	r3, [r7, #28]
 8009236:	1c5a      	adds	r2, r3, #1
 8009238:	61fa      	str	r2, [r7, #28]
 800923a:	68fa      	ldr	r2, [r7, #12]
 800923c:	4413      	add	r3, r2
 800923e:	781b      	ldrb	r3, [r3, #0]
 8009240:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8009242:	7efb      	ldrb	r3, [r7, #27]
 8009244:	2b20      	cmp	r3, #32
 8009246:	d94e      	bls.n	80092e6 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8009248:	7efb      	ldrb	r3, [r7, #27]
 800924a:	2b2f      	cmp	r3, #47	@ 0x2f
 800924c:	d006      	beq.n	800925c <create_name+0x54>
 800924e:	7efb      	ldrb	r3, [r7, #27]
 8009250:	2b5c      	cmp	r3, #92	@ 0x5c
 8009252:	d110      	bne.n	8009276 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8009254:	e002      	b.n	800925c <create_name+0x54>
 8009256:	69fb      	ldr	r3, [r7, #28]
 8009258:	3301      	adds	r3, #1
 800925a:	61fb      	str	r3, [r7, #28]
 800925c:	68fa      	ldr	r2, [r7, #12]
 800925e:	69fb      	ldr	r3, [r7, #28]
 8009260:	4413      	add	r3, r2
 8009262:	781b      	ldrb	r3, [r3, #0]
 8009264:	2b2f      	cmp	r3, #47	@ 0x2f
 8009266:	d0f6      	beq.n	8009256 <create_name+0x4e>
 8009268:	68fa      	ldr	r2, [r7, #12]
 800926a:	69fb      	ldr	r3, [r7, #28]
 800926c:	4413      	add	r3, r2
 800926e:	781b      	ldrb	r3, [r3, #0]
 8009270:	2b5c      	cmp	r3, #92	@ 0x5c
 8009272:	d0f0      	beq.n	8009256 <create_name+0x4e>
			break;
 8009274:	e038      	b.n	80092e8 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8009276:	7efb      	ldrb	r3, [r7, #27]
 8009278:	2b2e      	cmp	r3, #46	@ 0x2e
 800927a:	d003      	beq.n	8009284 <create_name+0x7c>
 800927c:	693a      	ldr	r2, [r7, #16]
 800927e:	697b      	ldr	r3, [r7, #20]
 8009280:	429a      	cmp	r2, r3
 8009282:	d30c      	bcc.n	800929e <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8009284:	697b      	ldr	r3, [r7, #20]
 8009286:	2b0b      	cmp	r3, #11
 8009288:	d002      	beq.n	8009290 <create_name+0x88>
 800928a:	7efb      	ldrb	r3, [r7, #27]
 800928c:	2b2e      	cmp	r3, #46	@ 0x2e
 800928e:	d001      	beq.n	8009294 <create_name+0x8c>
 8009290:	2306      	movs	r3, #6
 8009292:	e044      	b.n	800931e <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8009294:	2308      	movs	r3, #8
 8009296:	613b      	str	r3, [r7, #16]
 8009298:	230b      	movs	r3, #11
 800929a:	617b      	str	r3, [r7, #20]
			continue;
 800929c:	e022      	b.n	80092e4 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800929e:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80092a2:	2b00      	cmp	r3, #0
 80092a4:	da04      	bge.n	80092b0 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 80092a6:	7efb      	ldrb	r3, [r7, #27]
 80092a8:	3b80      	subs	r3, #128	@ 0x80
 80092aa:	4a1f      	ldr	r2, [pc, #124]	@ (8009328 <create_name+0x120>)
 80092ac:	5cd3      	ldrb	r3, [r2, r3]
 80092ae:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 80092b0:	7efb      	ldrb	r3, [r7, #27]
 80092b2:	4619      	mov	r1, r3
 80092b4:	481d      	ldr	r0, [pc, #116]	@ (800932c <create_name+0x124>)
 80092b6:	f7ff f812 	bl	80082de <chk_chr>
 80092ba:	4603      	mov	r3, r0
 80092bc:	2b00      	cmp	r3, #0
 80092be:	d001      	beq.n	80092c4 <create_name+0xbc>
 80092c0:	2306      	movs	r3, #6
 80092c2:	e02c      	b.n	800931e <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 80092c4:	7efb      	ldrb	r3, [r7, #27]
 80092c6:	2b60      	cmp	r3, #96	@ 0x60
 80092c8:	d905      	bls.n	80092d6 <create_name+0xce>
 80092ca:	7efb      	ldrb	r3, [r7, #27]
 80092cc:	2b7a      	cmp	r3, #122	@ 0x7a
 80092ce:	d802      	bhi.n	80092d6 <create_name+0xce>
 80092d0:	7efb      	ldrb	r3, [r7, #27]
 80092d2:	3b20      	subs	r3, #32
 80092d4:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 80092d6:	693b      	ldr	r3, [r7, #16]
 80092d8:	1c5a      	adds	r2, r3, #1
 80092da:	613a      	str	r2, [r7, #16]
 80092dc:	68ba      	ldr	r2, [r7, #8]
 80092de:	4413      	add	r3, r2
 80092e0:	7efa      	ldrb	r2, [r7, #27]
 80092e2:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 80092e4:	e7a6      	b.n	8009234 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 80092e6:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 80092e8:	68fa      	ldr	r2, [r7, #12]
 80092ea:	69fb      	ldr	r3, [r7, #28]
 80092ec:	441a      	add	r2, r3
 80092ee:	683b      	ldr	r3, [r7, #0]
 80092f0:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 80092f2:	693b      	ldr	r3, [r7, #16]
 80092f4:	2b00      	cmp	r3, #0
 80092f6:	d101      	bne.n	80092fc <create_name+0xf4>
 80092f8:	2306      	movs	r3, #6
 80092fa:	e010      	b.n	800931e <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 80092fc:	68bb      	ldr	r3, [r7, #8]
 80092fe:	781b      	ldrb	r3, [r3, #0]
 8009300:	2be5      	cmp	r3, #229	@ 0xe5
 8009302:	d102      	bne.n	800930a <create_name+0x102>
 8009304:	68bb      	ldr	r3, [r7, #8]
 8009306:	2205      	movs	r2, #5
 8009308:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800930a:	7efb      	ldrb	r3, [r7, #27]
 800930c:	2b20      	cmp	r3, #32
 800930e:	d801      	bhi.n	8009314 <create_name+0x10c>
 8009310:	2204      	movs	r2, #4
 8009312:	e000      	b.n	8009316 <create_name+0x10e>
 8009314:	2200      	movs	r2, #0
 8009316:	68bb      	ldr	r3, [r7, #8]
 8009318:	330b      	adds	r3, #11
 800931a:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800931c:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800931e:	4618      	mov	r0, r3
 8009320:	3720      	adds	r7, #32
 8009322:	46bd      	mov	sp, r7
 8009324:	bd80      	pop	{r7, pc}
 8009326:	bf00      	nop
 8009328:	0800db9c 	.word	0x0800db9c
 800932c:	0800dacc 	.word	0x0800dacc

08009330 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8009330:	b580      	push	{r7, lr}
 8009332:	b086      	sub	sp, #24
 8009334:	af00      	add	r7, sp, #0
 8009336:	6078      	str	r0, [r7, #4]
 8009338:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800933e:	693b      	ldr	r3, [r7, #16]
 8009340:	681b      	ldr	r3, [r3, #0]
 8009342:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8009344:	e002      	b.n	800934c <follow_path+0x1c>
 8009346:	683b      	ldr	r3, [r7, #0]
 8009348:	3301      	adds	r3, #1
 800934a:	603b      	str	r3, [r7, #0]
 800934c:	683b      	ldr	r3, [r7, #0]
 800934e:	781b      	ldrb	r3, [r3, #0]
 8009350:	2b2f      	cmp	r3, #47	@ 0x2f
 8009352:	d0f8      	beq.n	8009346 <follow_path+0x16>
 8009354:	683b      	ldr	r3, [r7, #0]
 8009356:	781b      	ldrb	r3, [r3, #0]
 8009358:	2b5c      	cmp	r3, #92	@ 0x5c
 800935a:	d0f4      	beq.n	8009346 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800935c:	693b      	ldr	r3, [r7, #16]
 800935e:	2200      	movs	r2, #0
 8009360:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8009362:	683b      	ldr	r3, [r7, #0]
 8009364:	781b      	ldrb	r3, [r3, #0]
 8009366:	2b1f      	cmp	r3, #31
 8009368:	d80a      	bhi.n	8009380 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	2280      	movs	r2, #128	@ 0x80
 800936e:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 8009372:	2100      	movs	r1, #0
 8009374:	6878      	ldr	r0, [r7, #4]
 8009376:	f7ff fcfa 	bl	8008d6e <dir_sdi>
 800937a:	4603      	mov	r3, r0
 800937c:	75fb      	strb	r3, [r7, #23]
 800937e:	e043      	b.n	8009408 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8009380:	463b      	mov	r3, r7
 8009382:	4619      	mov	r1, r3
 8009384:	6878      	ldr	r0, [r7, #4]
 8009386:	f7ff ff3f 	bl	8009208 <create_name>
 800938a:	4603      	mov	r3, r0
 800938c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800938e:	7dfb      	ldrb	r3, [r7, #23]
 8009390:	2b00      	cmp	r3, #0
 8009392:	d134      	bne.n	80093fe <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 8009394:	6878      	ldr	r0, [r7, #4]
 8009396:	f7ff feb0 	bl	80090fa <dir_find>
 800939a:	4603      	mov	r3, r0
 800939c:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 80093a4:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 80093a6:	7dfb      	ldrb	r3, [r7, #23]
 80093a8:	2b00      	cmp	r3, #0
 80093aa:	d00a      	beq.n	80093c2 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 80093ac:	7dfb      	ldrb	r3, [r7, #23]
 80093ae:	2b04      	cmp	r3, #4
 80093b0:	d127      	bne.n	8009402 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 80093b2:	7afb      	ldrb	r3, [r7, #11]
 80093b4:	f003 0304 	and.w	r3, r3, #4
 80093b8:	2b00      	cmp	r3, #0
 80093ba:	d122      	bne.n	8009402 <follow_path+0xd2>
 80093bc:	2305      	movs	r3, #5
 80093be:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 80093c0:	e01f      	b.n	8009402 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80093c2:	7afb      	ldrb	r3, [r7, #11]
 80093c4:	f003 0304 	and.w	r3, r3, #4
 80093c8:	2b00      	cmp	r3, #0
 80093ca:	d11c      	bne.n	8009406 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 80093cc:	693b      	ldr	r3, [r7, #16]
 80093ce:	799b      	ldrb	r3, [r3, #6]
 80093d0:	f003 0310 	and.w	r3, r3, #16
 80093d4:	2b00      	cmp	r3, #0
 80093d6:	d102      	bne.n	80093de <follow_path+0xae>
				res = FR_NO_PATH; break;
 80093d8:	2305      	movs	r3, #5
 80093da:	75fb      	strb	r3, [r7, #23]
 80093dc:	e014      	b.n	8009408 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 80093de:	68fb      	ldr	r3, [r7, #12]
 80093e0:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	695b      	ldr	r3, [r3, #20]
 80093e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80093ec:	4413      	add	r3, r2
 80093ee:	4619      	mov	r1, r3
 80093f0:	68f8      	ldr	r0, [r7, #12]
 80093f2:	f7ff fe43 	bl	800907c <ld_clust>
 80093f6:	4602      	mov	r2, r0
 80093f8:	693b      	ldr	r3, [r7, #16]
 80093fa:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80093fc:	e7c0      	b.n	8009380 <follow_path+0x50>
			if (res != FR_OK) break;
 80093fe:	bf00      	nop
 8009400:	e002      	b.n	8009408 <follow_path+0xd8>
				break;
 8009402:	bf00      	nop
 8009404:	e000      	b.n	8009408 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8009406:	bf00      	nop
			}
		}
	}

	return res;
 8009408:	7dfb      	ldrb	r3, [r7, #23]
}
 800940a:	4618      	mov	r0, r3
 800940c:	3718      	adds	r7, #24
 800940e:	46bd      	mov	sp, r7
 8009410:	bd80      	pop	{r7, pc}

08009412 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8009412:	b480      	push	{r7}
 8009414:	b087      	sub	sp, #28
 8009416:	af00      	add	r7, sp, #0
 8009418:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800941a:	f04f 33ff 	mov.w	r3, #4294967295
 800941e:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	2b00      	cmp	r3, #0
 8009426:	d031      	beq.n	800948c <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	617b      	str	r3, [r7, #20]
 800942e:	e002      	b.n	8009436 <get_ldnumber+0x24>
 8009430:	697b      	ldr	r3, [r7, #20]
 8009432:	3301      	adds	r3, #1
 8009434:	617b      	str	r3, [r7, #20]
 8009436:	697b      	ldr	r3, [r7, #20]
 8009438:	781b      	ldrb	r3, [r3, #0]
 800943a:	2b20      	cmp	r3, #32
 800943c:	d903      	bls.n	8009446 <get_ldnumber+0x34>
 800943e:	697b      	ldr	r3, [r7, #20]
 8009440:	781b      	ldrb	r3, [r3, #0]
 8009442:	2b3a      	cmp	r3, #58	@ 0x3a
 8009444:	d1f4      	bne.n	8009430 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8009446:	697b      	ldr	r3, [r7, #20]
 8009448:	781b      	ldrb	r3, [r3, #0]
 800944a:	2b3a      	cmp	r3, #58	@ 0x3a
 800944c:	d11c      	bne.n	8009488 <get_ldnumber+0x76>
			tp = *path;
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8009454:	68fb      	ldr	r3, [r7, #12]
 8009456:	1c5a      	adds	r2, r3, #1
 8009458:	60fa      	str	r2, [r7, #12]
 800945a:	781b      	ldrb	r3, [r3, #0]
 800945c:	3b30      	subs	r3, #48	@ 0x30
 800945e:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8009460:	68bb      	ldr	r3, [r7, #8]
 8009462:	2b09      	cmp	r3, #9
 8009464:	d80e      	bhi.n	8009484 <get_ldnumber+0x72>
 8009466:	68fa      	ldr	r2, [r7, #12]
 8009468:	697b      	ldr	r3, [r7, #20]
 800946a:	429a      	cmp	r2, r3
 800946c:	d10a      	bne.n	8009484 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800946e:	68bb      	ldr	r3, [r7, #8]
 8009470:	2b00      	cmp	r3, #0
 8009472:	d107      	bne.n	8009484 <get_ldnumber+0x72>
					vol = (int)i;
 8009474:	68bb      	ldr	r3, [r7, #8]
 8009476:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8009478:	697b      	ldr	r3, [r7, #20]
 800947a:	3301      	adds	r3, #1
 800947c:	617b      	str	r3, [r7, #20]
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	697a      	ldr	r2, [r7, #20]
 8009482:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8009484:	693b      	ldr	r3, [r7, #16]
 8009486:	e002      	b.n	800948e <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8009488:	2300      	movs	r3, #0
 800948a:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800948c:	693b      	ldr	r3, [r7, #16]
}
 800948e:	4618      	mov	r0, r3
 8009490:	371c      	adds	r7, #28
 8009492:	46bd      	mov	sp, r7
 8009494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009498:	4770      	bx	lr
	...

0800949c <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800949c:	b580      	push	{r7, lr}
 800949e:	b082      	sub	sp, #8
 80094a0:	af00      	add	r7, sp, #0
 80094a2:	6078      	str	r0, [r7, #4]
 80094a4:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	2200      	movs	r2, #0
 80094aa:	70da      	strb	r2, [r3, #3]
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	f04f 32ff 	mov.w	r2, #4294967295
 80094b2:	62da      	str	r2, [r3, #44]	@ 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 80094b4:	6839      	ldr	r1, [r7, #0]
 80094b6:	6878      	ldr	r0, [r7, #4]
 80094b8:	f7ff f8dc 	bl	8008674 <move_window>
 80094bc:	4603      	mov	r3, r0
 80094be:	2b00      	cmp	r3, #0
 80094c0:	d001      	beq.n	80094c6 <check_fs+0x2a>
 80094c2:	2304      	movs	r3, #4
 80094c4:	e038      	b.n	8009538 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	3330      	adds	r3, #48	@ 0x30
 80094ca:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 80094ce:	4618      	mov	r0, r3
 80094d0:	f7fe fe20 	bl	8008114 <ld_word>
 80094d4:	4603      	mov	r3, r0
 80094d6:	461a      	mov	r2, r3
 80094d8:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 80094dc:	429a      	cmp	r2, r3
 80094de:	d001      	beq.n	80094e4 <check_fs+0x48>
 80094e0:	2303      	movs	r3, #3
 80094e2:	e029      	b.n	8009538 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80094ea:	2be9      	cmp	r3, #233	@ 0xe9
 80094ec:	d009      	beq.n	8009502 <check_fs+0x66>
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80094f4:	2beb      	cmp	r3, #235	@ 0xeb
 80094f6:	d11e      	bne.n	8009536 <check_fs+0x9a>
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 80094fe:	2b90      	cmp	r3, #144	@ 0x90
 8009500:	d119      	bne.n	8009536 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	3330      	adds	r3, #48	@ 0x30
 8009506:	3336      	adds	r3, #54	@ 0x36
 8009508:	4618      	mov	r0, r3
 800950a:	f7fe fe1b 	bl	8008144 <ld_dword>
 800950e:	4603      	mov	r3, r0
 8009510:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8009514:	4a0a      	ldr	r2, [pc, #40]	@ (8009540 <check_fs+0xa4>)
 8009516:	4293      	cmp	r3, r2
 8009518:	d101      	bne.n	800951e <check_fs+0x82>
 800951a:	2300      	movs	r3, #0
 800951c:	e00c      	b.n	8009538 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	3330      	adds	r3, #48	@ 0x30
 8009522:	3352      	adds	r3, #82	@ 0x52
 8009524:	4618      	mov	r0, r3
 8009526:	f7fe fe0d 	bl	8008144 <ld_dword>
 800952a:	4603      	mov	r3, r0
 800952c:	4a05      	ldr	r2, [pc, #20]	@ (8009544 <check_fs+0xa8>)
 800952e:	4293      	cmp	r3, r2
 8009530:	d101      	bne.n	8009536 <check_fs+0x9a>
 8009532:	2300      	movs	r3, #0
 8009534:	e000      	b.n	8009538 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8009536:	2302      	movs	r3, #2
}
 8009538:	4618      	mov	r0, r3
 800953a:	3708      	adds	r7, #8
 800953c:	46bd      	mov	sp, r7
 800953e:	bd80      	pop	{r7, pc}
 8009540:	00544146 	.word	0x00544146
 8009544:	33544146 	.word	0x33544146

08009548 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8009548:	b580      	push	{r7, lr}
 800954a:	b096      	sub	sp, #88	@ 0x58
 800954c:	af00      	add	r7, sp, #0
 800954e:	60f8      	str	r0, [r7, #12]
 8009550:	60b9      	str	r1, [r7, #8]
 8009552:	4613      	mov	r3, r2
 8009554:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8009556:	68bb      	ldr	r3, [r7, #8]
 8009558:	2200      	movs	r2, #0
 800955a:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800955c:	68f8      	ldr	r0, [r7, #12]
 800955e:	f7ff ff58 	bl	8009412 <get_ldnumber>
 8009562:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8009564:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009566:	2b00      	cmp	r3, #0
 8009568:	da01      	bge.n	800956e <find_volume+0x26>
 800956a:	230b      	movs	r3, #11
 800956c:	e22d      	b.n	80099ca <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800956e:	4aa1      	ldr	r2, [pc, #644]	@ (80097f4 <find_volume+0x2ac>)
 8009570:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009572:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009576:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8009578:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800957a:	2b00      	cmp	r3, #0
 800957c:	d101      	bne.n	8009582 <find_volume+0x3a>
 800957e:	230c      	movs	r3, #12
 8009580:	e223      	b.n	80099ca <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8009582:	68bb      	ldr	r3, [r7, #8]
 8009584:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009586:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8009588:	79fb      	ldrb	r3, [r7, #7]
 800958a:	f023 0301 	bic.w	r3, r3, #1
 800958e:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8009590:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009592:	781b      	ldrb	r3, [r3, #0]
 8009594:	2b00      	cmp	r3, #0
 8009596:	d01a      	beq.n	80095ce <find_volume+0x86>
		stat = disk_status(fs->drv);
 8009598:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800959a:	785b      	ldrb	r3, [r3, #1]
 800959c:	4618      	mov	r0, r3
 800959e:	f7fe fd1b 	bl	8007fd8 <disk_status>
 80095a2:	4603      	mov	r3, r0
 80095a4:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 80095a8:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80095ac:	f003 0301 	and.w	r3, r3, #1
 80095b0:	2b00      	cmp	r3, #0
 80095b2:	d10c      	bne.n	80095ce <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 80095b4:	79fb      	ldrb	r3, [r7, #7]
 80095b6:	2b00      	cmp	r3, #0
 80095b8:	d007      	beq.n	80095ca <find_volume+0x82>
 80095ba:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80095be:	f003 0304 	and.w	r3, r3, #4
 80095c2:	2b00      	cmp	r3, #0
 80095c4:	d001      	beq.n	80095ca <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 80095c6:	230a      	movs	r3, #10
 80095c8:	e1ff      	b.n	80099ca <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 80095ca:	2300      	movs	r3, #0
 80095cc:	e1fd      	b.n	80099ca <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 80095ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80095d0:	2200      	movs	r2, #0
 80095d2:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 80095d4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80095d6:	b2da      	uxtb	r2, r3
 80095d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80095da:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 80095dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80095de:	785b      	ldrb	r3, [r3, #1]
 80095e0:	4618      	mov	r0, r3
 80095e2:	f7fe fd13 	bl	800800c <disk_initialize>
 80095e6:	4603      	mov	r3, r0
 80095e8:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 80095ec:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80095f0:	f003 0301 	and.w	r3, r3, #1
 80095f4:	2b00      	cmp	r3, #0
 80095f6:	d001      	beq.n	80095fc <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 80095f8:	2303      	movs	r3, #3
 80095fa:	e1e6      	b.n	80099ca <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 80095fc:	79fb      	ldrb	r3, [r7, #7]
 80095fe:	2b00      	cmp	r3, #0
 8009600:	d007      	beq.n	8009612 <find_volume+0xca>
 8009602:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8009606:	f003 0304 	and.w	r3, r3, #4
 800960a:	2b00      	cmp	r3, #0
 800960c:	d001      	beq.n	8009612 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800960e:	230a      	movs	r3, #10
 8009610:	e1db      	b.n	80099ca <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8009612:	2300      	movs	r3, #0
 8009614:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8009616:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8009618:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800961a:	f7ff ff3f 	bl	800949c <check_fs>
 800961e:	4603      	mov	r3, r0
 8009620:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8009624:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8009628:	2b02      	cmp	r3, #2
 800962a:	d149      	bne.n	80096c0 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800962c:	2300      	movs	r3, #0
 800962e:	643b      	str	r3, [r7, #64]	@ 0x40
 8009630:	e01e      	b.n	8009670 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8009632:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009634:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8009638:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800963a:	011b      	lsls	r3, r3, #4
 800963c:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 8009640:	4413      	add	r3, r2
 8009642:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8009644:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009646:	3304      	adds	r3, #4
 8009648:	781b      	ldrb	r3, [r3, #0]
 800964a:	2b00      	cmp	r3, #0
 800964c:	d006      	beq.n	800965c <find_volume+0x114>
 800964e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009650:	3308      	adds	r3, #8
 8009652:	4618      	mov	r0, r3
 8009654:	f7fe fd76 	bl	8008144 <ld_dword>
 8009658:	4602      	mov	r2, r0
 800965a:	e000      	b.n	800965e <find_volume+0x116>
 800965c:	2200      	movs	r2, #0
 800965e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009660:	009b      	lsls	r3, r3, #2
 8009662:	3358      	adds	r3, #88	@ 0x58
 8009664:	443b      	add	r3, r7
 8009666:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800966a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800966c:	3301      	adds	r3, #1
 800966e:	643b      	str	r3, [r7, #64]	@ 0x40
 8009670:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009672:	2b03      	cmp	r3, #3
 8009674:	d9dd      	bls.n	8009632 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8009676:	2300      	movs	r3, #0
 8009678:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 800967a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800967c:	2b00      	cmp	r3, #0
 800967e:	d002      	beq.n	8009686 <find_volume+0x13e>
 8009680:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009682:	3b01      	subs	r3, #1
 8009684:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8009686:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009688:	009b      	lsls	r3, r3, #2
 800968a:	3358      	adds	r3, #88	@ 0x58
 800968c:	443b      	add	r3, r7
 800968e:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8009692:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8009694:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009696:	2b00      	cmp	r3, #0
 8009698:	d005      	beq.n	80096a6 <find_volume+0x15e>
 800969a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800969c:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800969e:	f7ff fefd 	bl	800949c <check_fs>
 80096a2:	4603      	mov	r3, r0
 80096a4:	e000      	b.n	80096a8 <find_volume+0x160>
 80096a6:	2303      	movs	r3, #3
 80096a8:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 80096ac:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80096b0:	2b01      	cmp	r3, #1
 80096b2:	d905      	bls.n	80096c0 <find_volume+0x178>
 80096b4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80096b6:	3301      	adds	r3, #1
 80096b8:	643b      	str	r3, [r7, #64]	@ 0x40
 80096ba:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80096bc:	2b03      	cmp	r3, #3
 80096be:	d9e2      	bls.n	8009686 <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 80096c0:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80096c4:	2b04      	cmp	r3, #4
 80096c6:	d101      	bne.n	80096cc <find_volume+0x184>
 80096c8:	2301      	movs	r3, #1
 80096ca:	e17e      	b.n	80099ca <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 80096cc:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80096d0:	2b01      	cmp	r3, #1
 80096d2:	d901      	bls.n	80096d8 <find_volume+0x190>
 80096d4:	230d      	movs	r3, #13
 80096d6:	e178      	b.n	80099ca <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 80096d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80096da:	3330      	adds	r3, #48	@ 0x30
 80096dc:	330b      	adds	r3, #11
 80096de:	4618      	mov	r0, r3
 80096e0:	f7fe fd18 	bl	8008114 <ld_word>
 80096e4:	4603      	mov	r3, r0
 80096e6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80096ea:	d001      	beq.n	80096f0 <find_volume+0x1a8>
 80096ec:	230d      	movs	r3, #13
 80096ee:	e16c      	b.n	80099ca <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 80096f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80096f2:	3330      	adds	r3, #48	@ 0x30
 80096f4:	3316      	adds	r3, #22
 80096f6:	4618      	mov	r0, r3
 80096f8:	f7fe fd0c 	bl	8008114 <ld_word>
 80096fc:	4603      	mov	r3, r0
 80096fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8009700:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009702:	2b00      	cmp	r3, #0
 8009704:	d106      	bne.n	8009714 <find_volume+0x1cc>
 8009706:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009708:	3330      	adds	r3, #48	@ 0x30
 800970a:	3324      	adds	r3, #36	@ 0x24
 800970c:	4618      	mov	r0, r3
 800970e:	f7fe fd19 	bl	8008144 <ld_dword>
 8009712:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 8009714:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009716:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8009718:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800971a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800971c:	f893 2040 	ldrb.w	r2, [r3, #64]	@ 0x40
 8009720:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009722:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8009724:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009726:	789b      	ldrb	r3, [r3, #2]
 8009728:	2b01      	cmp	r3, #1
 800972a:	d005      	beq.n	8009738 <find_volume+0x1f0>
 800972c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800972e:	789b      	ldrb	r3, [r3, #2]
 8009730:	2b02      	cmp	r3, #2
 8009732:	d001      	beq.n	8009738 <find_volume+0x1f0>
 8009734:	230d      	movs	r3, #13
 8009736:	e148      	b.n	80099ca <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8009738:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800973a:	789b      	ldrb	r3, [r3, #2]
 800973c:	461a      	mov	r2, r3
 800973e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009740:	fb02 f303 	mul.w	r3, r2, r3
 8009744:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8009746:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009748:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800974c:	461a      	mov	r2, r3
 800974e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009750:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8009752:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009754:	895b      	ldrh	r3, [r3, #10]
 8009756:	2b00      	cmp	r3, #0
 8009758:	d008      	beq.n	800976c <find_volume+0x224>
 800975a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800975c:	895b      	ldrh	r3, [r3, #10]
 800975e:	461a      	mov	r2, r3
 8009760:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009762:	895b      	ldrh	r3, [r3, #10]
 8009764:	3b01      	subs	r3, #1
 8009766:	4013      	ands	r3, r2
 8009768:	2b00      	cmp	r3, #0
 800976a:	d001      	beq.n	8009770 <find_volume+0x228>
 800976c:	230d      	movs	r3, #13
 800976e:	e12c      	b.n	80099ca <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8009770:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009772:	3330      	adds	r3, #48	@ 0x30
 8009774:	3311      	adds	r3, #17
 8009776:	4618      	mov	r0, r3
 8009778:	f7fe fccc 	bl	8008114 <ld_word>
 800977c:	4603      	mov	r3, r0
 800977e:	461a      	mov	r2, r3
 8009780:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009782:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8009784:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009786:	891b      	ldrh	r3, [r3, #8]
 8009788:	f003 030f 	and.w	r3, r3, #15
 800978c:	b29b      	uxth	r3, r3
 800978e:	2b00      	cmp	r3, #0
 8009790:	d001      	beq.n	8009796 <find_volume+0x24e>
 8009792:	230d      	movs	r3, #13
 8009794:	e119      	b.n	80099ca <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8009796:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009798:	3330      	adds	r3, #48	@ 0x30
 800979a:	3313      	adds	r3, #19
 800979c:	4618      	mov	r0, r3
 800979e:	f7fe fcb9 	bl	8008114 <ld_word>
 80097a2:	4603      	mov	r3, r0
 80097a4:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 80097a6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80097a8:	2b00      	cmp	r3, #0
 80097aa:	d106      	bne.n	80097ba <find_volume+0x272>
 80097ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80097ae:	3330      	adds	r3, #48	@ 0x30
 80097b0:	3320      	adds	r3, #32
 80097b2:	4618      	mov	r0, r3
 80097b4:	f7fe fcc6 	bl	8008144 <ld_dword>
 80097b8:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 80097ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80097bc:	3330      	adds	r3, #48	@ 0x30
 80097be:	330e      	adds	r3, #14
 80097c0:	4618      	mov	r0, r3
 80097c2:	f7fe fca7 	bl	8008114 <ld_word>
 80097c6:	4603      	mov	r3, r0
 80097c8:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 80097ca:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80097cc:	2b00      	cmp	r3, #0
 80097ce:	d101      	bne.n	80097d4 <find_volume+0x28c>
 80097d0:	230d      	movs	r3, #13
 80097d2:	e0fa      	b.n	80099ca <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 80097d4:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 80097d6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80097d8:	4413      	add	r3, r2
 80097da:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80097dc:	8912      	ldrh	r2, [r2, #8]
 80097de:	0912      	lsrs	r2, r2, #4
 80097e0:	b292      	uxth	r2, r2
 80097e2:	4413      	add	r3, r2
 80097e4:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 80097e6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80097e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80097ea:	429a      	cmp	r2, r3
 80097ec:	d204      	bcs.n	80097f8 <find_volume+0x2b0>
 80097ee:	230d      	movs	r3, #13
 80097f0:	e0eb      	b.n	80099ca <find_volume+0x482>
 80097f2:	bf00      	nop
 80097f4:	20008554 	.word	0x20008554
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 80097f8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80097fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80097fc:	1ad3      	subs	r3, r2, r3
 80097fe:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009800:	8952      	ldrh	r2, [r2, #10]
 8009802:	fbb3 f3f2 	udiv	r3, r3, r2
 8009806:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8009808:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800980a:	2b00      	cmp	r3, #0
 800980c:	d101      	bne.n	8009812 <find_volume+0x2ca>
 800980e:	230d      	movs	r3, #13
 8009810:	e0db      	b.n	80099ca <find_volume+0x482>
		fmt = FS_FAT32;
 8009812:	2303      	movs	r3, #3
 8009814:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8009818:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800981a:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 800981e:	4293      	cmp	r3, r2
 8009820:	d802      	bhi.n	8009828 <find_volume+0x2e0>
 8009822:	2302      	movs	r3, #2
 8009824:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8009828:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800982a:	f640 72f5 	movw	r2, #4085	@ 0xff5
 800982e:	4293      	cmp	r3, r2
 8009830:	d802      	bhi.n	8009838 <find_volume+0x2f0>
 8009832:	2301      	movs	r3, #1
 8009834:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8009838:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800983a:	1c9a      	adds	r2, r3, #2
 800983c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800983e:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 8009840:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009842:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8009844:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8009846:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8009848:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800984a:	441a      	add	r2, r3
 800984c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800984e:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 8009850:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8009852:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009854:	441a      	add	r2, r3
 8009856:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009858:	629a      	str	r2, [r3, #40]	@ 0x28
		if (fmt == FS_FAT32) {
 800985a:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800985e:	2b03      	cmp	r3, #3
 8009860:	d11e      	bne.n	80098a0 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8009862:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009864:	3330      	adds	r3, #48	@ 0x30
 8009866:	332a      	adds	r3, #42	@ 0x2a
 8009868:	4618      	mov	r0, r3
 800986a:	f7fe fc53 	bl	8008114 <ld_word>
 800986e:	4603      	mov	r3, r0
 8009870:	2b00      	cmp	r3, #0
 8009872:	d001      	beq.n	8009878 <find_volume+0x330>
 8009874:	230d      	movs	r3, #13
 8009876:	e0a8      	b.n	80099ca <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8009878:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800987a:	891b      	ldrh	r3, [r3, #8]
 800987c:	2b00      	cmp	r3, #0
 800987e:	d001      	beq.n	8009884 <find_volume+0x33c>
 8009880:	230d      	movs	r3, #13
 8009882:	e0a2      	b.n	80099ca <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8009884:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009886:	3330      	adds	r3, #48	@ 0x30
 8009888:	332c      	adds	r3, #44	@ 0x2c
 800988a:	4618      	mov	r0, r3
 800988c:	f7fe fc5a 	bl	8008144 <ld_dword>
 8009890:	4602      	mov	r2, r0
 8009892:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009894:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8009896:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009898:	695b      	ldr	r3, [r3, #20]
 800989a:	009b      	lsls	r3, r3, #2
 800989c:	647b      	str	r3, [r7, #68]	@ 0x44
 800989e:	e01f      	b.n	80098e0 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 80098a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80098a2:	891b      	ldrh	r3, [r3, #8]
 80098a4:	2b00      	cmp	r3, #0
 80098a6:	d101      	bne.n	80098ac <find_volume+0x364>
 80098a8:	230d      	movs	r3, #13
 80098aa:	e08e      	b.n	80099ca <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 80098ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80098ae:	6a1a      	ldr	r2, [r3, #32]
 80098b0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80098b2:	441a      	add	r2, r3
 80098b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80098b6:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80098b8:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80098bc:	2b02      	cmp	r3, #2
 80098be:	d103      	bne.n	80098c8 <find_volume+0x380>
 80098c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80098c2:	695b      	ldr	r3, [r3, #20]
 80098c4:	005b      	lsls	r3, r3, #1
 80098c6:	e00a      	b.n	80098de <find_volume+0x396>
 80098c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80098ca:	695a      	ldr	r2, [r3, #20]
 80098cc:	4613      	mov	r3, r2
 80098ce:	005b      	lsls	r3, r3, #1
 80098d0:	4413      	add	r3, r2
 80098d2:	085a      	lsrs	r2, r3, #1
 80098d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80098d6:	695b      	ldr	r3, [r3, #20]
 80098d8:	f003 0301 	and.w	r3, r3, #1
 80098dc:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 80098de:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 80098e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80098e2:	699a      	ldr	r2, [r3, #24]
 80098e4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80098e6:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 80098ea:	0a5b      	lsrs	r3, r3, #9
 80098ec:	429a      	cmp	r2, r3
 80098ee:	d201      	bcs.n	80098f4 <find_volume+0x3ac>
 80098f0:	230d      	movs	r3, #13
 80098f2:	e06a      	b.n	80099ca <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 80098f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80098f6:	f04f 32ff 	mov.w	r2, #4294967295
 80098fa:	611a      	str	r2, [r3, #16]
 80098fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80098fe:	691a      	ldr	r2, [r3, #16]
 8009900:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009902:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 8009904:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009906:	2280      	movs	r2, #128	@ 0x80
 8009908:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800990a:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800990e:	2b03      	cmp	r3, #3
 8009910:	d149      	bne.n	80099a6 <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8009912:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009914:	3330      	adds	r3, #48	@ 0x30
 8009916:	3330      	adds	r3, #48	@ 0x30
 8009918:	4618      	mov	r0, r3
 800991a:	f7fe fbfb 	bl	8008114 <ld_word>
 800991e:	4603      	mov	r3, r0
 8009920:	2b01      	cmp	r3, #1
 8009922:	d140      	bne.n	80099a6 <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 8009924:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009926:	3301      	adds	r3, #1
 8009928:	4619      	mov	r1, r3
 800992a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800992c:	f7fe fea2 	bl	8008674 <move_window>
 8009930:	4603      	mov	r3, r0
 8009932:	2b00      	cmp	r3, #0
 8009934:	d137      	bne.n	80099a6 <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 8009936:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009938:	2200      	movs	r2, #0
 800993a:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800993c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800993e:	3330      	adds	r3, #48	@ 0x30
 8009940:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8009944:	4618      	mov	r0, r3
 8009946:	f7fe fbe5 	bl	8008114 <ld_word>
 800994a:	4603      	mov	r3, r0
 800994c:	461a      	mov	r2, r3
 800994e:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8009952:	429a      	cmp	r2, r3
 8009954:	d127      	bne.n	80099a6 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8009956:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009958:	3330      	adds	r3, #48	@ 0x30
 800995a:	4618      	mov	r0, r3
 800995c:	f7fe fbf2 	bl	8008144 <ld_dword>
 8009960:	4603      	mov	r3, r0
 8009962:	4a1c      	ldr	r2, [pc, #112]	@ (80099d4 <find_volume+0x48c>)
 8009964:	4293      	cmp	r3, r2
 8009966:	d11e      	bne.n	80099a6 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8009968:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800996a:	3330      	adds	r3, #48	@ 0x30
 800996c:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8009970:	4618      	mov	r0, r3
 8009972:	f7fe fbe7 	bl	8008144 <ld_dword>
 8009976:	4603      	mov	r3, r0
 8009978:	4a17      	ldr	r2, [pc, #92]	@ (80099d8 <find_volume+0x490>)
 800997a:	4293      	cmp	r3, r2
 800997c:	d113      	bne.n	80099a6 <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800997e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009980:	3330      	adds	r3, #48	@ 0x30
 8009982:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 8009986:	4618      	mov	r0, r3
 8009988:	f7fe fbdc 	bl	8008144 <ld_dword>
 800998c:	4602      	mov	r2, r0
 800998e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009990:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8009992:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009994:	3330      	adds	r3, #48	@ 0x30
 8009996:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 800999a:	4618      	mov	r0, r3
 800999c:	f7fe fbd2 	bl	8008144 <ld_dword>
 80099a0:	4602      	mov	r2, r0
 80099a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80099a4:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 80099a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80099a8:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 80099ac:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 80099ae:	4b0b      	ldr	r3, [pc, #44]	@ (80099dc <find_volume+0x494>)
 80099b0:	881b      	ldrh	r3, [r3, #0]
 80099b2:	3301      	adds	r3, #1
 80099b4:	b29a      	uxth	r2, r3
 80099b6:	4b09      	ldr	r3, [pc, #36]	@ (80099dc <find_volume+0x494>)
 80099b8:	801a      	strh	r2, [r3, #0]
 80099ba:	4b08      	ldr	r3, [pc, #32]	@ (80099dc <find_volume+0x494>)
 80099bc:	881a      	ldrh	r2, [r3, #0]
 80099be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80099c0:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 80099c2:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80099c4:	f7fe fdee 	bl	80085a4 <clear_lock>
#endif
	return FR_OK;
 80099c8:	2300      	movs	r3, #0
}
 80099ca:	4618      	mov	r0, r3
 80099cc:	3758      	adds	r7, #88	@ 0x58
 80099ce:	46bd      	mov	sp, r7
 80099d0:	bd80      	pop	{r7, pc}
 80099d2:	bf00      	nop
 80099d4:	41615252 	.word	0x41615252
 80099d8:	61417272 	.word	0x61417272
 80099dc:	20008558 	.word	0x20008558

080099e0 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 80099e0:	b580      	push	{r7, lr}
 80099e2:	b084      	sub	sp, #16
 80099e4:	af00      	add	r7, sp, #0
 80099e6:	6078      	str	r0, [r7, #4]
 80099e8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 80099ea:	2309      	movs	r3, #9
 80099ec:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	2b00      	cmp	r3, #0
 80099f2:	d01c      	beq.n	8009a2e <validate+0x4e>
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	681b      	ldr	r3, [r3, #0]
 80099f8:	2b00      	cmp	r3, #0
 80099fa:	d018      	beq.n	8009a2e <validate+0x4e>
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	681b      	ldr	r3, [r3, #0]
 8009a00:	781b      	ldrb	r3, [r3, #0]
 8009a02:	2b00      	cmp	r3, #0
 8009a04:	d013      	beq.n	8009a2e <validate+0x4e>
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	889a      	ldrh	r2, [r3, #4]
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	681b      	ldr	r3, [r3, #0]
 8009a0e:	88db      	ldrh	r3, [r3, #6]
 8009a10:	429a      	cmp	r2, r3
 8009a12:	d10c      	bne.n	8009a2e <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	681b      	ldr	r3, [r3, #0]
 8009a18:	785b      	ldrb	r3, [r3, #1]
 8009a1a:	4618      	mov	r0, r3
 8009a1c:	f7fe fadc 	bl	8007fd8 <disk_status>
 8009a20:	4603      	mov	r3, r0
 8009a22:	f003 0301 	and.w	r3, r3, #1
 8009a26:	2b00      	cmp	r3, #0
 8009a28:	d101      	bne.n	8009a2e <validate+0x4e>
			res = FR_OK;
 8009a2a:	2300      	movs	r3, #0
 8009a2c:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8009a2e:	7bfb      	ldrb	r3, [r7, #15]
 8009a30:	2b00      	cmp	r3, #0
 8009a32:	d102      	bne.n	8009a3a <validate+0x5a>
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	681b      	ldr	r3, [r3, #0]
 8009a38:	e000      	b.n	8009a3c <validate+0x5c>
 8009a3a:	2300      	movs	r3, #0
 8009a3c:	683a      	ldr	r2, [r7, #0]
 8009a3e:	6013      	str	r3, [r2, #0]
	return res;
 8009a40:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a42:	4618      	mov	r0, r3
 8009a44:	3710      	adds	r7, #16
 8009a46:	46bd      	mov	sp, r7
 8009a48:	bd80      	pop	{r7, pc}
	...

08009a4c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8009a4c:	b580      	push	{r7, lr}
 8009a4e:	b088      	sub	sp, #32
 8009a50:	af00      	add	r7, sp, #0
 8009a52:	60f8      	str	r0, [r7, #12]
 8009a54:	60b9      	str	r1, [r7, #8]
 8009a56:	4613      	mov	r3, r2
 8009a58:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8009a5a:	68bb      	ldr	r3, [r7, #8]
 8009a5c:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8009a5e:	f107 0310 	add.w	r3, r7, #16
 8009a62:	4618      	mov	r0, r3
 8009a64:	f7ff fcd5 	bl	8009412 <get_ldnumber>
 8009a68:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8009a6a:	69fb      	ldr	r3, [r7, #28]
 8009a6c:	2b00      	cmp	r3, #0
 8009a6e:	da01      	bge.n	8009a74 <f_mount+0x28>
 8009a70:	230b      	movs	r3, #11
 8009a72:	e02b      	b.n	8009acc <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8009a74:	4a17      	ldr	r2, [pc, #92]	@ (8009ad4 <f_mount+0x88>)
 8009a76:	69fb      	ldr	r3, [r7, #28]
 8009a78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009a7c:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8009a7e:	69bb      	ldr	r3, [r7, #24]
 8009a80:	2b00      	cmp	r3, #0
 8009a82:	d005      	beq.n	8009a90 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8009a84:	69b8      	ldr	r0, [r7, #24]
 8009a86:	f7fe fd8d 	bl	80085a4 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8009a8a:	69bb      	ldr	r3, [r7, #24]
 8009a8c:	2200      	movs	r2, #0
 8009a8e:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8009a90:	68fb      	ldr	r3, [r7, #12]
 8009a92:	2b00      	cmp	r3, #0
 8009a94:	d002      	beq.n	8009a9c <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8009a96:	68fb      	ldr	r3, [r7, #12]
 8009a98:	2200      	movs	r2, #0
 8009a9a:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8009a9c:	68fa      	ldr	r2, [r7, #12]
 8009a9e:	490d      	ldr	r1, [pc, #52]	@ (8009ad4 <f_mount+0x88>)
 8009aa0:	69fb      	ldr	r3, [r7, #28]
 8009aa2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8009aa6:	68fb      	ldr	r3, [r7, #12]
 8009aa8:	2b00      	cmp	r3, #0
 8009aaa:	d002      	beq.n	8009ab2 <f_mount+0x66>
 8009aac:	79fb      	ldrb	r3, [r7, #7]
 8009aae:	2b01      	cmp	r3, #1
 8009ab0:	d001      	beq.n	8009ab6 <f_mount+0x6a>
 8009ab2:	2300      	movs	r3, #0
 8009ab4:	e00a      	b.n	8009acc <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8009ab6:	f107 010c 	add.w	r1, r7, #12
 8009aba:	f107 0308 	add.w	r3, r7, #8
 8009abe:	2200      	movs	r2, #0
 8009ac0:	4618      	mov	r0, r3
 8009ac2:	f7ff fd41 	bl	8009548 <find_volume>
 8009ac6:	4603      	mov	r3, r0
 8009ac8:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8009aca:	7dfb      	ldrb	r3, [r7, #23]
}
 8009acc:	4618      	mov	r0, r3
 8009ace:	3720      	adds	r7, #32
 8009ad0:	46bd      	mov	sp, r7
 8009ad2:	bd80      	pop	{r7, pc}
 8009ad4:	20008554 	.word	0x20008554

08009ad8 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8009ad8:	b580      	push	{r7, lr}
 8009ada:	b098      	sub	sp, #96	@ 0x60
 8009adc:	af00      	add	r7, sp, #0
 8009ade:	60f8      	str	r0, [r7, #12]
 8009ae0:	60b9      	str	r1, [r7, #8]
 8009ae2:	4613      	mov	r3, r2
 8009ae4:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8009ae6:	68fb      	ldr	r3, [r7, #12]
 8009ae8:	2b00      	cmp	r3, #0
 8009aea:	d101      	bne.n	8009af0 <f_open+0x18>
 8009aec:	2309      	movs	r3, #9
 8009aee:	e1a9      	b.n	8009e44 <f_open+0x36c>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8009af0:	79fb      	ldrb	r3, [r7, #7]
 8009af2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009af6:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8009af8:	79fa      	ldrb	r2, [r7, #7]
 8009afa:	f107 0110 	add.w	r1, r7, #16
 8009afe:	f107 0308 	add.w	r3, r7, #8
 8009b02:	4618      	mov	r0, r3
 8009b04:	f7ff fd20 	bl	8009548 <find_volume>
 8009b08:	4603      	mov	r3, r0
 8009b0a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	if (res == FR_OK) {
 8009b0e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8009b12:	2b00      	cmp	r3, #0
 8009b14:	f040 818d 	bne.w	8009e32 <f_open+0x35a>
		dj.obj.fs = fs;
 8009b18:	693b      	ldr	r3, [r7, #16]
 8009b1a:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8009b1c:	68ba      	ldr	r2, [r7, #8]
 8009b1e:	f107 0314 	add.w	r3, r7, #20
 8009b22:	4611      	mov	r1, r2
 8009b24:	4618      	mov	r0, r3
 8009b26:	f7ff fc03 	bl	8009330 <follow_path>
 8009b2a:	4603      	mov	r3, r0
 8009b2c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8009b30:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8009b34:	2b00      	cmp	r3, #0
 8009b36:	d118      	bne.n	8009b6a <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8009b38:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8009b3c:	b25b      	sxtb	r3, r3
 8009b3e:	2b00      	cmp	r3, #0
 8009b40:	da03      	bge.n	8009b4a <f_open+0x72>
				res = FR_INVALID_NAME;
 8009b42:	2306      	movs	r3, #6
 8009b44:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8009b48:	e00f      	b.n	8009b6a <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8009b4a:	79fb      	ldrb	r3, [r7, #7]
 8009b4c:	2b01      	cmp	r3, #1
 8009b4e:	bf8c      	ite	hi
 8009b50:	2301      	movhi	r3, #1
 8009b52:	2300      	movls	r3, #0
 8009b54:	b2db      	uxtb	r3, r3
 8009b56:	461a      	mov	r2, r3
 8009b58:	f107 0314 	add.w	r3, r7, #20
 8009b5c:	4611      	mov	r1, r2
 8009b5e:	4618      	mov	r0, r3
 8009b60:	f7fe fbd8 	bl	8008314 <chk_lock>
 8009b64:	4603      	mov	r3, r0
 8009b66:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8009b6a:	79fb      	ldrb	r3, [r7, #7]
 8009b6c:	f003 031c 	and.w	r3, r3, #28
 8009b70:	2b00      	cmp	r3, #0
 8009b72:	d07f      	beq.n	8009c74 <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 8009b74:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8009b78:	2b00      	cmp	r3, #0
 8009b7a:	d017      	beq.n	8009bac <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8009b7c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8009b80:	2b04      	cmp	r3, #4
 8009b82:	d10e      	bne.n	8009ba2 <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8009b84:	f7fe fc22 	bl	80083cc <enq_lock>
 8009b88:	4603      	mov	r3, r0
 8009b8a:	2b00      	cmp	r3, #0
 8009b8c:	d006      	beq.n	8009b9c <f_open+0xc4>
 8009b8e:	f107 0314 	add.w	r3, r7, #20
 8009b92:	4618      	mov	r0, r3
 8009b94:	f7ff fb06 	bl	80091a4 <dir_register>
 8009b98:	4603      	mov	r3, r0
 8009b9a:	e000      	b.n	8009b9e <f_open+0xc6>
 8009b9c:	2312      	movs	r3, #18
 8009b9e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8009ba2:	79fb      	ldrb	r3, [r7, #7]
 8009ba4:	f043 0308 	orr.w	r3, r3, #8
 8009ba8:	71fb      	strb	r3, [r7, #7]
 8009baa:	e010      	b.n	8009bce <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8009bac:	7ebb      	ldrb	r3, [r7, #26]
 8009bae:	f003 0311 	and.w	r3, r3, #17
 8009bb2:	2b00      	cmp	r3, #0
 8009bb4:	d003      	beq.n	8009bbe <f_open+0xe6>
					res = FR_DENIED;
 8009bb6:	2307      	movs	r3, #7
 8009bb8:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8009bbc:	e007      	b.n	8009bce <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8009bbe:	79fb      	ldrb	r3, [r7, #7]
 8009bc0:	f003 0304 	and.w	r3, r3, #4
 8009bc4:	2b00      	cmp	r3, #0
 8009bc6:	d002      	beq.n	8009bce <f_open+0xf6>
 8009bc8:	2308      	movs	r3, #8
 8009bca:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8009bce:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8009bd2:	2b00      	cmp	r3, #0
 8009bd4:	d168      	bne.n	8009ca8 <f_open+0x1d0>
 8009bd6:	79fb      	ldrb	r3, [r7, #7]
 8009bd8:	f003 0308 	and.w	r3, r3, #8
 8009bdc:	2b00      	cmp	r3, #0
 8009bde:	d063      	beq.n	8009ca8 <f_open+0x1d0>
				dw = GET_FATTIME();
 8009be0:	f7fd ffbc 	bl	8007b5c <get_fattime>
 8009be4:	6538      	str	r0, [r7, #80]	@ 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8009be6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009be8:	330e      	adds	r3, #14
 8009bea:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8009bec:	4618      	mov	r0, r3
 8009bee:	f7fe fae7 	bl	80081c0 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8009bf2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009bf4:	3316      	adds	r3, #22
 8009bf6:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8009bf8:	4618      	mov	r0, r3
 8009bfa:	f7fe fae1 	bl	80081c0 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8009bfe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009c00:	330b      	adds	r3, #11
 8009c02:	2220      	movs	r2, #32
 8009c04:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8009c06:	693b      	ldr	r3, [r7, #16]
 8009c08:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009c0a:	4611      	mov	r1, r2
 8009c0c:	4618      	mov	r0, r3
 8009c0e:	f7ff fa35 	bl	800907c <ld_clust>
 8009c12:	64f8      	str	r0, [r7, #76]	@ 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8009c14:	693b      	ldr	r3, [r7, #16]
 8009c16:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8009c18:	2200      	movs	r2, #0
 8009c1a:	4618      	mov	r0, r3
 8009c1c:	f7ff fa4d 	bl	80090ba <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8009c20:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009c22:	331c      	adds	r3, #28
 8009c24:	2100      	movs	r1, #0
 8009c26:	4618      	mov	r0, r3
 8009c28:	f7fe faca 	bl	80081c0 <st_dword>
					fs->wflag = 1;
 8009c2c:	693b      	ldr	r3, [r7, #16]
 8009c2e:	2201      	movs	r2, #1
 8009c30:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8009c32:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009c34:	2b00      	cmp	r3, #0
 8009c36:	d037      	beq.n	8009ca8 <f_open+0x1d0>
						dw = fs->winsect;
 8009c38:	693b      	ldr	r3, [r7, #16]
 8009c3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009c3c:	653b      	str	r3, [r7, #80]	@ 0x50
						res = remove_chain(&dj.obj, cl, 0);
 8009c3e:	f107 0314 	add.w	r3, r7, #20
 8009c42:	2200      	movs	r2, #0
 8009c44:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8009c46:	4618      	mov	r0, r3
 8009c48:	f7fe ff60 	bl	8008b0c <remove_chain>
 8009c4c:	4603      	mov	r3, r0
 8009c4e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
						if (res == FR_OK) {
 8009c52:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8009c56:	2b00      	cmp	r3, #0
 8009c58:	d126      	bne.n	8009ca8 <f_open+0x1d0>
							res = move_window(fs, dw);
 8009c5a:	693b      	ldr	r3, [r7, #16]
 8009c5c:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8009c5e:	4618      	mov	r0, r3
 8009c60:	f7fe fd08 	bl	8008674 <move_window>
 8009c64:	4603      	mov	r3, r0
 8009c66:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8009c6a:	693b      	ldr	r3, [r7, #16]
 8009c6c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8009c6e:	3a01      	subs	r2, #1
 8009c70:	60da      	str	r2, [r3, #12]
 8009c72:	e019      	b.n	8009ca8 <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8009c74:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8009c78:	2b00      	cmp	r3, #0
 8009c7a:	d115      	bne.n	8009ca8 <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8009c7c:	7ebb      	ldrb	r3, [r7, #26]
 8009c7e:	f003 0310 	and.w	r3, r3, #16
 8009c82:	2b00      	cmp	r3, #0
 8009c84:	d003      	beq.n	8009c8e <f_open+0x1b6>
					res = FR_NO_FILE;
 8009c86:	2304      	movs	r3, #4
 8009c88:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8009c8c:	e00c      	b.n	8009ca8 <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8009c8e:	79fb      	ldrb	r3, [r7, #7]
 8009c90:	f003 0302 	and.w	r3, r3, #2
 8009c94:	2b00      	cmp	r3, #0
 8009c96:	d007      	beq.n	8009ca8 <f_open+0x1d0>
 8009c98:	7ebb      	ldrb	r3, [r7, #26]
 8009c9a:	f003 0301 	and.w	r3, r3, #1
 8009c9e:	2b00      	cmp	r3, #0
 8009ca0:	d002      	beq.n	8009ca8 <f_open+0x1d0>
						res = FR_DENIED;
 8009ca2:	2307      	movs	r3, #7
 8009ca4:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8009ca8:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8009cac:	2b00      	cmp	r3, #0
 8009cae:	d126      	bne.n	8009cfe <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8009cb0:	79fb      	ldrb	r3, [r7, #7]
 8009cb2:	f003 0308 	and.w	r3, r3, #8
 8009cb6:	2b00      	cmp	r3, #0
 8009cb8:	d003      	beq.n	8009cc2 <f_open+0x1ea>
				mode |= FA_MODIFIED;
 8009cba:	79fb      	ldrb	r3, [r7, #7]
 8009cbc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009cc0:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8009cc2:	693b      	ldr	r3, [r7, #16]
 8009cc4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009cc6:	68fb      	ldr	r3, [r7, #12]
 8009cc8:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 8009cca:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009ccc:	68fb      	ldr	r3, [r7, #12]
 8009cce:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8009cd0:	79fb      	ldrb	r3, [r7, #7]
 8009cd2:	2b01      	cmp	r3, #1
 8009cd4:	bf8c      	ite	hi
 8009cd6:	2301      	movhi	r3, #1
 8009cd8:	2300      	movls	r3, #0
 8009cda:	b2db      	uxtb	r3, r3
 8009cdc:	461a      	mov	r2, r3
 8009cde:	f107 0314 	add.w	r3, r7, #20
 8009ce2:	4611      	mov	r1, r2
 8009ce4:	4618      	mov	r0, r3
 8009ce6:	f7fe fb93 	bl	8008410 <inc_lock>
 8009cea:	4602      	mov	r2, r0
 8009cec:	68fb      	ldr	r3, [r7, #12]
 8009cee:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8009cf0:	68fb      	ldr	r3, [r7, #12]
 8009cf2:	691b      	ldr	r3, [r3, #16]
 8009cf4:	2b00      	cmp	r3, #0
 8009cf6:	d102      	bne.n	8009cfe <f_open+0x226>
 8009cf8:	2302      	movs	r3, #2
 8009cfa:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 8009cfe:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8009d02:	2b00      	cmp	r3, #0
 8009d04:	f040 8095 	bne.w	8009e32 <f_open+0x35a>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8009d08:	693b      	ldr	r3, [r7, #16]
 8009d0a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009d0c:	4611      	mov	r1, r2
 8009d0e:	4618      	mov	r0, r3
 8009d10:	f7ff f9b4 	bl	800907c <ld_clust>
 8009d14:	4602      	mov	r2, r0
 8009d16:	68fb      	ldr	r3, [r7, #12]
 8009d18:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8009d1a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009d1c:	331c      	adds	r3, #28
 8009d1e:	4618      	mov	r0, r3
 8009d20:	f7fe fa10 	bl	8008144 <ld_dword>
 8009d24:	4602      	mov	r2, r0
 8009d26:	68fb      	ldr	r3, [r7, #12]
 8009d28:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8009d2a:	68fb      	ldr	r3, [r7, #12]
 8009d2c:	2200      	movs	r2, #0
 8009d2e:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8009d30:	693a      	ldr	r2, [r7, #16]
 8009d32:	68fb      	ldr	r3, [r7, #12]
 8009d34:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8009d36:	693b      	ldr	r3, [r7, #16]
 8009d38:	88da      	ldrh	r2, [r3, #6]
 8009d3a:	68fb      	ldr	r3, [r7, #12]
 8009d3c:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8009d3e:	68fb      	ldr	r3, [r7, #12]
 8009d40:	79fa      	ldrb	r2, [r7, #7]
 8009d42:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8009d44:	68fb      	ldr	r3, [r7, #12]
 8009d46:	2200      	movs	r2, #0
 8009d48:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8009d4a:	68fb      	ldr	r3, [r7, #12]
 8009d4c:	2200      	movs	r2, #0
 8009d4e:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8009d50:	68fb      	ldr	r3, [r7, #12]
 8009d52:	2200      	movs	r2, #0
 8009d54:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8009d56:	68fb      	ldr	r3, [r7, #12]
 8009d58:	3330      	adds	r3, #48	@ 0x30
 8009d5a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009d5e:	2100      	movs	r1, #0
 8009d60:	4618      	mov	r0, r3
 8009d62:	f7fe fa7a 	bl	800825a <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8009d66:	79fb      	ldrb	r3, [r7, #7]
 8009d68:	f003 0320 	and.w	r3, r3, #32
 8009d6c:	2b00      	cmp	r3, #0
 8009d6e:	d060      	beq.n	8009e32 <f_open+0x35a>
 8009d70:	68fb      	ldr	r3, [r7, #12]
 8009d72:	68db      	ldr	r3, [r3, #12]
 8009d74:	2b00      	cmp	r3, #0
 8009d76:	d05c      	beq.n	8009e32 <f_open+0x35a>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8009d78:	68fb      	ldr	r3, [r7, #12]
 8009d7a:	68da      	ldr	r2, [r3, #12]
 8009d7c:	68fb      	ldr	r3, [r7, #12]
 8009d7e:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8009d80:	693b      	ldr	r3, [r7, #16]
 8009d82:	895b      	ldrh	r3, [r3, #10]
 8009d84:	025b      	lsls	r3, r3, #9
 8009d86:	64bb      	str	r3, [r7, #72]	@ 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8009d88:	68fb      	ldr	r3, [r7, #12]
 8009d8a:	689b      	ldr	r3, [r3, #8]
 8009d8c:	65bb      	str	r3, [r7, #88]	@ 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8009d8e:	68fb      	ldr	r3, [r7, #12]
 8009d90:	68db      	ldr	r3, [r3, #12]
 8009d92:	657b      	str	r3, [r7, #84]	@ 0x54
 8009d94:	e016      	b.n	8009dc4 <f_open+0x2ec>
					clst = get_fat(&fp->obj, clst);
 8009d96:	68fb      	ldr	r3, [r7, #12]
 8009d98:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8009d9a:	4618      	mov	r0, r3
 8009d9c:	f7fe fd25 	bl	80087ea <get_fat>
 8009da0:	65b8      	str	r0, [r7, #88]	@ 0x58
					if (clst <= 1) res = FR_INT_ERR;
 8009da2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009da4:	2b01      	cmp	r3, #1
 8009da6:	d802      	bhi.n	8009dae <f_open+0x2d6>
 8009da8:	2302      	movs	r3, #2
 8009daa:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8009dae:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009db0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009db4:	d102      	bne.n	8009dbc <f_open+0x2e4>
 8009db6:	2301      	movs	r3, #1
 8009db8:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8009dbc:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8009dbe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009dc0:	1ad3      	subs	r3, r2, r3
 8009dc2:	657b      	str	r3, [r7, #84]	@ 0x54
 8009dc4:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8009dc8:	2b00      	cmp	r3, #0
 8009dca:	d103      	bne.n	8009dd4 <f_open+0x2fc>
 8009dcc:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8009dce:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009dd0:	429a      	cmp	r2, r3
 8009dd2:	d8e0      	bhi.n	8009d96 <f_open+0x2be>
				}
				fp->clust = clst;
 8009dd4:	68fb      	ldr	r3, [r7, #12]
 8009dd6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009dd8:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8009dda:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8009dde:	2b00      	cmp	r3, #0
 8009de0:	d127      	bne.n	8009e32 <f_open+0x35a>
 8009de2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009de4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009de8:	2b00      	cmp	r3, #0
 8009dea:	d022      	beq.n	8009e32 <f_open+0x35a>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8009dec:	693b      	ldr	r3, [r7, #16]
 8009dee:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8009df0:	4618      	mov	r0, r3
 8009df2:	f7fe fcdb 	bl	80087ac <clust2sect>
 8009df6:	6478      	str	r0, [r7, #68]	@ 0x44
 8009df8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009dfa:	2b00      	cmp	r3, #0
 8009dfc:	d103      	bne.n	8009e06 <f_open+0x32e>
						res = FR_INT_ERR;
 8009dfe:	2302      	movs	r3, #2
 8009e00:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8009e04:	e015      	b.n	8009e32 <f_open+0x35a>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8009e06:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009e08:	0a5a      	lsrs	r2, r3, #9
 8009e0a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009e0c:	441a      	add	r2, r3
 8009e0e:	68fb      	ldr	r3, [r7, #12]
 8009e10:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8009e12:	693b      	ldr	r3, [r7, #16]
 8009e14:	7858      	ldrb	r0, [r3, #1]
 8009e16:	68fb      	ldr	r3, [r7, #12]
 8009e18:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8009e1c:	68fb      	ldr	r3, [r7, #12]
 8009e1e:	6a1a      	ldr	r2, [r3, #32]
 8009e20:	2301      	movs	r3, #1
 8009e22:	f7fe f919 	bl	8008058 <disk_read>
 8009e26:	4603      	mov	r3, r0
 8009e28:	2b00      	cmp	r3, #0
 8009e2a:	d002      	beq.n	8009e32 <f_open+0x35a>
 8009e2c:	2301      	movs	r3, #1
 8009e2e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8009e32:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8009e36:	2b00      	cmp	r3, #0
 8009e38:	d002      	beq.n	8009e40 <f_open+0x368>
 8009e3a:	68fb      	ldr	r3, [r7, #12]
 8009e3c:	2200      	movs	r2, #0
 8009e3e:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8009e40:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 8009e44:	4618      	mov	r0, r3
 8009e46:	3760      	adds	r7, #96	@ 0x60
 8009e48:	46bd      	mov	sp, r7
 8009e4a:	bd80      	pop	{r7, pc}

08009e4c <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8009e4c:	b580      	push	{r7, lr}
 8009e4e:	b08e      	sub	sp, #56	@ 0x38
 8009e50:	af00      	add	r7, sp, #0
 8009e52:	60f8      	str	r0, [r7, #12]
 8009e54:	60b9      	str	r1, [r7, #8]
 8009e56:	607a      	str	r2, [r7, #4]
 8009e58:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 8009e5a:	68bb      	ldr	r3, [r7, #8]
 8009e5c:	627b      	str	r3, [r7, #36]	@ 0x24


	*br = 0;	/* Clear read byte counter */
 8009e5e:	683b      	ldr	r3, [r7, #0]
 8009e60:	2200      	movs	r2, #0
 8009e62:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8009e64:	68fb      	ldr	r3, [r7, #12]
 8009e66:	f107 0214 	add.w	r2, r7, #20
 8009e6a:	4611      	mov	r1, r2
 8009e6c:	4618      	mov	r0, r3
 8009e6e:	f7ff fdb7 	bl	80099e0 <validate>
 8009e72:	4603      	mov	r3, r0
 8009e74:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8009e78:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8009e7c:	2b00      	cmp	r3, #0
 8009e7e:	d107      	bne.n	8009e90 <f_read+0x44>
 8009e80:	68fb      	ldr	r3, [r7, #12]
 8009e82:	7d5b      	ldrb	r3, [r3, #21]
 8009e84:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8009e88:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8009e8c:	2b00      	cmp	r3, #0
 8009e8e:	d002      	beq.n	8009e96 <f_read+0x4a>
 8009e90:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8009e94:	e115      	b.n	800a0c2 <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8009e96:	68fb      	ldr	r3, [r7, #12]
 8009e98:	7d1b      	ldrb	r3, [r3, #20]
 8009e9a:	f003 0301 	and.w	r3, r3, #1
 8009e9e:	2b00      	cmp	r3, #0
 8009ea0:	d101      	bne.n	8009ea6 <f_read+0x5a>
 8009ea2:	2307      	movs	r3, #7
 8009ea4:	e10d      	b.n	800a0c2 <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 8009ea6:	68fb      	ldr	r3, [r7, #12]
 8009ea8:	68da      	ldr	r2, [r3, #12]
 8009eaa:	68fb      	ldr	r3, [r7, #12]
 8009eac:	699b      	ldr	r3, [r3, #24]
 8009eae:	1ad3      	subs	r3, r2, r3
 8009eb0:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8009eb2:	687a      	ldr	r2, [r7, #4]
 8009eb4:	6a3b      	ldr	r3, [r7, #32]
 8009eb6:	429a      	cmp	r2, r3
 8009eb8:	f240 80fe 	bls.w	800a0b8 <f_read+0x26c>
 8009ebc:	6a3b      	ldr	r3, [r7, #32]
 8009ebe:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8009ec0:	e0fa      	b.n	800a0b8 <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8009ec2:	68fb      	ldr	r3, [r7, #12]
 8009ec4:	699b      	ldr	r3, [r3, #24]
 8009ec6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009eca:	2b00      	cmp	r3, #0
 8009ecc:	f040 80c6 	bne.w	800a05c <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8009ed0:	68fb      	ldr	r3, [r7, #12]
 8009ed2:	699b      	ldr	r3, [r3, #24]
 8009ed4:	0a5b      	lsrs	r3, r3, #9
 8009ed6:	697a      	ldr	r2, [r7, #20]
 8009ed8:	8952      	ldrh	r2, [r2, #10]
 8009eda:	3a01      	subs	r2, #1
 8009edc:	4013      	ands	r3, r2
 8009ede:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8009ee0:	69fb      	ldr	r3, [r7, #28]
 8009ee2:	2b00      	cmp	r3, #0
 8009ee4:	d12f      	bne.n	8009f46 <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8009ee6:	68fb      	ldr	r3, [r7, #12]
 8009ee8:	699b      	ldr	r3, [r3, #24]
 8009eea:	2b00      	cmp	r3, #0
 8009eec:	d103      	bne.n	8009ef6 <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8009eee:	68fb      	ldr	r3, [r7, #12]
 8009ef0:	689b      	ldr	r3, [r3, #8]
 8009ef2:	633b      	str	r3, [r7, #48]	@ 0x30
 8009ef4:	e013      	b.n	8009f1e <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8009ef6:	68fb      	ldr	r3, [r7, #12]
 8009ef8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009efa:	2b00      	cmp	r3, #0
 8009efc:	d007      	beq.n	8009f0e <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8009efe:	68fb      	ldr	r3, [r7, #12]
 8009f00:	699b      	ldr	r3, [r3, #24]
 8009f02:	4619      	mov	r1, r3
 8009f04:	68f8      	ldr	r0, [r7, #12]
 8009f06:	f7fe fefe 	bl	8008d06 <clmt_clust>
 8009f0a:	6338      	str	r0, [r7, #48]	@ 0x30
 8009f0c:	e007      	b.n	8009f1e <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8009f0e:	68fa      	ldr	r2, [r7, #12]
 8009f10:	68fb      	ldr	r3, [r7, #12]
 8009f12:	69db      	ldr	r3, [r3, #28]
 8009f14:	4619      	mov	r1, r3
 8009f16:	4610      	mov	r0, r2
 8009f18:	f7fe fc67 	bl	80087ea <get_fat>
 8009f1c:	6338      	str	r0, [r7, #48]	@ 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8009f1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f20:	2b01      	cmp	r3, #1
 8009f22:	d804      	bhi.n	8009f2e <f_read+0xe2>
 8009f24:	68fb      	ldr	r3, [r7, #12]
 8009f26:	2202      	movs	r2, #2
 8009f28:	755a      	strb	r2, [r3, #21]
 8009f2a:	2302      	movs	r3, #2
 8009f2c:	e0c9      	b.n	800a0c2 <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8009f2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f34:	d104      	bne.n	8009f40 <f_read+0xf4>
 8009f36:	68fb      	ldr	r3, [r7, #12]
 8009f38:	2201      	movs	r2, #1
 8009f3a:	755a      	strb	r2, [r3, #21]
 8009f3c:	2301      	movs	r3, #1
 8009f3e:	e0c0      	b.n	800a0c2 <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 8009f40:	68fb      	ldr	r3, [r7, #12]
 8009f42:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009f44:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8009f46:	697a      	ldr	r2, [r7, #20]
 8009f48:	68fb      	ldr	r3, [r7, #12]
 8009f4a:	69db      	ldr	r3, [r3, #28]
 8009f4c:	4619      	mov	r1, r3
 8009f4e:	4610      	mov	r0, r2
 8009f50:	f7fe fc2c 	bl	80087ac <clust2sect>
 8009f54:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8009f56:	69bb      	ldr	r3, [r7, #24]
 8009f58:	2b00      	cmp	r3, #0
 8009f5a:	d104      	bne.n	8009f66 <f_read+0x11a>
 8009f5c:	68fb      	ldr	r3, [r7, #12]
 8009f5e:	2202      	movs	r2, #2
 8009f60:	755a      	strb	r2, [r3, #21]
 8009f62:	2302      	movs	r3, #2
 8009f64:	e0ad      	b.n	800a0c2 <f_read+0x276>
			sect += csect;
 8009f66:	69ba      	ldr	r2, [r7, #24]
 8009f68:	69fb      	ldr	r3, [r7, #28]
 8009f6a:	4413      	add	r3, r2
 8009f6c:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	0a5b      	lsrs	r3, r3, #9
 8009f72:	62bb      	str	r3, [r7, #40]	@ 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 8009f74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009f76:	2b00      	cmp	r3, #0
 8009f78:	d039      	beq.n	8009fee <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8009f7a:	69fa      	ldr	r2, [r7, #28]
 8009f7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009f7e:	4413      	add	r3, r2
 8009f80:	697a      	ldr	r2, [r7, #20]
 8009f82:	8952      	ldrh	r2, [r2, #10]
 8009f84:	4293      	cmp	r3, r2
 8009f86:	d905      	bls.n	8009f94 <f_read+0x148>
					cc = fs->csize - csect;
 8009f88:	697b      	ldr	r3, [r7, #20]
 8009f8a:	895b      	ldrh	r3, [r3, #10]
 8009f8c:	461a      	mov	r2, r3
 8009f8e:	69fb      	ldr	r3, [r7, #28]
 8009f90:	1ad3      	subs	r3, r2, r3
 8009f92:	62bb      	str	r3, [r7, #40]	@ 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8009f94:	697b      	ldr	r3, [r7, #20]
 8009f96:	7858      	ldrb	r0, [r3, #1]
 8009f98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009f9a:	69ba      	ldr	r2, [r7, #24]
 8009f9c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8009f9e:	f7fe f85b 	bl	8008058 <disk_read>
 8009fa2:	4603      	mov	r3, r0
 8009fa4:	2b00      	cmp	r3, #0
 8009fa6:	d004      	beq.n	8009fb2 <f_read+0x166>
 8009fa8:	68fb      	ldr	r3, [r7, #12]
 8009faa:	2201      	movs	r2, #1
 8009fac:	755a      	strb	r2, [r3, #21]
 8009fae:	2301      	movs	r3, #1
 8009fb0:	e087      	b.n	800a0c2 <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8009fb2:	68fb      	ldr	r3, [r7, #12]
 8009fb4:	7d1b      	ldrb	r3, [r3, #20]
 8009fb6:	b25b      	sxtb	r3, r3
 8009fb8:	2b00      	cmp	r3, #0
 8009fba:	da14      	bge.n	8009fe6 <f_read+0x19a>
 8009fbc:	68fb      	ldr	r3, [r7, #12]
 8009fbe:	6a1a      	ldr	r2, [r3, #32]
 8009fc0:	69bb      	ldr	r3, [r7, #24]
 8009fc2:	1ad3      	subs	r3, r2, r3
 8009fc4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009fc6:	429a      	cmp	r2, r3
 8009fc8:	d90d      	bls.n	8009fe6 <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 8009fca:	68fb      	ldr	r3, [r7, #12]
 8009fcc:	6a1a      	ldr	r2, [r3, #32]
 8009fce:	69bb      	ldr	r3, [r7, #24]
 8009fd0:	1ad3      	subs	r3, r2, r3
 8009fd2:	025b      	lsls	r3, r3, #9
 8009fd4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009fd6:	18d0      	adds	r0, r2, r3
 8009fd8:	68fb      	ldr	r3, [r7, #12]
 8009fda:	3330      	adds	r3, #48	@ 0x30
 8009fdc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009fe0:	4619      	mov	r1, r3
 8009fe2:	f7fe f919 	bl	8008218 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8009fe6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009fe8:	025b      	lsls	r3, r3, #9
 8009fea:	62fb      	str	r3, [r7, #44]	@ 0x2c
				continue;
 8009fec:	e050      	b.n	800a090 <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 8009fee:	68fb      	ldr	r3, [r7, #12]
 8009ff0:	6a1b      	ldr	r3, [r3, #32]
 8009ff2:	69ba      	ldr	r2, [r7, #24]
 8009ff4:	429a      	cmp	r2, r3
 8009ff6:	d02e      	beq.n	800a056 <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8009ff8:	68fb      	ldr	r3, [r7, #12]
 8009ffa:	7d1b      	ldrb	r3, [r3, #20]
 8009ffc:	b25b      	sxtb	r3, r3
 8009ffe:	2b00      	cmp	r3, #0
 800a000:	da18      	bge.n	800a034 <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800a002:	697b      	ldr	r3, [r7, #20]
 800a004:	7858      	ldrb	r0, [r3, #1]
 800a006:	68fb      	ldr	r3, [r7, #12]
 800a008:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800a00c:	68fb      	ldr	r3, [r7, #12]
 800a00e:	6a1a      	ldr	r2, [r3, #32]
 800a010:	2301      	movs	r3, #1
 800a012:	f7fe f841 	bl	8008098 <disk_write>
 800a016:	4603      	mov	r3, r0
 800a018:	2b00      	cmp	r3, #0
 800a01a:	d004      	beq.n	800a026 <f_read+0x1da>
 800a01c:	68fb      	ldr	r3, [r7, #12]
 800a01e:	2201      	movs	r2, #1
 800a020:	755a      	strb	r2, [r3, #21]
 800a022:	2301      	movs	r3, #1
 800a024:	e04d      	b.n	800a0c2 <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 800a026:	68fb      	ldr	r3, [r7, #12]
 800a028:	7d1b      	ldrb	r3, [r3, #20]
 800a02a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a02e:	b2da      	uxtb	r2, r3
 800a030:	68fb      	ldr	r3, [r7, #12]
 800a032:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800a034:	697b      	ldr	r3, [r7, #20]
 800a036:	7858      	ldrb	r0, [r3, #1]
 800a038:	68fb      	ldr	r3, [r7, #12]
 800a03a:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800a03e:	2301      	movs	r3, #1
 800a040:	69ba      	ldr	r2, [r7, #24]
 800a042:	f7fe f809 	bl	8008058 <disk_read>
 800a046:	4603      	mov	r3, r0
 800a048:	2b00      	cmp	r3, #0
 800a04a:	d004      	beq.n	800a056 <f_read+0x20a>
 800a04c:	68fb      	ldr	r3, [r7, #12]
 800a04e:	2201      	movs	r2, #1
 800a050:	755a      	strb	r2, [r3, #21]
 800a052:	2301      	movs	r3, #1
 800a054:	e035      	b.n	800a0c2 <f_read+0x276>
			}
#endif
			fp->sect = sect;
 800a056:	68fb      	ldr	r3, [r7, #12]
 800a058:	69ba      	ldr	r2, [r7, #24]
 800a05a:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800a05c:	68fb      	ldr	r3, [r7, #12]
 800a05e:	699b      	ldr	r3, [r3, #24]
 800a060:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a064:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 800a068:	62fb      	str	r3, [r7, #44]	@ 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800a06a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	429a      	cmp	r2, r3
 800a070:	d901      	bls.n	800a076 <f_read+0x22a>
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	62fb      	str	r3, [r7, #44]	@ 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800a076:	68fb      	ldr	r3, [r7, #12]
 800a078:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800a07c:	68fb      	ldr	r3, [r7, #12]
 800a07e:	699b      	ldr	r3, [r3, #24]
 800a080:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a084:	4413      	add	r3, r2
 800a086:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a088:	4619      	mov	r1, r3
 800a08a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800a08c:	f7fe f8c4 	bl	8008218 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800a090:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a092:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a094:	4413      	add	r3, r2
 800a096:	627b      	str	r3, [r7, #36]	@ 0x24
 800a098:	68fb      	ldr	r3, [r7, #12]
 800a09a:	699a      	ldr	r2, [r3, #24]
 800a09c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a09e:	441a      	add	r2, r3
 800a0a0:	68fb      	ldr	r3, [r7, #12]
 800a0a2:	619a      	str	r2, [r3, #24]
 800a0a4:	683b      	ldr	r3, [r7, #0]
 800a0a6:	681a      	ldr	r2, [r3, #0]
 800a0a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a0aa:	441a      	add	r2, r3
 800a0ac:	683b      	ldr	r3, [r7, #0]
 800a0ae:	601a      	str	r2, [r3, #0]
 800a0b0:	687a      	ldr	r2, [r7, #4]
 800a0b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a0b4:	1ad3      	subs	r3, r2, r3
 800a0b6:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	2b00      	cmp	r3, #0
 800a0bc:	f47f af01 	bne.w	8009ec2 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800a0c0:	2300      	movs	r3, #0
}
 800a0c2:	4618      	mov	r0, r3
 800a0c4:	3738      	adds	r7, #56	@ 0x38
 800a0c6:	46bd      	mov	sp, r7
 800a0c8:	bd80      	pop	{r7, pc}

0800a0ca <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800a0ca:	b580      	push	{r7, lr}
 800a0cc:	b08c      	sub	sp, #48	@ 0x30
 800a0ce:	af00      	add	r7, sp, #0
 800a0d0:	60f8      	str	r0, [r7, #12]
 800a0d2:	60b9      	str	r1, [r7, #8]
 800a0d4:	607a      	str	r2, [r7, #4]
 800a0d6:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800a0d8:	68bb      	ldr	r3, [r7, #8]
 800a0da:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800a0dc:	683b      	ldr	r3, [r7, #0]
 800a0de:	2200      	movs	r2, #0
 800a0e0:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800a0e2:	68fb      	ldr	r3, [r7, #12]
 800a0e4:	f107 0210 	add.w	r2, r7, #16
 800a0e8:	4611      	mov	r1, r2
 800a0ea:	4618      	mov	r0, r3
 800a0ec:	f7ff fc78 	bl	80099e0 <validate>
 800a0f0:	4603      	mov	r3, r0
 800a0f2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800a0f6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800a0fa:	2b00      	cmp	r3, #0
 800a0fc:	d107      	bne.n	800a10e <f_write+0x44>
 800a0fe:	68fb      	ldr	r3, [r7, #12]
 800a100:	7d5b      	ldrb	r3, [r3, #21]
 800a102:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800a106:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800a10a:	2b00      	cmp	r3, #0
 800a10c:	d002      	beq.n	800a114 <f_write+0x4a>
 800a10e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800a112:	e14b      	b.n	800a3ac <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800a114:	68fb      	ldr	r3, [r7, #12]
 800a116:	7d1b      	ldrb	r3, [r3, #20]
 800a118:	f003 0302 	and.w	r3, r3, #2
 800a11c:	2b00      	cmp	r3, #0
 800a11e:	d101      	bne.n	800a124 <f_write+0x5a>
 800a120:	2307      	movs	r3, #7
 800a122:	e143      	b.n	800a3ac <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800a124:	68fb      	ldr	r3, [r7, #12]
 800a126:	699a      	ldr	r2, [r3, #24]
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	441a      	add	r2, r3
 800a12c:	68fb      	ldr	r3, [r7, #12]
 800a12e:	699b      	ldr	r3, [r3, #24]
 800a130:	429a      	cmp	r2, r3
 800a132:	f080 812d 	bcs.w	800a390 <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800a136:	68fb      	ldr	r3, [r7, #12]
 800a138:	699b      	ldr	r3, [r3, #24]
 800a13a:	43db      	mvns	r3, r3
 800a13c:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800a13e:	e127      	b.n	800a390 <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800a140:	68fb      	ldr	r3, [r7, #12]
 800a142:	699b      	ldr	r3, [r3, #24]
 800a144:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a148:	2b00      	cmp	r3, #0
 800a14a:	f040 80e3 	bne.w	800a314 <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800a14e:	68fb      	ldr	r3, [r7, #12]
 800a150:	699b      	ldr	r3, [r3, #24]
 800a152:	0a5b      	lsrs	r3, r3, #9
 800a154:	693a      	ldr	r2, [r7, #16]
 800a156:	8952      	ldrh	r2, [r2, #10]
 800a158:	3a01      	subs	r2, #1
 800a15a:	4013      	ands	r3, r2
 800a15c:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800a15e:	69bb      	ldr	r3, [r7, #24]
 800a160:	2b00      	cmp	r3, #0
 800a162:	d143      	bne.n	800a1ec <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800a164:	68fb      	ldr	r3, [r7, #12]
 800a166:	699b      	ldr	r3, [r3, #24]
 800a168:	2b00      	cmp	r3, #0
 800a16a:	d10c      	bne.n	800a186 <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800a16c:	68fb      	ldr	r3, [r7, #12]
 800a16e:	689b      	ldr	r3, [r3, #8]
 800a170:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800a172:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a174:	2b00      	cmp	r3, #0
 800a176:	d11a      	bne.n	800a1ae <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800a178:	68fb      	ldr	r3, [r7, #12]
 800a17a:	2100      	movs	r1, #0
 800a17c:	4618      	mov	r0, r3
 800a17e:	f7fe fd2a 	bl	8008bd6 <create_chain>
 800a182:	62b8      	str	r0, [r7, #40]	@ 0x28
 800a184:	e013      	b.n	800a1ae <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800a186:	68fb      	ldr	r3, [r7, #12]
 800a188:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a18a:	2b00      	cmp	r3, #0
 800a18c:	d007      	beq.n	800a19e <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800a18e:	68fb      	ldr	r3, [r7, #12]
 800a190:	699b      	ldr	r3, [r3, #24]
 800a192:	4619      	mov	r1, r3
 800a194:	68f8      	ldr	r0, [r7, #12]
 800a196:	f7fe fdb6 	bl	8008d06 <clmt_clust>
 800a19a:	62b8      	str	r0, [r7, #40]	@ 0x28
 800a19c:	e007      	b.n	800a1ae <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800a19e:	68fa      	ldr	r2, [r7, #12]
 800a1a0:	68fb      	ldr	r3, [r7, #12]
 800a1a2:	69db      	ldr	r3, [r3, #28]
 800a1a4:	4619      	mov	r1, r3
 800a1a6:	4610      	mov	r0, r2
 800a1a8:	f7fe fd15 	bl	8008bd6 <create_chain>
 800a1ac:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800a1ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a1b0:	2b00      	cmp	r3, #0
 800a1b2:	f000 80f2 	beq.w	800a39a <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800a1b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a1b8:	2b01      	cmp	r3, #1
 800a1ba:	d104      	bne.n	800a1c6 <f_write+0xfc>
 800a1bc:	68fb      	ldr	r3, [r7, #12]
 800a1be:	2202      	movs	r2, #2
 800a1c0:	755a      	strb	r2, [r3, #21]
 800a1c2:	2302      	movs	r3, #2
 800a1c4:	e0f2      	b.n	800a3ac <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800a1c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a1c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a1cc:	d104      	bne.n	800a1d8 <f_write+0x10e>
 800a1ce:	68fb      	ldr	r3, [r7, #12]
 800a1d0:	2201      	movs	r2, #1
 800a1d2:	755a      	strb	r2, [r3, #21]
 800a1d4:	2301      	movs	r3, #1
 800a1d6:	e0e9      	b.n	800a3ac <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 800a1d8:	68fb      	ldr	r3, [r7, #12]
 800a1da:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a1dc:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800a1de:	68fb      	ldr	r3, [r7, #12]
 800a1e0:	689b      	ldr	r3, [r3, #8]
 800a1e2:	2b00      	cmp	r3, #0
 800a1e4:	d102      	bne.n	800a1ec <f_write+0x122>
 800a1e6:	68fb      	ldr	r3, [r7, #12]
 800a1e8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a1ea:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800a1ec:	68fb      	ldr	r3, [r7, #12]
 800a1ee:	7d1b      	ldrb	r3, [r3, #20]
 800a1f0:	b25b      	sxtb	r3, r3
 800a1f2:	2b00      	cmp	r3, #0
 800a1f4:	da18      	bge.n	800a228 <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800a1f6:	693b      	ldr	r3, [r7, #16]
 800a1f8:	7858      	ldrb	r0, [r3, #1]
 800a1fa:	68fb      	ldr	r3, [r7, #12]
 800a1fc:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800a200:	68fb      	ldr	r3, [r7, #12]
 800a202:	6a1a      	ldr	r2, [r3, #32]
 800a204:	2301      	movs	r3, #1
 800a206:	f7fd ff47 	bl	8008098 <disk_write>
 800a20a:	4603      	mov	r3, r0
 800a20c:	2b00      	cmp	r3, #0
 800a20e:	d004      	beq.n	800a21a <f_write+0x150>
 800a210:	68fb      	ldr	r3, [r7, #12]
 800a212:	2201      	movs	r2, #1
 800a214:	755a      	strb	r2, [r3, #21]
 800a216:	2301      	movs	r3, #1
 800a218:	e0c8      	b.n	800a3ac <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 800a21a:	68fb      	ldr	r3, [r7, #12]
 800a21c:	7d1b      	ldrb	r3, [r3, #20]
 800a21e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a222:	b2da      	uxtb	r2, r3
 800a224:	68fb      	ldr	r3, [r7, #12]
 800a226:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800a228:	693a      	ldr	r2, [r7, #16]
 800a22a:	68fb      	ldr	r3, [r7, #12]
 800a22c:	69db      	ldr	r3, [r3, #28]
 800a22e:	4619      	mov	r1, r3
 800a230:	4610      	mov	r0, r2
 800a232:	f7fe fabb 	bl	80087ac <clust2sect>
 800a236:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800a238:	697b      	ldr	r3, [r7, #20]
 800a23a:	2b00      	cmp	r3, #0
 800a23c:	d104      	bne.n	800a248 <f_write+0x17e>
 800a23e:	68fb      	ldr	r3, [r7, #12]
 800a240:	2202      	movs	r2, #2
 800a242:	755a      	strb	r2, [r3, #21]
 800a244:	2302      	movs	r3, #2
 800a246:	e0b1      	b.n	800a3ac <f_write+0x2e2>
			sect += csect;
 800a248:	697a      	ldr	r2, [r7, #20]
 800a24a:	69bb      	ldr	r3, [r7, #24]
 800a24c:	4413      	add	r3, r2
 800a24e:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	0a5b      	lsrs	r3, r3, #9
 800a254:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800a256:	6a3b      	ldr	r3, [r7, #32]
 800a258:	2b00      	cmp	r3, #0
 800a25a:	d03c      	beq.n	800a2d6 <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800a25c:	69ba      	ldr	r2, [r7, #24]
 800a25e:	6a3b      	ldr	r3, [r7, #32]
 800a260:	4413      	add	r3, r2
 800a262:	693a      	ldr	r2, [r7, #16]
 800a264:	8952      	ldrh	r2, [r2, #10]
 800a266:	4293      	cmp	r3, r2
 800a268:	d905      	bls.n	800a276 <f_write+0x1ac>
					cc = fs->csize - csect;
 800a26a:	693b      	ldr	r3, [r7, #16]
 800a26c:	895b      	ldrh	r3, [r3, #10]
 800a26e:	461a      	mov	r2, r3
 800a270:	69bb      	ldr	r3, [r7, #24]
 800a272:	1ad3      	subs	r3, r2, r3
 800a274:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800a276:	693b      	ldr	r3, [r7, #16]
 800a278:	7858      	ldrb	r0, [r3, #1]
 800a27a:	6a3b      	ldr	r3, [r7, #32]
 800a27c:	697a      	ldr	r2, [r7, #20]
 800a27e:	69f9      	ldr	r1, [r7, #28]
 800a280:	f7fd ff0a 	bl	8008098 <disk_write>
 800a284:	4603      	mov	r3, r0
 800a286:	2b00      	cmp	r3, #0
 800a288:	d004      	beq.n	800a294 <f_write+0x1ca>
 800a28a:	68fb      	ldr	r3, [r7, #12]
 800a28c:	2201      	movs	r2, #1
 800a28e:	755a      	strb	r2, [r3, #21]
 800a290:	2301      	movs	r3, #1
 800a292:	e08b      	b.n	800a3ac <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800a294:	68fb      	ldr	r3, [r7, #12]
 800a296:	6a1a      	ldr	r2, [r3, #32]
 800a298:	697b      	ldr	r3, [r7, #20]
 800a29a:	1ad3      	subs	r3, r2, r3
 800a29c:	6a3a      	ldr	r2, [r7, #32]
 800a29e:	429a      	cmp	r2, r3
 800a2a0:	d915      	bls.n	800a2ce <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800a2a2:	68fb      	ldr	r3, [r7, #12]
 800a2a4:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 800a2a8:	68fb      	ldr	r3, [r7, #12]
 800a2aa:	6a1a      	ldr	r2, [r3, #32]
 800a2ac:	697b      	ldr	r3, [r7, #20]
 800a2ae:	1ad3      	subs	r3, r2, r3
 800a2b0:	025b      	lsls	r3, r3, #9
 800a2b2:	69fa      	ldr	r2, [r7, #28]
 800a2b4:	4413      	add	r3, r2
 800a2b6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a2ba:	4619      	mov	r1, r3
 800a2bc:	f7fd ffac 	bl	8008218 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800a2c0:	68fb      	ldr	r3, [r7, #12]
 800a2c2:	7d1b      	ldrb	r3, [r3, #20]
 800a2c4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a2c8:	b2da      	uxtb	r2, r3
 800a2ca:	68fb      	ldr	r3, [r7, #12]
 800a2cc:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800a2ce:	6a3b      	ldr	r3, [r7, #32]
 800a2d0:	025b      	lsls	r3, r3, #9
 800a2d2:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 800a2d4:	e03f      	b.n	800a356 <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800a2d6:	68fb      	ldr	r3, [r7, #12]
 800a2d8:	6a1b      	ldr	r3, [r3, #32]
 800a2da:	697a      	ldr	r2, [r7, #20]
 800a2dc:	429a      	cmp	r2, r3
 800a2de:	d016      	beq.n	800a30e <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 800a2e0:	68fb      	ldr	r3, [r7, #12]
 800a2e2:	699a      	ldr	r2, [r3, #24]
 800a2e4:	68fb      	ldr	r3, [r7, #12]
 800a2e6:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800a2e8:	429a      	cmp	r2, r3
 800a2ea:	d210      	bcs.n	800a30e <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800a2ec:	693b      	ldr	r3, [r7, #16]
 800a2ee:	7858      	ldrb	r0, [r3, #1]
 800a2f0:	68fb      	ldr	r3, [r7, #12]
 800a2f2:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800a2f6:	2301      	movs	r3, #1
 800a2f8:	697a      	ldr	r2, [r7, #20]
 800a2fa:	f7fd fead 	bl	8008058 <disk_read>
 800a2fe:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800a300:	2b00      	cmp	r3, #0
 800a302:	d004      	beq.n	800a30e <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 800a304:	68fb      	ldr	r3, [r7, #12]
 800a306:	2201      	movs	r2, #1
 800a308:	755a      	strb	r2, [r3, #21]
 800a30a:	2301      	movs	r3, #1
 800a30c:	e04e      	b.n	800a3ac <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 800a30e:	68fb      	ldr	r3, [r7, #12]
 800a310:	697a      	ldr	r2, [r7, #20]
 800a312:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800a314:	68fb      	ldr	r3, [r7, #12]
 800a316:	699b      	ldr	r3, [r3, #24]
 800a318:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a31c:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 800a320:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800a322:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	429a      	cmp	r2, r3
 800a328:	d901      	bls.n	800a32e <f_write+0x264>
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	627b      	str	r3, [r7, #36]	@ 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800a32e:	68fb      	ldr	r3, [r7, #12]
 800a330:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800a334:	68fb      	ldr	r3, [r7, #12]
 800a336:	699b      	ldr	r3, [r3, #24]
 800a338:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a33c:	4413      	add	r3, r2
 800a33e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a340:	69f9      	ldr	r1, [r7, #28]
 800a342:	4618      	mov	r0, r3
 800a344:	f7fd ff68 	bl	8008218 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800a348:	68fb      	ldr	r3, [r7, #12]
 800a34a:	7d1b      	ldrb	r3, [r3, #20]
 800a34c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800a350:	b2da      	uxtb	r2, r3
 800a352:	68fb      	ldr	r3, [r7, #12]
 800a354:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800a356:	69fa      	ldr	r2, [r7, #28]
 800a358:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a35a:	4413      	add	r3, r2
 800a35c:	61fb      	str	r3, [r7, #28]
 800a35e:	68fb      	ldr	r3, [r7, #12]
 800a360:	699a      	ldr	r2, [r3, #24]
 800a362:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a364:	441a      	add	r2, r3
 800a366:	68fb      	ldr	r3, [r7, #12]
 800a368:	619a      	str	r2, [r3, #24]
 800a36a:	68fb      	ldr	r3, [r7, #12]
 800a36c:	68da      	ldr	r2, [r3, #12]
 800a36e:	68fb      	ldr	r3, [r7, #12]
 800a370:	699b      	ldr	r3, [r3, #24]
 800a372:	429a      	cmp	r2, r3
 800a374:	bf38      	it	cc
 800a376:	461a      	movcc	r2, r3
 800a378:	68fb      	ldr	r3, [r7, #12]
 800a37a:	60da      	str	r2, [r3, #12]
 800a37c:	683b      	ldr	r3, [r7, #0]
 800a37e:	681a      	ldr	r2, [r3, #0]
 800a380:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a382:	441a      	add	r2, r3
 800a384:	683b      	ldr	r3, [r7, #0]
 800a386:	601a      	str	r2, [r3, #0]
 800a388:	687a      	ldr	r2, [r7, #4]
 800a38a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a38c:	1ad3      	subs	r3, r2, r3
 800a38e:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	2b00      	cmp	r3, #0
 800a394:	f47f aed4 	bne.w	800a140 <f_write+0x76>
 800a398:	e000      	b.n	800a39c <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800a39a:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800a39c:	68fb      	ldr	r3, [r7, #12]
 800a39e:	7d1b      	ldrb	r3, [r3, #20]
 800a3a0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a3a4:	b2da      	uxtb	r2, r3
 800a3a6:	68fb      	ldr	r3, [r7, #12]
 800a3a8:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800a3aa:	2300      	movs	r3, #0
}
 800a3ac:	4618      	mov	r0, r3
 800a3ae:	3730      	adds	r7, #48	@ 0x30
 800a3b0:	46bd      	mov	sp, r7
 800a3b2:	bd80      	pop	{r7, pc}

0800a3b4 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800a3b4:	b580      	push	{r7, lr}
 800a3b6:	b086      	sub	sp, #24
 800a3b8:	af00      	add	r7, sp, #0
 800a3ba:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	f107 0208 	add.w	r2, r7, #8
 800a3c2:	4611      	mov	r1, r2
 800a3c4:	4618      	mov	r0, r3
 800a3c6:	f7ff fb0b 	bl	80099e0 <validate>
 800a3ca:	4603      	mov	r3, r0
 800a3cc:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800a3ce:	7dfb      	ldrb	r3, [r7, #23]
 800a3d0:	2b00      	cmp	r3, #0
 800a3d2:	d168      	bne.n	800a4a6 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	7d1b      	ldrb	r3, [r3, #20]
 800a3d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a3dc:	2b00      	cmp	r3, #0
 800a3de:	d062      	beq.n	800a4a6 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	7d1b      	ldrb	r3, [r3, #20]
 800a3e4:	b25b      	sxtb	r3, r3
 800a3e6:	2b00      	cmp	r3, #0
 800a3e8:	da15      	bge.n	800a416 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800a3ea:	68bb      	ldr	r3, [r7, #8]
 800a3ec:	7858      	ldrb	r0, [r3, #1]
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	6a1a      	ldr	r2, [r3, #32]
 800a3f8:	2301      	movs	r3, #1
 800a3fa:	f7fd fe4d 	bl	8008098 <disk_write>
 800a3fe:	4603      	mov	r3, r0
 800a400:	2b00      	cmp	r3, #0
 800a402:	d001      	beq.n	800a408 <f_sync+0x54>
 800a404:	2301      	movs	r3, #1
 800a406:	e04f      	b.n	800a4a8 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	7d1b      	ldrb	r3, [r3, #20]
 800a40c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a410:	b2da      	uxtb	r2, r3
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800a416:	f7fd fba1 	bl	8007b5c <get_fattime>
 800a41a:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800a41c:	68ba      	ldr	r2, [r7, #8]
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a422:	4619      	mov	r1, r3
 800a424:	4610      	mov	r0, r2
 800a426:	f7fe f925 	bl	8008674 <move_window>
 800a42a:	4603      	mov	r3, r0
 800a42c:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800a42e:	7dfb      	ldrb	r3, [r7, #23]
 800a430:	2b00      	cmp	r3, #0
 800a432:	d138      	bne.n	800a4a6 <f_sync+0xf2>
					dir = fp->dir_ptr;
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a438:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800a43a:	68fb      	ldr	r3, [r7, #12]
 800a43c:	330b      	adds	r3, #11
 800a43e:	781a      	ldrb	r2, [r3, #0]
 800a440:	68fb      	ldr	r3, [r7, #12]
 800a442:	330b      	adds	r3, #11
 800a444:	f042 0220 	orr.w	r2, r2, #32
 800a448:	b2d2      	uxtb	r2, r2
 800a44a:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	6818      	ldr	r0, [r3, #0]
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	689b      	ldr	r3, [r3, #8]
 800a454:	461a      	mov	r2, r3
 800a456:	68f9      	ldr	r1, [r7, #12]
 800a458:	f7fe fe2f 	bl	80090ba <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800a45c:	68fb      	ldr	r3, [r7, #12]
 800a45e:	f103 021c 	add.w	r2, r3, #28
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	68db      	ldr	r3, [r3, #12]
 800a466:	4619      	mov	r1, r3
 800a468:	4610      	mov	r0, r2
 800a46a:	f7fd fea9 	bl	80081c0 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800a46e:	68fb      	ldr	r3, [r7, #12]
 800a470:	3316      	adds	r3, #22
 800a472:	6939      	ldr	r1, [r7, #16]
 800a474:	4618      	mov	r0, r3
 800a476:	f7fd fea3 	bl	80081c0 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800a47a:	68fb      	ldr	r3, [r7, #12]
 800a47c:	3312      	adds	r3, #18
 800a47e:	2100      	movs	r1, #0
 800a480:	4618      	mov	r0, r3
 800a482:	f7fd fe82 	bl	800818a <st_word>
					fs->wflag = 1;
 800a486:	68bb      	ldr	r3, [r7, #8]
 800a488:	2201      	movs	r2, #1
 800a48a:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800a48c:	68bb      	ldr	r3, [r7, #8]
 800a48e:	4618      	mov	r0, r3
 800a490:	f7fe f91e 	bl	80086d0 <sync_fs>
 800a494:	4603      	mov	r3, r0
 800a496:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	7d1b      	ldrb	r3, [r3, #20]
 800a49c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a4a0:	b2da      	uxtb	r2, r3
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800a4a6:	7dfb      	ldrb	r3, [r7, #23]
}
 800a4a8:	4618      	mov	r0, r3
 800a4aa:	3718      	adds	r7, #24
 800a4ac:	46bd      	mov	sp, r7
 800a4ae:	bd80      	pop	{r7, pc}

0800a4b0 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800a4b0:	b580      	push	{r7, lr}
 800a4b2:	b084      	sub	sp, #16
 800a4b4:	af00      	add	r7, sp, #0
 800a4b6:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800a4b8:	6878      	ldr	r0, [r7, #4]
 800a4ba:	f7ff ff7b 	bl	800a3b4 <f_sync>
 800a4be:	4603      	mov	r3, r0
 800a4c0:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800a4c2:	7bfb      	ldrb	r3, [r7, #15]
 800a4c4:	2b00      	cmp	r3, #0
 800a4c6:	d118      	bne.n	800a4fa <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	f107 0208 	add.w	r2, r7, #8
 800a4ce:	4611      	mov	r1, r2
 800a4d0:	4618      	mov	r0, r3
 800a4d2:	f7ff fa85 	bl	80099e0 <validate>
 800a4d6:	4603      	mov	r3, r0
 800a4d8:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800a4da:	7bfb      	ldrb	r3, [r7, #15]
 800a4dc:	2b00      	cmp	r3, #0
 800a4de:	d10c      	bne.n	800a4fa <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	691b      	ldr	r3, [r3, #16]
 800a4e4:	4618      	mov	r0, r3
 800a4e6:	f7fe f821 	bl	800852c <dec_lock>
 800a4ea:	4603      	mov	r3, r0
 800a4ec:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800a4ee:	7bfb      	ldrb	r3, [r7, #15]
 800a4f0:	2b00      	cmp	r3, #0
 800a4f2:	d102      	bne.n	800a4fa <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	2200      	movs	r2, #0
 800a4f8:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800a4fa:	7bfb      	ldrb	r3, [r7, #15]
}
 800a4fc:	4618      	mov	r0, r3
 800a4fe:	3710      	adds	r7, #16
 800a500:	46bd      	mov	sp, r7
 800a502:	bd80      	pop	{r7, pc}

0800a504 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 800a504:	b580      	push	{r7, lr}
 800a506:	b090      	sub	sp, #64	@ 0x40
 800a508:	af00      	add	r7, sp, #0
 800a50a:	6078      	str	r0, [r7, #4]
 800a50c:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	f107 0208 	add.w	r2, r7, #8
 800a514:	4611      	mov	r1, r2
 800a516:	4618      	mov	r0, r3
 800a518:	f7ff fa62 	bl	80099e0 <validate>
 800a51c:	4603      	mov	r3, r0
 800a51e:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 800a522:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800a526:	2b00      	cmp	r3, #0
 800a528:	d103      	bne.n	800a532 <f_lseek+0x2e>
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	7d5b      	ldrb	r3, [r3, #21]
 800a52e:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 800a532:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800a536:	2b00      	cmp	r3, #0
 800a538:	d002      	beq.n	800a540 <f_lseek+0x3c>
 800a53a:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800a53e:	e1e6      	b.n	800a90e <f_lseek+0x40a>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a544:	2b00      	cmp	r3, #0
 800a546:	f000 80d1 	beq.w	800a6ec <f_lseek+0x1e8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 800a54a:	683b      	ldr	r3, [r7, #0]
 800a54c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a550:	d15a      	bne.n	800a608 <f_lseek+0x104>
			tbl = fp->cltbl;
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a556:	627b      	str	r3, [r7, #36]	@ 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 800a558:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a55a:	1d1a      	adds	r2, r3, #4
 800a55c:	627a      	str	r2, [r7, #36]	@ 0x24
 800a55e:	681b      	ldr	r3, [r3, #0]
 800a560:	617b      	str	r3, [r7, #20]
 800a562:	2302      	movs	r3, #2
 800a564:	62bb      	str	r3, [r7, #40]	@ 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	689b      	ldr	r3, [r3, #8]
 800a56a:	633b      	str	r3, [r7, #48]	@ 0x30
			if (cl) {
 800a56c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a56e:	2b00      	cmp	r3, #0
 800a570:	d03a      	beq.n	800a5e8 <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 800a572:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a574:	613b      	str	r3, [r7, #16]
 800a576:	2300      	movs	r3, #0
 800a578:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a57a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a57c:	3302      	adds	r3, #2
 800a57e:	62bb      	str	r3, [r7, #40]	@ 0x28
					do {
						pcl = cl; ncl++;
 800a580:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a582:	60fb      	str	r3, [r7, #12]
 800a584:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a586:	3301      	adds	r3, #1
 800a588:	62fb      	str	r3, [r7, #44]	@ 0x2c
						cl = get_fat(&fp->obj, cl);
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800a58e:	4618      	mov	r0, r3
 800a590:	f7fe f92b 	bl	80087ea <get_fat>
 800a594:	6338      	str	r0, [r7, #48]	@ 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 800a596:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a598:	2b01      	cmp	r3, #1
 800a59a:	d804      	bhi.n	800a5a6 <f_lseek+0xa2>
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	2202      	movs	r2, #2
 800a5a0:	755a      	strb	r2, [r3, #21]
 800a5a2:	2302      	movs	r3, #2
 800a5a4:	e1b3      	b.n	800a90e <f_lseek+0x40a>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800a5a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a5a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a5ac:	d104      	bne.n	800a5b8 <f_lseek+0xb4>
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	2201      	movs	r2, #1
 800a5b2:	755a      	strb	r2, [r3, #21]
 800a5b4:	2301      	movs	r3, #1
 800a5b6:	e1aa      	b.n	800a90e <f_lseek+0x40a>
					} while (cl == pcl + 1);
 800a5b8:	68fb      	ldr	r3, [r7, #12]
 800a5ba:	3301      	adds	r3, #1
 800a5bc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a5be:	429a      	cmp	r2, r3
 800a5c0:	d0de      	beq.n	800a580 <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 800a5c2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a5c4:	697b      	ldr	r3, [r7, #20]
 800a5c6:	429a      	cmp	r2, r3
 800a5c8:	d809      	bhi.n	800a5de <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 800a5ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a5cc:	1d1a      	adds	r2, r3, #4
 800a5ce:	627a      	str	r2, [r7, #36]	@ 0x24
 800a5d0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a5d2:	601a      	str	r2, [r3, #0]
 800a5d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a5d6:	1d1a      	adds	r2, r3, #4
 800a5d8:	627a      	str	r2, [r7, #36]	@ 0x24
 800a5da:	693a      	ldr	r2, [r7, #16]
 800a5dc:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 800a5de:	68bb      	ldr	r3, [r7, #8]
 800a5e0:	695b      	ldr	r3, [r3, #20]
 800a5e2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a5e4:	429a      	cmp	r2, r3
 800a5e6:	d3c4      	bcc.n	800a572 <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a5ec:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a5ee:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 800a5f0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a5f2:	697b      	ldr	r3, [r7, #20]
 800a5f4:	429a      	cmp	r2, r3
 800a5f6:	d803      	bhi.n	800a600 <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 800a5f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a5fa:	2200      	movs	r2, #0
 800a5fc:	601a      	str	r2, [r3, #0]
 800a5fe:	e184      	b.n	800a90a <f_lseek+0x406>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 800a600:	2311      	movs	r3, #17
 800a602:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 800a606:	e180      	b.n	800a90a <f_lseek+0x406>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	68db      	ldr	r3, [r3, #12]
 800a60c:	683a      	ldr	r2, [r7, #0]
 800a60e:	429a      	cmp	r2, r3
 800a610:	d902      	bls.n	800a618 <f_lseek+0x114>
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	68db      	ldr	r3, [r3, #12]
 800a616:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	683a      	ldr	r2, [r7, #0]
 800a61c:	619a      	str	r2, [r3, #24]
			if (ofs) {
 800a61e:	683b      	ldr	r3, [r7, #0]
 800a620:	2b00      	cmp	r3, #0
 800a622:	f000 8172 	beq.w	800a90a <f_lseek+0x406>
				fp->clust = clmt_clust(fp, ofs - 1);
 800a626:	683b      	ldr	r3, [r7, #0]
 800a628:	3b01      	subs	r3, #1
 800a62a:	4619      	mov	r1, r3
 800a62c:	6878      	ldr	r0, [r7, #4]
 800a62e:	f7fe fb6a 	bl	8008d06 <clmt_clust>
 800a632:	4602      	mov	r2, r0
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 800a638:	68ba      	ldr	r2, [r7, #8]
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	69db      	ldr	r3, [r3, #28]
 800a63e:	4619      	mov	r1, r3
 800a640:	4610      	mov	r0, r2
 800a642:	f7fe f8b3 	bl	80087ac <clust2sect>
 800a646:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 800a648:	69bb      	ldr	r3, [r7, #24]
 800a64a:	2b00      	cmp	r3, #0
 800a64c:	d104      	bne.n	800a658 <f_lseek+0x154>
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	2202      	movs	r2, #2
 800a652:	755a      	strb	r2, [r3, #21]
 800a654:	2302      	movs	r3, #2
 800a656:	e15a      	b.n	800a90e <f_lseek+0x40a>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 800a658:	683b      	ldr	r3, [r7, #0]
 800a65a:	3b01      	subs	r3, #1
 800a65c:	0a5b      	lsrs	r3, r3, #9
 800a65e:	68ba      	ldr	r2, [r7, #8]
 800a660:	8952      	ldrh	r2, [r2, #10]
 800a662:	3a01      	subs	r2, #1
 800a664:	4013      	ands	r3, r2
 800a666:	69ba      	ldr	r2, [r7, #24]
 800a668:	4413      	add	r3, r2
 800a66a:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	699b      	ldr	r3, [r3, #24]
 800a670:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a674:	2b00      	cmp	r3, #0
 800a676:	f000 8148 	beq.w	800a90a <f_lseek+0x406>
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	6a1b      	ldr	r3, [r3, #32]
 800a67e:	69ba      	ldr	r2, [r7, #24]
 800a680:	429a      	cmp	r2, r3
 800a682:	f000 8142 	beq.w	800a90a <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	7d1b      	ldrb	r3, [r3, #20]
 800a68a:	b25b      	sxtb	r3, r3
 800a68c:	2b00      	cmp	r3, #0
 800a68e:	da18      	bge.n	800a6c2 <f_lseek+0x1be>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800a690:	68bb      	ldr	r3, [r7, #8]
 800a692:	7858      	ldrb	r0, [r3, #1]
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	6a1a      	ldr	r2, [r3, #32]
 800a69e:	2301      	movs	r3, #1
 800a6a0:	f7fd fcfa 	bl	8008098 <disk_write>
 800a6a4:	4603      	mov	r3, r0
 800a6a6:	2b00      	cmp	r3, #0
 800a6a8:	d004      	beq.n	800a6b4 <f_lseek+0x1b0>
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	2201      	movs	r2, #1
 800a6ae:	755a      	strb	r2, [r3, #21]
 800a6b0:	2301      	movs	r3, #1
 800a6b2:	e12c      	b.n	800a90e <f_lseek+0x40a>
						fp->flag &= (BYTE)~FA_DIRTY;
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	7d1b      	ldrb	r3, [r3, #20]
 800a6b8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a6bc:	b2da      	uxtb	r2, r3
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 800a6c2:	68bb      	ldr	r3, [r7, #8]
 800a6c4:	7858      	ldrb	r0, [r3, #1]
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800a6cc:	2301      	movs	r3, #1
 800a6ce:	69ba      	ldr	r2, [r7, #24]
 800a6d0:	f7fd fcc2 	bl	8008058 <disk_read>
 800a6d4:	4603      	mov	r3, r0
 800a6d6:	2b00      	cmp	r3, #0
 800a6d8:	d004      	beq.n	800a6e4 <f_lseek+0x1e0>
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	2201      	movs	r2, #1
 800a6de:	755a      	strb	r2, [r3, #21]
 800a6e0:	2301      	movs	r3, #1
 800a6e2:	e114      	b.n	800a90e <f_lseek+0x40a>
#endif
					fp->sect = dsc;
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	69ba      	ldr	r2, [r7, #24]
 800a6e8:	621a      	str	r2, [r3, #32]
 800a6ea:	e10e      	b.n	800a90a <f_lseek+0x406>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	68db      	ldr	r3, [r3, #12]
 800a6f0:	683a      	ldr	r2, [r7, #0]
 800a6f2:	429a      	cmp	r2, r3
 800a6f4:	d908      	bls.n	800a708 <f_lseek+0x204>
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	7d1b      	ldrb	r3, [r3, #20]
 800a6fa:	f003 0302 	and.w	r3, r3, #2
 800a6fe:	2b00      	cmp	r3, #0
 800a700:	d102      	bne.n	800a708 <f_lseek+0x204>
			ofs = fp->obj.objsize;
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	68db      	ldr	r3, [r3, #12]
 800a706:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	699b      	ldr	r3, [r3, #24]
 800a70c:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 800a70e:	2300      	movs	r3, #0
 800a710:	637b      	str	r3, [r7, #52]	@ 0x34
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a716:	619a      	str	r2, [r3, #24]
		if (ofs) {
 800a718:	683b      	ldr	r3, [r7, #0]
 800a71a:	2b00      	cmp	r3, #0
 800a71c:	f000 80a7 	beq.w	800a86e <f_lseek+0x36a>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 800a720:	68bb      	ldr	r3, [r7, #8]
 800a722:	895b      	ldrh	r3, [r3, #10]
 800a724:	025b      	lsls	r3, r3, #9
 800a726:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 800a728:	6a3b      	ldr	r3, [r7, #32]
 800a72a:	2b00      	cmp	r3, #0
 800a72c:	d01b      	beq.n	800a766 <f_lseek+0x262>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 800a72e:	683b      	ldr	r3, [r7, #0]
 800a730:	1e5a      	subs	r2, r3, #1
 800a732:	69fb      	ldr	r3, [r7, #28]
 800a734:	fbb2 f2f3 	udiv	r2, r2, r3
 800a738:	6a3b      	ldr	r3, [r7, #32]
 800a73a:	1e59      	subs	r1, r3, #1
 800a73c:	69fb      	ldr	r3, [r7, #28]
 800a73e:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 800a742:	429a      	cmp	r2, r3
 800a744:	d30f      	bcc.n	800a766 <f_lseek+0x262>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 800a746:	6a3b      	ldr	r3, [r7, #32]
 800a748:	1e5a      	subs	r2, r3, #1
 800a74a:	69fb      	ldr	r3, [r7, #28]
 800a74c:	425b      	negs	r3, r3
 800a74e:	401a      	ands	r2, r3
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	699b      	ldr	r3, [r3, #24]
 800a758:	683a      	ldr	r2, [r7, #0]
 800a75a:	1ad3      	subs	r3, r2, r3
 800a75c:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	69db      	ldr	r3, [r3, #28]
 800a762:	63bb      	str	r3, [r7, #56]	@ 0x38
 800a764:	e022      	b.n	800a7ac <f_lseek+0x2a8>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	689b      	ldr	r3, [r3, #8]
 800a76a:	63bb      	str	r3, [r7, #56]	@ 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 800a76c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a76e:	2b00      	cmp	r3, #0
 800a770:	d119      	bne.n	800a7a6 <f_lseek+0x2a2>
					clst = create_chain(&fp->obj, 0);
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	2100      	movs	r1, #0
 800a776:	4618      	mov	r0, r3
 800a778:	f7fe fa2d 	bl	8008bd6 <create_chain>
 800a77c:	63b8      	str	r0, [r7, #56]	@ 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 800a77e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a780:	2b01      	cmp	r3, #1
 800a782:	d104      	bne.n	800a78e <f_lseek+0x28a>
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	2202      	movs	r2, #2
 800a788:	755a      	strb	r2, [r3, #21]
 800a78a:	2302      	movs	r3, #2
 800a78c:	e0bf      	b.n	800a90e <f_lseek+0x40a>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800a78e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a790:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a794:	d104      	bne.n	800a7a0 <f_lseek+0x29c>
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	2201      	movs	r2, #1
 800a79a:	755a      	strb	r2, [r3, #21]
 800a79c:	2301      	movs	r3, #1
 800a79e:	e0b6      	b.n	800a90e <f_lseek+0x40a>
					fp->obj.sclust = clst;
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a7a4:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a7aa:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 800a7ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a7ae:	2b00      	cmp	r3, #0
 800a7b0:	d05d      	beq.n	800a86e <f_lseek+0x36a>
				while (ofs > bcs) {						/* Cluster following loop */
 800a7b2:	e03a      	b.n	800a82a <f_lseek+0x326>
					ofs -= bcs; fp->fptr += bcs;
 800a7b4:	683a      	ldr	r2, [r7, #0]
 800a7b6:	69fb      	ldr	r3, [r7, #28]
 800a7b8:	1ad3      	subs	r3, r2, r3
 800a7ba:	603b      	str	r3, [r7, #0]
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	699a      	ldr	r2, [r3, #24]
 800a7c0:	69fb      	ldr	r3, [r7, #28]
 800a7c2:	441a      	add	r2, r3
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	7d1b      	ldrb	r3, [r3, #20]
 800a7cc:	f003 0302 	and.w	r3, r3, #2
 800a7d0:	2b00      	cmp	r3, #0
 800a7d2:	d00b      	beq.n	800a7ec <f_lseek+0x2e8>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800a7d8:	4618      	mov	r0, r3
 800a7da:	f7fe f9fc 	bl	8008bd6 <create_chain>
 800a7de:	63b8      	str	r0, [r7, #56]	@ 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 800a7e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a7e2:	2b00      	cmp	r3, #0
 800a7e4:	d108      	bne.n	800a7f8 <f_lseek+0x2f4>
							ofs = 0; break;
 800a7e6:	2300      	movs	r3, #0
 800a7e8:	603b      	str	r3, [r7, #0]
 800a7ea:	e022      	b.n	800a832 <f_lseek+0x32e>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800a7f0:	4618      	mov	r0, r3
 800a7f2:	f7fd fffa 	bl	80087ea <get_fat>
 800a7f6:	63b8      	str	r0, [r7, #56]	@ 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800a7f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a7fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a7fe:	d104      	bne.n	800a80a <f_lseek+0x306>
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	2201      	movs	r2, #1
 800a804:	755a      	strb	r2, [r3, #21]
 800a806:	2301      	movs	r3, #1
 800a808:	e081      	b.n	800a90e <f_lseek+0x40a>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 800a80a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a80c:	2b01      	cmp	r3, #1
 800a80e:	d904      	bls.n	800a81a <f_lseek+0x316>
 800a810:	68bb      	ldr	r3, [r7, #8]
 800a812:	695b      	ldr	r3, [r3, #20]
 800a814:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a816:	429a      	cmp	r2, r3
 800a818:	d304      	bcc.n	800a824 <f_lseek+0x320>
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	2202      	movs	r2, #2
 800a81e:	755a      	strb	r2, [r3, #21]
 800a820:	2302      	movs	r3, #2
 800a822:	e074      	b.n	800a90e <f_lseek+0x40a>
					fp->clust = clst;
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a828:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 800a82a:	683a      	ldr	r2, [r7, #0]
 800a82c:	69fb      	ldr	r3, [r7, #28]
 800a82e:	429a      	cmp	r2, r3
 800a830:	d8c0      	bhi.n	800a7b4 <f_lseek+0x2b0>
				}
				fp->fptr += ofs;
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	699a      	ldr	r2, [r3, #24]
 800a836:	683b      	ldr	r3, [r7, #0]
 800a838:	441a      	add	r2, r3
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 800a83e:	683b      	ldr	r3, [r7, #0]
 800a840:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a844:	2b00      	cmp	r3, #0
 800a846:	d012      	beq.n	800a86e <f_lseek+0x36a>
					nsect = clust2sect(fs, clst);	/* Current sector */
 800a848:	68bb      	ldr	r3, [r7, #8]
 800a84a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800a84c:	4618      	mov	r0, r3
 800a84e:	f7fd ffad 	bl	80087ac <clust2sect>
 800a852:	6378      	str	r0, [r7, #52]	@ 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 800a854:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a856:	2b00      	cmp	r3, #0
 800a858:	d104      	bne.n	800a864 <f_lseek+0x360>
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	2202      	movs	r2, #2
 800a85e:	755a      	strb	r2, [r3, #21]
 800a860:	2302      	movs	r3, #2
 800a862:	e054      	b.n	800a90e <f_lseek+0x40a>
					nsect += (DWORD)(ofs / SS(fs));
 800a864:	683b      	ldr	r3, [r7, #0]
 800a866:	0a5b      	lsrs	r3, r3, #9
 800a868:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a86a:	4413      	add	r3, r2
 800a86c:	637b      	str	r3, [r7, #52]	@ 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	699a      	ldr	r2, [r3, #24]
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	68db      	ldr	r3, [r3, #12]
 800a876:	429a      	cmp	r2, r3
 800a878:	d90a      	bls.n	800a890 <f_lseek+0x38c>
			fp->obj.objsize = fp->fptr;
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	699a      	ldr	r2, [r3, #24]
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	7d1b      	ldrb	r3, [r3, #20]
 800a886:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a88a:	b2da      	uxtb	r2, r3
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	699b      	ldr	r3, [r3, #24]
 800a894:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a898:	2b00      	cmp	r3, #0
 800a89a:	d036      	beq.n	800a90a <f_lseek+0x406>
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	6a1b      	ldr	r3, [r3, #32]
 800a8a0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a8a2:	429a      	cmp	r2, r3
 800a8a4:	d031      	beq.n	800a90a <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	7d1b      	ldrb	r3, [r3, #20]
 800a8aa:	b25b      	sxtb	r3, r3
 800a8ac:	2b00      	cmp	r3, #0
 800a8ae:	da18      	bge.n	800a8e2 <f_lseek+0x3de>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800a8b0:	68bb      	ldr	r3, [r7, #8]
 800a8b2:	7858      	ldrb	r0, [r3, #1]
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	6a1a      	ldr	r2, [r3, #32]
 800a8be:	2301      	movs	r3, #1
 800a8c0:	f7fd fbea 	bl	8008098 <disk_write>
 800a8c4:	4603      	mov	r3, r0
 800a8c6:	2b00      	cmp	r3, #0
 800a8c8:	d004      	beq.n	800a8d4 <f_lseek+0x3d0>
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	2201      	movs	r2, #1
 800a8ce:	755a      	strb	r2, [r3, #21]
 800a8d0:	2301      	movs	r3, #1
 800a8d2:	e01c      	b.n	800a90e <f_lseek+0x40a>
				fp->flag &= (BYTE)~FA_DIRTY;
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	7d1b      	ldrb	r3, [r3, #20]
 800a8d8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a8dc:	b2da      	uxtb	r2, r3
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800a8e2:	68bb      	ldr	r3, [r7, #8]
 800a8e4:	7858      	ldrb	r0, [r3, #1]
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800a8ec:	2301      	movs	r3, #1
 800a8ee:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a8f0:	f7fd fbb2 	bl	8008058 <disk_read>
 800a8f4:	4603      	mov	r3, r0
 800a8f6:	2b00      	cmp	r3, #0
 800a8f8:	d004      	beq.n	800a904 <f_lseek+0x400>
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	2201      	movs	r2, #1
 800a8fe:	755a      	strb	r2, [r3, #21]
 800a900:	2301      	movs	r3, #1
 800a902:	e004      	b.n	800a90e <f_lseek+0x40a>
#endif
			fp->sect = nsect;
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a908:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 800a90a:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
 800a90e:	4618      	mov	r0, r3
 800a910:	3740      	adds	r7, #64	@ 0x40
 800a912:	46bd      	mov	sp, r7
 800a914:	bd80      	pop	{r7, pc}
	...

0800a918 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800a918:	b480      	push	{r7}
 800a91a:	b087      	sub	sp, #28
 800a91c:	af00      	add	r7, sp, #0
 800a91e:	60f8      	str	r0, [r7, #12]
 800a920:	60b9      	str	r1, [r7, #8]
 800a922:	4613      	mov	r3, r2
 800a924:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800a926:	2301      	movs	r3, #1
 800a928:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800a92a:	2300      	movs	r3, #0
 800a92c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800a92e:	4b1f      	ldr	r3, [pc, #124]	@ (800a9ac <FATFS_LinkDriverEx+0x94>)
 800a930:	7a5b      	ldrb	r3, [r3, #9]
 800a932:	b2db      	uxtb	r3, r3
 800a934:	2b00      	cmp	r3, #0
 800a936:	d131      	bne.n	800a99c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800a938:	4b1c      	ldr	r3, [pc, #112]	@ (800a9ac <FATFS_LinkDriverEx+0x94>)
 800a93a:	7a5b      	ldrb	r3, [r3, #9]
 800a93c:	b2db      	uxtb	r3, r3
 800a93e:	461a      	mov	r2, r3
 800a940:	4b1a      	ldr	r3, [pc, #104]	@ (800a9ac <FATFS_LinkDriverEx+0x94>)
 800a942:	2100      	movs	r1, #0
 800a944:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800a946:	4b19      	ldr	r3, [pc, #100]	@ (800a9ac <FATFS_LinkDriverEx+0x94>)
 800a948:	7a5b      	ldrb	r3, [r3, #9]
 800a94a:	b2db      	uxtb	r3, r3
 800a94c:	4a17      	ldr	r2, [pc, #92]	@ (800a9ac <FATFS_LinkDriverEx+0x94>)
 800a94e:	009b      	lsls	r3, r3, #2
 800a950:	4413      	add	r3, r2
 800a952:	68fa      	ldr	r2, [r7, #12]
 800a954:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800a956:	4b15      	ldr	r3, [pc, #84]	@ (800a9ac <FATFS_LinkDriverEx+0x94>)
 800a958:	7a5b      	ldrb	r3, [r3, #9]
 800a95a:	b2db      	uxtb	r3, r3
 800a95c:	461a      	mov	r2, r3
 800a95e:	4b13      	ldr	r3, [pc, #76]	@ (800a9ac <FATFS_LinkDriverEx+0x94>)
 800a960:	4413      	add	r3, r2
 800a962:	79fa      	ldrb	r2, [r7, #7]
 800a964:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800a966:	4b11      	ldr	r3, [pc, #68]	@ (800a9ac <FATFS_LinkDriverEx+0x94>)
 800a968:	7a5b      	ldrb	r3, [r3, #9]
 800a96a:	b2db      	uxtb	r3, r3
 800a96c:	1c5a      	adds	r2, r3, #1
 800a96e:	b2d1      	uxtb	r1, r2
 800a970:	4a0e      	ldr	r2, [pc, #56]	@ (800a9ac <FATFS_LinkDriverEx+0x94>)
 800a972:	7251      	strb	r1, [r2, #9]
 800a974:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800a976:	7dbb      	ldrb	r3, [r7, #22]
 800a978:	3330      	adds	r3, #48	@ 0x30
 800a97a:	b2da      	uxtb	r2, r3
 800a97c:	68bb      	ldr	r3, [r7, #8]
 800a97e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800a980:	68bb      	ldr	r3, [r7, #8]
 800a982:	3301      	adds	r3, #1
 800a984:	223a      	movs	r2, #58	@ 0x3a
 800a986:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800a988:	68bb      	ldr	r3, [r7, #8]
 800a98a:	3302      	adds	r3, #2
 800a98c:	222f      	movs	r2, #47	@ 0x2f
 800a98e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800a990:	68bb      	ldr	r3, [r7, #8]
 800a992:	3303      	adds	r3, #3
 800a994:	2200      	movs	r2, #0
 800a996:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800a998:	2300      	movs	r3, #0
 800a99a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800a99c:	7dfb      	ldrb	r3, [r7, #23]
}
 800a99e:	4618      	mov	r0, r3
 800a9a0:	371c      	adds	r7, #28
 800a9a2:	46bd      	mov	sp, r7
 800a9a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9a8:	4770      	bx	lr
 800a9aa:	bf00      	nop
 800a9ac:	2000857c 	.word	0x2000857c

0800a9b0 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800a9b0:	b580      	push	{r7, lr}
 800a9b2:	b082      	sub	sp, #8
 800a9b4:	af00      	add	r7, sp, #0
 800a9b6:	6078      	str	r0, [r7, #4]
 800a9b8:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800a9ba:	2200      	movs	r2, #0
 800a9bc:	6839      	ldr	r1, [r7, #0]
 800a9be:	6878      	ldr	r0, [r7, #4]
 800a9c0:	f7ff ffaa 	bl	800a918 <FATFS_LinkDriverEx>
 800a9c4:	4603      	mov	r3, r0
}
 800a9c6:	4618      	mov	r0, r3
 800a9c8:	3708      	adds	r7, #8
 800a9ca:	46bd      	mov	sp, r7
 800a9cc:	bd80      	pop	{r7, pc}
	...

0800a9d0 <model_configure_activations>:

/******************************************************************************/
AI_DECLARE_STATIC
ai_bool model_configure_activations(
  ai_network* net_ctx, const ai_network_params* params)
{
 800a9d0:	b580      	push	{r7, lr}
 800a9d2:	b082      	sub	sp, #8
 800a9d4:	af00      	add	r7, sp, #0
 800a9d6:	6078      	str	r0, [r7, #4]
 800a9d8:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx)

  if (ai_platform_get_activations_map(g_model_activations_map, 1, params)) {
 800a9da:	683a      	ldr	r2, [r7, #0]
 800a9dc:	2101      	movs	r1, #1
 800a9de:	4841      	ldr	r0, [pc, #260]	@ (800aae4 <model_configure_activations+0x114>)
 800a9e0:	f000 fb46 	bl	800b070 <ai_platform_get_activations_map>
 800a9e4:	4603      	mov	r3, r0
 800a9e6:	2b00      	cmp	r3, #0
 800a9e8:	d071      	beq.n	800aace <model_configure_activations+0xfe>
    /* Updating activations (byte) offsets */
    
    input_1_output_array.data = AI_PTR(g_model_activations_map[0] + 284);
 800a9ea:	4b3e      	ldr	r3, [pc, #248]	@ (800aae4 <model_configure_activations+0x114>)
 800a9ec:	681b      	ldr	r3, [r3, #0]
 800a9ee:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800a9f2:	4a3d      	ldr	r2, [pc, #244]	@ (800aae8 <model_configure_activations+0x118>)
 800a9f4:	6093      	str	r3, [r2, #8]
    input_1_output_array.data_start = AI_PTR(g_model_activations_map[0] + 284);
 800a9f6:	4b3b      	ldr	r3, [pc, #236]	@ (800aae4 <model_configure_activations+0x114>)
 800a9f8:	681b      	ldr	r3, [r3, #0]
 800a9fa:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800a9fe:	4a3a      	ldr	r2, [pc, #232]	@ (800aae8 <model_configure_activations+0x118>)
 800aa00:	60d3      	str	r3, [r2, #12]
    conv2d_conv2d_scratch0_array.data = AI_PTR(g_model_activations_map[0] + 680);
 800aa02:	4b38      	ldr	r3, [pc, #224]	@ (800aae4 <model_configure_activations+0x114>)
 800aa04:	681b      	ldr	r3, [r3, #0]
 800aa06:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 800aa0a:	4a38      	ldr	r2, [pc, #224]	@ (800aaec <model_configure_activations+0x11c>)
 800aa0c:	6093      	str	r3, [r2, #8]
    conv2d_conv2d_scratch0_array.data_start = AI_PTR(g_model_activations_map[0] + 680);
 800aa0e:	4b35      	ldr	r3, [pc, #212]	@ (800aae4 <model_configure_activations+0x114>)
 800aa10:	681b      	ldr	r3, [r3, #0]
 800aa12:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 800aa16:	4a35      	ldr	r2, [pc, #212]	@ (800aaec <model_configure_activations+0x11c>)
 800aa18:	60d3      	str	r3, [r2, #12]
    conv2d_conv2d_output_array.data = AI_PTR(g_model_activations_map[0] + 720);
 800aa1a:	4b32      	ldr	r3, [pc, #200]	@ (800aae4 <model_configure_activations+0x114>)
 800aa1c:	681b      	ldr	r3, [r3, #0]
 800aa1e:	f503 7334 	add.w	r3, r3, #720	@ 0x2d0
 800aa22:	4a33      	ldr	r2, [pc, #204]	@ (800aaf0 <model_configure_activations+0x120>)
 800aa24:	6093      	str	r3, [r2, #8]
    conv2d_conv2d_output_array.data_start = AI_PTR(g_model_activations_map[0] + 720);
 800aa26:	4b2f      	ldr	r3, [pc, #188]	@ (800aae4 <model_configure_activations+0x114>)
 800aa28:	681b      	ldr	r3, [r3, #0]
 800aa2a:	f503 7334 	add.w	r3, r3, #720	@ 0x2d0
 800aa2e:	4a30      	ldr	r2, [pc, #192]	@ (800aaf0 <model_configure_activations+0x120>)
 800aa30:	60d3      	str	r3, [r2, #12]
    conv2d_output_array.data = AI_PTR(g_model_activations_map[0] + 720);
 800aa32:	4b2c      	ldr	r3, [pc, #176]	@ (800aae4 <model_configure_activations+0x114>)
 800aa34:	681b      	ldr	r3, [r3, #0]
 800aa36:	f503 7334 	add.w	r3, r3, #720	@ 0x2d0
 800aa3a:	4a2e      	ldr	r2, [pc, #184]	@ (800aaf4 <model_configure_activations+0x124>)
 800aa3c:	6093      	str	r3, [r2, #8]
    conv2d_output_array.data_start = AI_PTR(g_model_activations_map[0] + 720);
 800aa3e:	4b29      	ldr	r3, [pc, #164]	@ (800aae4 <model_configure_activations+0x114>)
 800aa40:	681b      	ldr	r3, [r3, #0]
 800aa42:	f503 7334 	add.w	r3, r3, #720	@ 0x2d0
 800aa46:	4a2b      	ldr	r2, [pc, #172]	@ (800aaf4 <model_configure_activations+0x124>)
 800aa48:	60d3      	str	r3, [r2, #12]
    conv2d_1_conv2d_scratch0_array.data = AI_PTR(g_model_activations_map[0] + 0);
 800aa4a:	4b26      	ldr	r3, [pc, #152]	@ (800aae4 <model_configure_activations+0x114>)
 800aa4c:	681b      	ldr	r3, [r3, #0]
 800aa4e:	4a2a      	ldr	r2, [pc, #168]	@ (800aaf8 <model_configure_activations+0x128>)
 800aa50:	6093      	str	r3, [r2, #8]
    conv2d_1_conv2d_scratch0_array.data_start = AI_PTR(g_model_activations_map[0] + 0);
 800aa52:	4b24      	ldr	r3, [pc, #144]	@ (800aae4 <model_configure_activations+0x114>)
 800aa54:	681b      	ldr	r3, [r3, #0]
 800aa56:	4a28      	ldr	r2, [pc, #160]	@ (800aaf8 <model_configure_activations+0x128>)
 800aa58:	60d3      	str	r3, [r2, #12]
    conv2d_1_conv2d_output_array.data = AI_PTR(g_model_activations_map[0] + 12600);
 800aa5a:	4b22      	ldr	r3, [pc, #136]	@ (800aae4 <model_configure_activations+0x114>)
 800aa5c:	681b      	ldr	r3, [r3, #0]
 800aa5e:	f503 5344 	add.w	r3, r3, #12544	@ 0x3100
 800aa62:	3338      	adds	r3, #56	@ 0x38
 800aa64:	4a25      	ldr	r2, [pc, #148]	@ (800aafc <model_configure_activations+0x12c>)
 800aa66:	6093      	str	r3, [r2, #8]
    conv2d_1_conv2d_output_array.data_start = AI_PTR(g_model_activations_map[0] + 12600);
 800aa68:	4b1e      	ldr	r3, [pc, #120]	@ (800aae4 <model_configure_activations+0x114>)
 800aa6a:	681b      	ldr	r3, [r3, #0]
 800aa6c:	f503 5344 	add.w	r3, r3, #12544	@ 0x3100
 800aa70:	3338      	adds	r3, #56	@ 0x38
 800aa72:	4a22      	ldr	r2, [pc, #136]	@ (800aafc <model_configure_activations+0x12c>)
 800aa74:	60d3      	str	r3, [r2, #12]
    conv2d_1_output_array.data = AI_PTR(g_model_activations_map[0] + 12600);
 800aa76:	4b1b      	ldr	r3, [pc, #108]	@ (800aae4 <model_configure_activations+0x114>)
 800aa78:	681b      	ldr	r3, [r3, #0]
 800aa7a:	f503 5344 	add.w	r3, r3, #12544	@ 0x3100
 800aa7e:	3338      	adds	r3, #56	@ 0x38
 800aa80:	4a1f      	ldr	r2, [pc, #124]	@ (800ab00 <model_configure_activations+0x130>)
 800aa82:	6093      	str	r3, [r2, #8]
    conv2d_1_output_array.data_start = AI_PTR(g_model_activations_map[0] + 12600);
 800aa84:	4b17      	ldr	r3, [pc, #92]	@ (800aae4 <model_configure_activations+0x114>)
 800aa86:	681b      	ldr	r3, [r3, #0]
 800aa88:	f503 5344 	add.w	r3, r3, #12544	@ 0x3100
 800aa8c:	3338      	adds	r3, #56	@ 0x38
 800aa8e:	4a1c      	ldr	r2, [pc, #112]	@ (800ab00 <model_configure_activations+0x130>)
 800aa90:	60d3      	str	r3, [r2, #12]
    dense_dense_output_array.data = AI_PTR(g_model_activations_map[0] + 0);
 800aa92:	4b14      	ldr	r3, [pc, #80]	@ (800aae4 <model_configure_activations+0x114>)
 800aa94:	681b      	ldr	r3, [r3, #0]
 800aa96:	4a1b      	ldr	r2, [pc, #108]	@ (800ab04 <model_configure_activations+0x134>)
 800aa98:	6093      	str	r3, [r2, #8]
    dense_dense_output_array.data_start = AI_PTR(g_model_activations_map[0] + 0);
 800aa9a:	4b12      	ldr	r3, [pc, #72]	@ (800aae4 <model_configure_activations+0x114>)
 800aa9c:	681b      	ldr	r3, [r3, #0]
 800aa9e:	4a19      	ldr	r2, [pc, #100]	@ (800ab04 <model_configure_activations+0x134>)
 800aaa0:	60d3      	str	r3, [r2, #12]
    dense_output_array.data = AI_PTR(g_model_activations_map[0] + 256);
 800aaa2:	4b10      	ldr	r3, [pc, #64]	@ (800aae4 <model_configure_activations+0x114>)
 800aaa4:	681b      	ldr	r3, [r3, #0]
 800aaa6:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 800aaaa:	4a17      	ldr	r2, [pc, #92]	@ (800ab08 <model_configure_activations+0x138>)
 800aaac:	6093      	str	r3, [r2, #8]
    dense_output_array.data_start = AI_PTR(g_model_activations_map[0] + 256);
 800aaae:	4b0d      	ldr	r3, [pc, #52]	@ (800aae4 <model_configure_activations+0x114>)
 800aab0:	681b      	ldr	r3, [r3, #0]
 800aab2:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 800aab6:	4a14      	ldr	r2, [pc, #80]	@ (800ab08 <model_configure_activations+0x138>)
 800aab8:	60d3      	str	r3, [r2, #12]
    dense_1_output_array.data = AI_PTR(g_model_activations_map[0] + 0);
 800aaba:	4b0a      	ldr	r3, [pc, #40]	@ (800aae4 <model_configure_activations+0x114>)
 800aabc:	681b      	ldr	r3, [r3, #0]
 800aabe:	4a13      	ldr	r2, [pc, #76]	@ (800ab0c <model_configure_activations+0x13c>)
 800aac0:	6093      	str	r3, [r2, #8]
    dense_1_output_array.data_start = AI_PTR(g_model_activations_map[0] + 0);
 800aac2:	4b08      	ldr	r3, [pc, #32]	@ (800aae4 <model_configure_activations+0x114>)
 800aac4:	681b      	ldr	r3, [r3, #0]
 800aac6:	4a11      	ldr	r2, [pc, #68]	@ (800ab0c <model_configure_activations+0x13c>)
 800aac8:	60d3      	str	r3, [r2, #12]
    return true;
 800aaca:	2301      	movs	r3, #1
 800aacc:	e005      	b.n	800aada <model_configure_activations+0x10a>
  }
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_ACTIVATIONS);
 800aace:	2213      	movs	r2, #19
 800aad0:	2130      	movs	r1, #48	@ 0x30
 800aad2:	6878      	ldr	r0, [r7, #4]
 800aad4:	f000 fb4e 	bl	800b174 <ai_platform_network_set_error>
  return false;
 800aad8:	2300      	movs	r3, #0
}
 800aada:	4618      	mov	r0, r3
 800aadc:	3708      	adds	r7, #8
 800aade:	46bd      	mov	sp, r7
 800aae0:	bd80      	pop	{r7, pc}
 800aae2:	bf00      	nop
 800aae4:	20008588 	.word	0x20008588
 800aae8:	2000000c 	.word	0x2000000c
 800aaec:	2000010c 	.word	0x2000010c
 800aaf0:	2000001c 	.word	0x2000001c
 800aaf4:	2000002c 	.word	0x2000002c
 800aaf8:	2000011c 	.word	0x2000011c
 800aafc:	2000003c 	.word	0x2000003c
 800ab00:	2000004c 	.word	0x2000004c
 800ab04:	2000005c 	.word	0x2000005c
 800ab08:	2000006c 	.word	0x2000006c
 800ab0c:	2000007c 	.word	0x2000007c

0800ab10 <model_configure_weights>:

/******************************************************************************/
AI_DECLARE_STATIC
ai_bool model_configure_weights(
  ai_network* net_ctx, const ai_network_params* params)
{
 800ab10:	b580      	push	{r7, lr}
 800ab12:	b082      	sub	sp, #8
 800ab14:	af00      	add	r7, sp, #0
 800ab16:	6078      	str	r0, [r7, #4]
 800ab18:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx)

  if (ai_platform_get_weights_map(g_model_weights_map, 1, params)) {
 800ab1a:	683a      	ldr	r2, [r7, #0]
 800ab1c:	2101      	movs	r1, #1
 800ab1e:	4856      	ldr	r0, [pc, #344]	@ (800ac78 <model_configure_weights+0x168>)
 800ab20:	f000 fa52 	bl	800afc8 <ai_platform_get_weights_map>
 800ab24:	4603      	mov	r3, r0
 800ab26:	2b00      	cmp	r3, #0
 800ab28:	f000 809c 	beq.w	800ac64 <model_configure_weights+0x154>
    /* Updating weights (byte) offsets */
    
    conv2d_conv2d_weights_array.format |= AI_FMT_FLAG_CONST;
 800ab2c:	4b53      	ldr	r3, [pc, #332]	@ (800ac7c <model_configure_weights+0x16c>)
 800ab2e:	681b      	ldr	r3, [r3, #0]
 800ab30:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800ab34:	4a51      	ldr	r2, [pc, #324]	@ (800ac7c <model_configure_weights+0x16c>)
 800ab36:	6013      	str	r3, [r2, #0]
    conv2d_conv2d_weights_array.data = AI_PTR(g_model_weights_map[0] + 0);
 800ab38:	4b4f      	ldr	r3, [pc, #316]	@ (800ac78 <model_configure_weights+0x168>)
 800ab3a:	681b      	ldr	r3, [r3, #0]
 800ab3c:	4a4f      	ldr	r2, [pc, #316]	@ (800ac7c <model_configure_weights+0x16c>)
 800ab3e:	6093      	str	r3, [r2, #8]
    conv2d_conv2d_weights_array.data_start = AI_PTR(g_model_weights_map[0] + 0);
 800ab40:	4b4d      	ldr	r3, [pc, #308]	@ (800ac78 <model_configure_weights+0x168>)
 800ab42:	681b      	ldr	r3, [r3, #0]
 800ab44:	4a4d      	ldr	r2, [pc, #308]	@ (800ac7c <model_configure_weights+0x16c>)
 800ab46:	60d3      	str	r3, [r2, #12]
    conv2d_conv2d_bias_array.format |= AI_FMT_FLAG_CONST;
 800ab48:	4b4d      	ldr	r3, [pc, #308]	@ (800ac80 <model_configure_weights+0x170>)
 800ab4a:	681b      	ldr	r3, [r3, #0]
 800ab4c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800ab50:	4a4b      	ldr	r2, [pc, #300]	@ (800ac80 <model_configure_weights+0x170>)
 800ab52:	6013      	str	r3, [r2, #0]
    conv2d_conv2d_bias_array.data = AI_PTR(g_model_weights_map[0] + 1200);
 800ab54:	4b48      	ldr	r3, [pc, #288]	@ (800ac78 <model_configure_weights+0x168>)
 800ab56:	681b      	ldr	r3, [r3, #0]
 800ab58:	f503 6396 	add.w	r3, r3, #1200	@ 0x4b0
 800ab5c:	4a48      	ldr	r2, [pc, #288]	@ (800ac80 <model_configure_weights+0x170>)
 800ab5e:	6093      	str	r3, [r2, #8]
    conv2d_conv2d_bias_array.data_start = AI_PTR(g_model_weights_map[0] + 1200);
 800ab60:	4b45      	ldr	r3, [pc, #276]	@ (800ac78 <model_configure_weights+0x168>)
 800ab62:	681b      	ldr	r3, [r3, #0]
 800ab64:	f503 6396 	add.w	r3, r3, #1200	@ 0x4b0
 800ab68:	4a45      	ldr	r2, [pc, #276]	@ (800ac80 <model_configure_weights+0x170>)
 800ab6a:	60d3      	str	r3, [r2, #12]
    conv2d_1_conv2d_weights_array.format |= AI_FMT_FLAG_CONST;
 800ab6c:	4b45      	ldr	r3, [pc, #276]	@ (800ac84 <model_configure_weights+0x174>)
 800ab6e:	681b      	ldr	r3, [r3, #0]
 800ab70:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800ab74:	4a43      	ldr	r2, [pc, #268]	@ (800ac84 <model_configure_weights+0x174>)
 800ab76:	6013      	str	r3, [r2, #0]
    conv2d_1_conv2d_weights_array.data = AI_PTR(g_model_weights_map[0] + 1320);
 800ab78:	4b3f      	ldr	r3, [pc, #252]	@ (800ac78 <model_configure_weights+0x168>)
 800ab7a:	681b      	ldr	r3, [r3, #0]
 800ab7c:	f503 63a5 	add.w	r3, r3, #1320	@ 0x528
 800ab80:	4a40      	ldr	r2, [pc, #256]	@ (800ac84 <model_configure_weights+0x174>)
 800ab82:	6093      	str	r3, [r2, #8]
    conv2d_1_conv2d_weights_array.data_start = AI_PTR(g_model_weights_map[0] + 1320);
 800ab84:	4b3c      	ldr	r3, [pc, #240]	@ (800ac78 <model_configure_weights+0x168>)
 800ab86:	681b      	ldr	r3, [r3, #0]
 800ab88:	f503 63a5 	add.w	r3, r3, #1320	@ 0x528
 800ab8c:	4a3d      	ldr	r2, [pc, #244]	@ (800ac84 <model_configure_weights+0x174>)
 800ab8e:	60d3      	str	r3, [r2, #12]
    conv2d_1_conv2d_bias_array.format |= AI_FMT_FLAG_CONST;
 800ab90:	4b3d      	ldr	r3, [pc, #244]	@ (800ac88 <model_configure_weights+0x178>)
 800ab92:	681b      	ldr	r3, [r3, #0]
 800ab94:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800ab98:	4a3b      	ldr	r2, [pc, #236]	@ (800ac88 <model_configure_weights+0x178>)
 800ab9a:	6013      	str	r3, [r2, #0]
    conv2d_1_conv2d_bias_array.data = AI_PTR(g_model_weights_map[0] + 30120);
 800ab9c:	4b36      	ldr	r3, [pc, #216]	@ (800ac78 <model_configure_weights+0x168>)
 800ab9e:	681b      	ldr	r3, [r3, #0]
 800aba0:	f503 43eb 	add.w	r3, r3, #30080	@ 0x7580
 800aba4:	3328      	adds	r3, #40	@ 0x28
 800aba6:	4a38      	ldr	r2, [pc, #224]	@ (800ac88 <model_configure_weights+0x178>)
 800aba8:	6093      	str	r3, [r2, #8]
    conv2d_1_conv2d_bias_array.data_start = AI_PTR(g_model_weights_map[0] + 30120);
 800abaa:	4b33      	ldr	r3, [pc, #204]	@ (800ac78 <model_configure_weights+0x168>)
 800abac:	681b      	ldr	r3, [r3, #0]
 800abae:	f503 43eb 	add.w	r3, r3, #30080	@ 0x7580
 800abb2:	3328      	adds	r3, #40	@ 0x28
 800abb4:	4a34      	ldr	r2, [pc, #208]	@ (800ac88 <model_configure_weights+0x178>)
 800abb6:	60d3      	str	r3, [r2, #12]
    dense_dense_weights_array.format |= AI_FMT_FLAG_CONST;
 800abb8:	4b34      	ldr	r3, [pc, #208]	@ (800ac8c <model_configure_weights+0x17c>)
 800abba:	681b      	ldr	r3, [r3, #0]
 800abbc:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800abc0:	4a32      	ldr	r2, [pc, #200]	@ (800ac8c <model_configure_weights+0x17c>)
 800abc2:	6013      	str	r3, [r2, #0]
    dense_dense_weights_array.data = AI_PTR(g_model_weights_map[0] + 30280);
 800abc4:	4b2c      	ldr	r3, [pc, #176]	@ (800ac78 <model_configure_weights+0x168>)
 800abc6:	681b      	ldr	r3, [r3, #0]
 800abc8:	f503 43ec 	add.w	r3, r3, #30208	@ 0x7600
 800abcc:	3348      	adds	r3, #72	@ 0x48
 800abce:	4a2f      	ldr	r2, [pc, #188]	@ (800ac8c <model_configure_weights+0x17c>)
 800abd0:	6093      	str	r3, [r2, #8]
    dense_dense_weights_array.data_start = AI_PTR(g_model_weights_map[0] + 30280);
 800abd2:	4b29      	ldr	r3, [pc, #164]	@ (800ac78 <model_configure_weights+0x168>)
 800abd4:	681b      	ldr	r3, [r3, #0]
 800abd6:	f503 43ec 	add.w	r3, r3, #30208	@ 0x7600
 800abda:	3348      	adds	r3, #72	@ 0x48
 800abdc:	4a2b      	ldr	r2, [pc, #172]	@ (800ac8c <model_configure_weights+0x17c>)
 800abde:	60d3      	str	r3, [r2, #12]
    dense_dense_bias_array.format |= AI_FMT_FLAG_CONST;
 800abe0:	4b2b      	ldr	r3, [pc, #172]	@ (800ac90 <model_configure_weights+0x180>)
 800abe2:	681b      	ldr	r3, [r3, #0]
 800abe4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800abe8:	4a29      	ldr	r2, [pc, #164]	@ (800ac90 <model_configure_weights+0x180>)
 800abea:	6013      	str	r3, [r2, #0]
    dense_dense_bias_array.data = AI_PTR(g_model_weights_map[0] + 1044040);
 800abec:	4b22      	ldr	r3, [pc, #136]	@ (800ac78 <model_configure_weights+0x168>)
 800abee:	681b      	ldr	r3, [r3, #0]
 800abf0:	f503 237e 	add.w	r3, r3, #1040384	@ 0xfe000
 800abf4:	f603 6348 	addw	r3, r3, #3656	@ 0xe48
 800abf8:	4a25      	ldr	r2, [pc, #148]	@ (800ac90 <model_configure_weights+0x180>)
 800abfa:	6093      	str	r3, [r2, #8]
    dense_dense_bias_array.data_start = AI_PTR(g_model_weights_map[0] + 1044040);
 800abfc:	4b1e      	ldr	r3, [pc, #120]	@ (800ac78 <model_configure_weights+0x168>)
 800abfe:	681b      	ldr	r3, [r3, #0]
 800ac00:	f503 237e 	add.w	r3, r3, #1040384	@ 0xfe000
 800ac04:	f603 6348 	addw	r3, r3, #3656	@ 0xe48
 800ac08:	4a21      	ldr	r2, [pc, #132]	@ (800ac90 <model_configure_weights+0x180>)
 800ac0a:	60d3      	str	r3, [r2, #12]
    dense_1_weights_array.format |= AI_FMT_FLAG_CONST;
 800ac0c:	4b21      	ldr	r3, [pc, #132]	@ (800ac94 <model_configure_weights+0x184>)
 800ac0e:	681b      	ldr	r3, [r3, #0]
 800ac10:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800ac14:	4a1f      	ldr	r2, [pc, #124]	@ (800ac94 <model_configure_weights+0x184>)
 800ac16:	6013      	str	r3, [r2, #0]
    dense_1_weights_array.data = AI_PTR(g_model_weights_map[0] + 1044296);
 800ac18:	4b17      	ldr	r3, [pc, #92]	@ (800ac78 <model_configure_weights+0x168>)
 800ac1a:	681b      	ldr	r3, [r3, #0]
 800ac1c:	f503 237e 	add.w	r3, r3, #1040384	@ 0xfe000
 800ac20:	f603 7348 	addw	r3, r3, #3912	@ 0xf48
 800ac24:	4a1b      	ldr	r2, [pc, #108]	@ (800ac94 <model_configure_weights+0x184>)
 800ac26:	6093      	str	r3, [r2, #8]
    dense_1_weights_array.data_start = AI_PTR(g_model_weights_map[0] + 1044296);
 800ac28:	4b13      	ldr	r3, [pc, #76]	@ (800ac78 <model_configure_weights+0x168>)
 800ac2a:	681b      	ldr	r3, [r3, #0]
 800ac2c:	f503 237e 	add.w	r3, r3, #1040384	@ 0xfe000
 800ac30:	f603 7348 	addw	r3, r3, #3912	@ 0xf48
 800ac34:	4a17      	ldr	r2, [pc, #92]	@ (800ac94 <model_configure_weights+0x184>)
 800ac36:	60d3      	str	r3, [r2, #12]
    dense_1_bias_array.format |= AI_FMT_FLAG_CONST;
 800ac38:	4b17      	ldr	r3, [pc, #92]	@ (800ac98 <model_configure_weights+0x188>)
 800ac3a:	681b      	ldr	r3, [r3, #0]
 800ac3c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800ac40:	4a15      	ldr	r2, [pc, #84]	@ (800ac98 <model_configure_weights+0x188>)
 800ac42:	6013      	str	r3, [r2, #0]
    dense_1_bias_array.data = AI_PTR(g_model_weights_map[0] + 1044552);
 800ac44:	4b0c      	ldr	r3, [pc, #48]	@ (800ac78 <model_configure_weights+0x168>)
 800ac46:	681b      	ldr	r3, [r3, #0]
 800ac48:	f503 237f 	add.w	r3, r3, #1044480	@ 0xff000
 800ac4c:	3348      	adds	r3, #72	@ 0x48
 800ac4e:	4a12      	ldr	r2, [pc, #72]	@ (800ac98 <model_configure_weights+0x188>)
 800ac50:	6093      	str	r3, [r2, #8]
    dense_1_bias_array.data_start = AI_PTR(g_model_weights_map[0] + 1044552);
 800ac52:	4b09      	ldr	r3, [pc, #36]	@ (800ac78 <model_configure_weights+0x168>)
 800ac54:	681b      	ldr	r3, [r3, #0]
 800ac56:	f503 237f 	add.w	r3, r3, #1044480	@ 0xff000
 800ac5a:	3348      	adds	r3, #72	@ 0x48
 800ac5c:	4a0e      	ldr	r2, [pc, #56]	@ (800ac98 <model_configure_weights+0x188>)
 800ac5e:	60d3      	str	r3, [r2, #12]
    return true;
 800ac60:	2301      	movs	r3, #1
 800ac62:	e005      	b.n	800ac70 <model_configure_weights+0x160>
  }
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_WEIGHTS);
 800ac64:	2212      	movs	r2, #18
 800ac66:	2130      	movs	r1, #48	@ 0x30
 800ac68:	6878      	ldr	r0, [r7, #4]
 800ac6a:	f000 fa83 	bl	800b174 <ai_platform_network_set_error>
  return false;
 800ac6e:	2300      	movs	r3, #0
}
 800ac70:	4618      	mov	r0, r3
 800ac72:	3708      	adds	r7, #8
 800ac74:	46bd      	mov	sp, r7
 800ac76:	bd80      	pop	{r7, pc}
 800ac78:	2000858c 	.word	0x2000858c
 800ac7c:	2000008c 	.word	0x2000008c
 800ac80:	2000009c 	.word	0x2000009c
 800ac84:	200000ac 	.word	0x200000ac
 800ac88:	200000bc 	.word	0x200000bc
 800ac8c:	200000cc 	.word	0x200000cc
 800ac90:	200000dc 	.word	0x200000dc
 800ac94:	200000ec 	.word	0x200000ec
 800ac98:	200000fc 	.word	0x200000fc

0800ac9c <ai_model_get_error>:
}


AI_API_ENTRY
ai_error ai_model_get_error(ai_handle network)
{
 800ac9c:	b580      	push	{r7, lr}
 800ac9e:	b082      	sub	sp, #8
 800aca0:	af00      	add	r7, sp, #0
 800aca2:	6078      	str	r0, [r7, #4]
  return ai_platform_network_get_error(network);
 800aca4:	6878      	ldr	r0, [r7, #4]
 800aca6:	f000 fa59 	bl	800b15c <ai_platform_network_get_error>
 800acaa:	4603      	mov	r3, r0
}
 800acac:	4618      	mov	r0, r3
 800acae:	3708      	adds	r7, #8
 800acb0:	46bd      	mov	sp, r7
 800acb2:	bd80      	pop	{r7, pc}

0800acb4 <ai_model_create>:


AI_API_ENTRY
ai_error ai_model_create(
  ai_handle* network, const ai_buffer* network_config)
{
 800acb4:	b580      	push	{r7, lr}
 800acb6:	b084      	sub	sp, #16
 800acb8:	af02      	add	r7, sp, #8
 800acba:	6078      	str	r0, [r7, #4]
 800acbc:	6039      	str	r1, [r7, #0]
  return ai_platform_network_create(
 800acbe:	2300      	movs	r3, #0
 800acc0:	9301      	str	r3, [sp, #4]
 800acc2:	2305      	movs	r3, #5
 800acc4:	9300      	str	r3, [sp, #0]
 800acc6:	2301      	movs	r3, #1
 800acc8:	4a04      	ldr	r2, [pc, #16]	@ (800acdc <ai_model_create+0x28>)
 800acca:	6839      	ldr	r1, [r7, #0]
 800accc:	6878      	ldr	r0, [r7, #4]
 800acce:	f000 fb41 	bl	800b354 <ai_platform_network_create>
 800acd2:	4603      	mov	r3, r0
    network, network_config, 
    AI_CONTEXT_OBJ(&AI_NET_OBJ_INSTANCE),
    AI_TOOLS_API_VERSION_MAJOR, AI_TOOLS_API_VERSION_MINOR, AI_TOOLS_API_VERSION_MICRO);
}
 800acd4:	4618      	mov	r0, r3
 800acd6:	3708      	adds	r7, #8
 800acd8:	46bd      	mov	sp, r7
 800acda:	bd80      	pop	{r7, pc}
 800acdc:	2000096c 	.word	0x2000096c

0800ace0 <ai_model_create_and_init>:


AI_API_ENTRY
ai_error ai_model_create_and_init(
  ai_handle* network, const ai_handle activations[], const ai_handle weights[])
{
 800ace0:	b580      	push	{r7, lr}
 800ace2:	b094      	sub	sp, #80	@ 0x50
 800ace4:	af00      	add	r7, sp, #0
 800ace6:	60f8      	str	r0, [r7, #12]
 800ace8:	60b9      	str	r1, [r7, #8]
 800acea:	607a      	str	r2, [r7, #4]
  ai_error err;
  ai_network_params params;

  err = ai_model_create(network, AI_MODEL_DATA_CONFIG);
 800acec:	2100      	movs	r1, #0
 800acee:	68f8      	ldr	r0, [r7, #12]
 800acf0:	f7ff ffe0 	bl	800acb4 <ai_model_create>
 800acf4:	4603      	mov	r3, r0
 800acf6:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (err.type != AI_ERROR_NONE) {
 800acf8:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 800acfc:	2b00      	cmp	r3, #0
 800acfe:	d001      	beq.n	800ad04 <ai_model_create_and_init+0x24>
    return err;
 800ad00:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ad02:	e067      	b.n	800add4 <ai_model_create_and_init+0xf4>
  }
  
  if (ai_model_data_params_get(&params) != true) {
 800ad04:	f107 0310 	add.w	r3, r7, #16
 800ad08:	4618      	mov	r0, r3
 800ad0a:	f000 f8e7 	bl	800aedc <ai_model_data_params_get>
 800ad0e:	4603      	mov	r3, r0
 800ad10:	f083 0301 	eor.w	r3, r3, #1
 800ad14:	b2db      	uxtb	r3, r3
 800ad16:	2b00      	cmp	r3, #0
 800ad18:	d008      	beq.n	800ad2c <ai_model_create_and_init+0x4c>
    err = ai_model_get_error(*network);
 800ad1a:	68fb      	ldr	r3, [r7, #12]
 800ad1c:	681b      	ldr	r3, [r3, #0]
 800ad1e:	4618      	mov	r0, r3
 800ad20:	f7ff ffbc 	bl	800ac9c <ai_model_get_error>
 800ad24:	4603      	mov	r3, r0
 800ad26:	64bb      	str	r3, [r7, #72]	@ 0x48
    return err;
 800ad28:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ad2a:	e053      	b.n	800add4 <ai_model_create_and_init+0xf4>
  }
#if defined(AI_MODEL_DATA_ACTIVATIONS_COUNT)
  /* set the addresses of the activations buffers */
  for (ai_u16 idx=0; activations && idx<params.map_activations.size; idx++) {
 800ad2c:	2300      	movs	r3, #0
 800ad2e:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 800ad32:	e012      	b.n	800ad5a <ai_model_create_and_init+0x7a>
    AI_BUFFER_ARRAY_ITEM_SET_ADDRESS(&params.map_activations, idx, activations[idx]);
 800ad34:	f8b7 104e 	ldrh.w	r1, [r7, #78]	@ 0x4e
 800ad38:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800ad3c:	009b      	lsls	r3, r3, #2
 800ad3e:	68ba      	ldr	r2, [r7, #8]
 800ad40:	4413      	add	r3, r2
 800ad42:	681a      	ldr	r2, [r3, #0]
 800ad44:	f107 0310 	add.w	r3, r7, #16
 800ad48:	330c      	adds	r3, #12
 800ad4a:	4618      	mov	r0, r3
 800ad4c:	f000 f92c 	bl	800afa8 <ai_buffer_array_item_set_address>
  for (ai_u16 idx=0; activations && idx<params.map_activations.size; idx++) {
 800ad50:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800ad54:	3301      	adds	r3, #1
 800ad56:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 800ad5a:	68bb      	ldr	r3, [r7, #8]
 800ad5c:	2b00      	cmp	r3, #0
 800ad5e:	d004      	beq.n	800ad6a <ai_model_create_and_init+0x8a>
 800ad60:	8bfb      	ldrh	r3, [r7, #30]
 800ad62:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 800ad66:	429a      	cmp	r2, r3
 800ad68:	d3e4      	bcc.n	800ad34 <ai_model_create_and_init+0x54>
  }
#endif
#if defined(AI_MODEL_DATA_WEIGHTS_COUNT)
  /* set the addresses of the weight buffers */
  for (ai_u16 idx=0; weights && idx<params.map_weights.size; idx++) {
 800ad6a:	2300      	movs	r3, #0
 800ad6c:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 800ad70:	e012      	b.n	800ad98 <ai_model_create_and_init+0xb8>
    AI_BUFFER_ARRAY_ITEM_SET_ADDRESS(&params.map_weights, idx, weights[idx]);
 800ad72:	f8b7 104c 	ldrh.w	r1, [r7, #76]	@ 0x4c
 800ad76:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 800ad7a:	009b      	lsls	r3, r3, #2
 800ad7c:	687a      	ldr	r2, [r7, #4]
 800ad7e:	4413      	add	r3, r2
 800ad80:	681a      	ldr	r2, [r3, #0]
 800ad82:	f107 0310 	add.w	r3, r7, #16
 800ad86:	3304      	adds	r3, #4
 800ad88:	4618      	mov	r0, r3
 800ad8a:	f000 f90d 	bl	800afa8 <ai_buffer_array_item_set_address>
  for (ai_u16 idx=0; weights && idx<params.map_weights.size; idx++) {
 800ad8e:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 800ad92:	3301      	adds	r3, #1
 800ad94:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	2b00      	cmp	r3, #0
 800ad9c:	d004      	beq.n	800ada8 <ai_model_create_and_init+0xc8>
 800ad9e:	8afb      	ldrh	r3, [r7, #22]
 800ada0:	f8b7 204c 	ldrh.w	r2, [r7, #76]	@ 0x4c
 800ada4:	429a      	cmp	r2, r3
 800ada6:	d3e4      	bcc.n	800ad72 <ai_model_create_and_init+0x92>
  }
#endif
  if (ai_model_init(*network, &params) != true) {
 800ada8:	68fb      	ldr	r3, [r7, #12]
 800adaa:	681b      	ldr	r3, [r3, #0]
 800adac:	f107 0210 	add.w	r2, r7, #16
 800adb0:	4611      	mov	r1, r2
 800adb2:	4618      	mov	r0, r3
 800adb4:	f000 f846 	bl	800ae44 <ai_model_init>
 800adb8:	4603      	mov	r3, r0
 800adba:	f083 0301 	eor.w	r3, r3, #1
 800adbe:	b2db      	uxtb	r3, r3
 800adc0:	2b00      	cmp	r3, #0
 800adc2:	d006      	beq.n	800add2 <ai_model_create_and_init+0xf2>
    err = ai_model_get_error(*network);
 800adc4:	68fb      	ldr	r3, [r7, #12]
 800adc6:	681b      	ldr	r3, [r3, #0]
 800adc8:	4618      	mov	r0, r3
 800adca:	f7ff ff67 	bl	800ac9c <ai_model_get_error>
 800adce:	4603      	mov	r3, r0
 800add0:	64bb      	str	r3, [r7, #72]	@ 0x48
  }
  return err;
 800add2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 800add4:	4618      	mov	r0, r3
 800add6:	3750      	adds	r7, #80	@ 0x50
 800add8:	46bd      	mov	sp, r7
 800adda:	bd80      	pop	{r7, pc}

0800addc <ai_model_inputs_get>:


AI_API_ENTRY
ai_buffer* ai_model_inputs_get(ai_handle network, ai_u16 *n_buffer)
{
 800addc:	b580      	push	{r7, lr}
 800adde:	b082      	sub	sp, #8
 800ade0:	af00      	add	r7, sp, #0
 800ade2:	6078      	str	r0, [r7, #4]
 800ade4:	6039      	str	r1, [r7, #0]
  if (network == AI_HANDLE_NULL) {
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	2b00      	cmp	r3, #0
 800adea:	d104      	bne.n	800adf6 <ai_model_inputs_get+0x1a>
    network = (ai_handle)&AI_NET_OBJ_INSTANCE;
 800adec:	4b06      	ldr	r3, [pc, #24]	@ (800ae08 <ai_model_inputs_get+0x2c>)
 800adee:	607b      	str	r3, [r7, #4]
    AI_NETWORK_OBJ(network)->magic = AI_MAGIC_CONTEXT_TOKEN;
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	4a06      	ldr	r2, [pc, #24]	@ (800ae0c <ai_model_inputs_get+0x30>)
 800adf4:	601a      	str	r2, [r3, #0]
  }
  return ai_platform_inputs_get(network, n_buffer);
 800adf6:	6839      	ldr	r1, [r7, #0]
 800adf8:	6878      	ldr	r0, [r7, #4]
 800adfa:	f000 f9c1 	bl	800b180 <ai_platform_inputs_get>
 800adfe:	4603      	mov	r3, r0
}
 800ae00:	4618      	mov	r0, r3
 800ae02:	3708      	adds	r7, #8
 800ae04:	46bd      	mov	sp, r7
 800ae06:	bd80      	pop	{r7, pc}
 800ae08:	2000096c 	.word	0x2000096c
 800ae0c:	a1c00100 	.word	0xa1c00100

0800ae10 <ai_model_outputs_get>:


AI_API_ENTRY
ai_buffer* ai_model_outputs_get(ai_handle network, ai_u16 *n_buffer)
{
 800ae10:	b580      	push	{r7, lr}
 800ae12:	b082      	sub	sp, #8
 800ae14:	af00      	add	r7, sp, #0
 800ae16:	6078      	str	r0, [r7, #4]
 800ae18:	6039      	str	r1, [r7, #0]
  if (network == AI_HANDLE_NULL) {
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	2b00      	cmp	r3, #0
 800ae1e:	d104      	bne.n	800ae2a <ai_model_outputs_get+0x1a>
    network = (ai_handle)&AI_NET_OBJ_INSTANCE;
 800ae20:	4b06      	ldr	r3, [pc, #24]	@ (800ae3c <ai_model_outputs_get+0x2c>)
 800ae22:	607b      	str	r3, [r7, #4]
    AI_NETWORK_OBJ(network)->magic = AI_MAGIC_CONTEXT_TOKEN;
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	4a06      	ldr	r2, [pc, #24]	@ (800ae40 <ai_model_outputs_get+0x30>)
 800ae28:	601a      	str	r2, [r3, #0]
  }
  return ai_platform_outputs_get(network, n_buffer);
 800ae2a:	6839      	ldr	r1, [r7, #0]
 800ae2c:	6878      	ldr	r0, [r7, #4]
 800ae2e:	f000 fa1d 	bl	800b26c <ai_platform_outputs_get>
 800ae32:	4603      	mov	r3, r0
}
 800ae34:	4618      	mov	r0, r3
 800ae36:	3708      	adds	r7, #8
 800ae38:	46bd      	mov	sp, r7
 800ae3a:	bd80      	pop	{r7, pc}
 800ae3c:	2000096c 	.word	0x2000096c
 800ae40:	a1c00100 	.word	0xa1c00100

0800ae44 <ai_model_init>:


AI_API_ENTRY
ai_bool ai_model_init(
  ai_handle network, const ai_network_params* params)
{
 800ae44:	b580      	push	{r7, lr}
 800ae46:	b084      	sub	sp, #16
 800ae48:	af00      	add	r7, sp, #0
 800ae4a:	6078      	str	r0, [r7, #4]
 800ae4c:	6039      	str	r1, [r7, #0]
  ai_network* net_ctx = AI_NETWORK_OBJ(ai_platform_network_init(network, params));
 800ae4e:	6839      	ldr	r1, [r7, #0]
 800ae50:	6878      	ldr	r0, [r7, #4]
 800ae52:	f000 fac1 	bl	800b3d8 <ai_platform_network_init>
 800ae56:	60f8      	str	r0, [r7, #12]
  ai_bool ok = true;
 800ae58:	2301      	movs	r3, #1
 800ae5a:	72fb      	strb	r3, [r7, #11]

  if (!net_ctx) return false;
 800ae5c:	68fb      	ldr	r3, [r7, #12]
 800ae5e:	2b00      	cmp	r3, #0
 800ae60:	d101      	bne.n	800ae66 <ai_model_init+0x22>
 800ae62:	2300      	movs	r3, #0
 800ae64:	e026      	b.n	800aeb4 <ai_model_init+0x70>
  ok &= model_configure_weights(net_ctx, params);
 800ae66:	6839      	ldr	r1, [r7, #0]
 800ae68:	68f8      	ldr	r0, [r7, #12]
 800ae6a:	f7ff fe51 	bl	800ab10 <model_configure_weights>
 800ae6e:	4603      	mov	r3, r0
 800ae70:	461a      	mov	r2, r3
 800ae72:	7afb      	ldrb	r3, [r7, #11]
 800ae74:	4013      	ands	r3, r2
 800ae76:	2b00      	cmp	r3, #0
 800ae78:	bf14      	ite	ne
 800ae7a:	2301      	movne	r3, #1
 800ae7c:	2300      	moveq	r3, #0
 800ae7e:	72fb      	strb	r3, [r7, #11]
  ok &= model_configure_activations(net_ctx, params);
 800ae80:	6839      	ldr	r1, [r7, #0]
 800ae82:	68f8      	ldr	r0, [r7, #12]
 800ae84:	f7ff fda4 	bl	800a9d0 <model_configure_activations>
 800ae88:	4603      	mov	r3, r0
 800ae8a:	461a      	mov	r2, r3
 800ae8c:	7afb      	ldrb	r3, [r7, #11]
 800ae8e:	4013      	ands	r3, r2
 800ae90:	2b00      	cmp	r3, #0
 800ae92:	bf14      	ite	ne
 800ae94:	2301      	movne	r3, #1
 800ae96:	2300      	moveq	r3, #0
 800ae98:	72fb      	strb	r3, [r7, #11]

  ok &= ai_platform_network_post_init(network);
 800ae9a:	6878      	ldr	r0, [r7, #4]
 800ae9c:	f000 fb6a 	bl	800b574 <ai_platform_network_post_init>
 800aea0:	4603      	mov	r3, r0
 800aea2:	461a      	mov	r2, r3
 800aea4:	7afb      	ldrb	r3, [r7, #11]
 800aea6:	4013      	ands	r3, r2
 800aea8:	2b00      	cmp	r3, #0
 800aeaa:	bf14      	ite	ne
 800aeac:	2301      	movne	r3, #1
 800aeae:	2300      	moveq	r3, #0
 800aeb0:	72fb      	strb	r3, [r7, #11]

  return ok;
 800aeb2:	7afb      	ldrb	r3, [r7, #11]
}
 800aeb4:	4618      	mov	r0, r3
 800aeb6:	3710      	adds	r7, #16
 800aeb8:	46bd      	mov	sp, r7
 800aeba:	bd80      	pop	{r7, pc}

0800aebc <ai_model_run>:


AI_API_ENTRY
ai_i32 ai_model_run(
  ai_handle network, const ai_buffer* input, ai_buffer* output)
{
 800aebc:	b580      	push	{r7, lr}
 800aebe:	b084      	sub	sp, #16
 800aec0:	af00      	add	r7, sp, #0
 800aec2:	60f8      	str	r0, [r7, #12]
 800aec4:	60b9      	str	r1, [r7, #8]
 800aec6:	607a      	str	r2, [r7, #4]
  return ai_platform_network_process(network, input, output);
 800aec8:	687a      	ldr	r2, [r7, #4]
 800aeca:	68b9      	ldr	r1, [r7, #8]
 800aecc:	68f8      	ldr	r0, [r7, #12]
 800aece:	f000 fb81 	bl	800b5d4 <ai_platform_network_process>
 800aed2:	4603      	mov	r3, r0
}
 800aed4:	4618      	mov	r0, r3
 800aed6:	3710      	adds	r7, #16
 800aed8:	46bd      	mov	sp, r7
 800aeda:	bd80      	pop	{r7, pc}

0800aedc <ai_model_data_params_get>:
 * @ingroup model_data
 * @return true if a valid configuration is present, false otherwise
 */
AI_API_ENTRY
ai_bool ai_model_data_params_get(ai_network_params* params)
{
 800aedc:	b580      	push	{r7, lr}
 800aede:	b086      	sub	sp, #24
 800aee0:	af00      	add	r7, sp, #0
 800aee2:	6078      	str	r0, [r7, #4]
  if (!params) return false;
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	2b00      	cmp	r3, #0
 800aee8:	d101      	bne.n	800aeee <ai_model_data_params_get+0x12>
 800aeea:	2300      	movs	r3, #0
 800aeec:	e016      	b.n	800af1c <ai_model_data_params_get+0x40>
  
  const ai_buffer_array map_activations = 
 800aeee:	4a0d      	ldr	r2, [pc, #52]	@ (800af24 <ai_model_data_params_get+0x48>)
 800aef0:	f107 0310 	add.w	r3, r7, #16
 800aef4:	e892 0003 	ldmia.w	r2, {r0, r1}
 800aef8:	e883 0003 	stmia.w	r3, {r0, r1}
    AI_BUFFER_ARRAY_OBJ_INIT(AI_FLAG_NONE, AI_MODEL_DATA_ACTIVATIONS_COUNT, g_model_data_map_activations);
  
  const ai_buffer_array map_weights = 
 800aefc:	4a0a      	ldr	r2, [pc, #40]	@ (800af28 <ai_model_data_params_get+0x4c>)
 800aefe:	f107 0308 	add.w	r3, r7, #8
 800af02:	e892 0003 	ldmia.w	r2, {r0, r1}
 800af06:	e883 0003 	stmia.w	r3, {r0, r1}
    AI_BUFFER_ARRAY_OBJ_INIT(AI_FLAG_NONE, AI_MODEL_DATA_WEIGHTS_COUNT, g_model_data_map_weights);

  return ai_platform_bind_network_params(params, &map_weights, &map_activations);
 800af0a:	f107 0210 	add.w	r2, r7, #16
 800af0e:	f107 0308 	add.w	r3, r7, #8
 800af12:	4619      	mov	r1, r3
 800af14:	6878      	ldr	r0, [r7, #4]
 800af16:	f000 f8ff 	bl	800b118 <ai_platform_bind_network_params>
 800af1a:	4603      	mov	r3, r0
}
 800af1c:	4618      	mov	r0, r3
 800af1e:	3718      	adds	r7, #24
 800af20:	46bd      	mov	sp, r7
 800af22:	bd80      	pop	{r7, pc}
 800af24:	0800db30 	.word	0x0800db30
 800af28:	0800db38 	.word	0x0800db38

0800af2c <ai_buffer_get_size>:
 800af2c:	b378      	cbz	r0, 800af8e <ai_buffer_get_size+0x62>
 800af2e:	b410      	push	{r4}
 800af30:	6803      	ldr	r3, [r0, #0]
 800af32:	4a17      	ldr	r2, [pc, #92]	@ (800af90 <ai_buffer_get_size+0x64>)
 800af34:	f023 437e 	bic.w	r3, r3, #4261412864	@ 0xfe000000
 800af38:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800af3c:	4293      	cmp	r3, r2
 800af3e:	d01e      	beq.n	800af7e <ai_buffer_get_size+0x52>
 800af40:	6984      	ldr	r4, [r0, #24]
 800af42:	6862      	ldr	r2, [r4, #4]
 800af44:	7d03      	ldrb	r3, [r0, #20]
 800af46:	6941      	ldr	r1, [r0, #20]
 800af48:	f1a3 0301 	sub.w	r3, r3, #1
 800af4c:	fab3 f383 	clz	r3, r3
 800af50:	095b      	lsrs	r3, r3, #5
 800af52:	ebb3 2f11 	cmp.w	r3, r1, lsr #8
 800af56:	f3c1 2017 	ubfx	r0, r1, #8, #24
 800af5a:	da0b      	bge.n	800af74 <ai_buffer_get_size+0x48>
 800af5c:	2b01      	cmp	r3, #1
 800af5e:	d102      	bne.n	800af66 <ai_buffer_get_size+0x3a>
 800af60:	2802      	cmp	r0, #2
 800af62:	d007      	beq.n	800af74 <ai_buffer_get_size+0x48>
 800af64:	2302      	movs	r3, #2
 800af66:	f854 1023 	ldr.w	r1, [r4, r3, lsl #2]
 800af6a:	3301      	adds	r3, #1
 800af6c:	4298      	cmp	r0, r3
 800af6e:	fb01 f202 	mul.w	r2, r1, r2
 800af72:	d1f3      	bne.n	800af5c <ai_buffer_get_size+0x30>
 800af74:	ea22 70e2 	bic.w	r0, r2, r2, asr #31
 800af78:	f85d 4b04 	ldr.w	r4, [sp], #4
 800af7c:	4770      	bx	lr
 800af7e:	2900      	cmp	r1, #0
 800af80:	d0de      	beq.n	800af40 <ai_buffer_get_size+0x14>
 800af82:	6984      	ldr	r4, [r0, #24]
 800af84:	6862      	ldr	r2, [r4, #4]
 800af86:	321f      	adds	r2, #31
 800af88:	f022 021f 	bic.w	r2, r2, #31
 800af8c:	e7da      	b.n	800af44 <ai_buffer_get_size+0x18>
 800af8e:	4770      	bx	lr
 800af90:	000400c0 	.word	0x000400c0

0800af94 <ai_buffer_array_sane>:
 800af94:	b138      	cbz	r0, 800afa6 <ai_buffer_array_sane+0x12>
 800af96:	6843      	ldr	r3, [r0, #4]
 800af98:	b123      	cbz	r3, 800afa4 <ai_buffer_array_sane+0x10>
 800af9a:	8840      	ldrh	r0, [r0, #2]
 800af9c:	3800      	subs	r0, #0
 800af9e:	bf18      	it	ne
 800afa0:	2001      	movne	r0, #1
 800afa2:	4770      	bx	lr
 800afa4:	4618      	mov	r0, r3
 800afa6:	4770      	bx	lr

0800afa8 <ai_buffer_array_item_set_address>:
 800afa8:	b150      	cbz	r0, 800afc0 <ai_buffer_array_item_set_address+0x18>
 800afaa:	6843      	ldr	r3, [r0, #4]
 800afac:	b14b      	cbz	r3, 800afc2 <ai_buffer_array_item_set_address+0x1a>
 800afae:	8840      	ldrh	r0, [r0, #2]
 800afb0:	b900      	cbnz	r0, 800afb4 <ai_buffer_array_item_set_address+0xc>
 800afb2:	4770      	bx	lr
 800afb4:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 800afb8:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 800afbc:	2001      	movs	r0, #1
 800afbe:	605a      	str	r2, [r3, #4]
 800afc0:	4770      	bx	lr
 800afc2:	4618      	mov	r0, r3
 800afc4:	4770      	bx	lr
 800afc6:	bf00      	nop

0800afc8 <ai_platform_get_weights_map>:
 800afc8:	2a00      	cmp	r2, #0
 800afca:	d037      	beq.n	800b03c <ai_platform_get_weights_map+0x74>
 800afcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800afce:	4604      	mov	r4, r0
 800afd0:	b1a0      	cbz	r0, 800affc <ai_platform_get_weights_map+0x34>
 800afd2:	460f      	mov	r7, r1
 800afd4:	b191      	cbz	r1, 800affc <ai_platform_get_weights_map+0x34>
 800afd6:	4b25      	ldr	r3, [pc, #148]	@ (800b06c <ai_platform_get_weights_map+0xa4>)
 800afd8:	6810      	ldr	r0, [r2, #0]
 800afda:	4298      	cmp	r0, r3
 800afdc:	4615      	mov	r5, r2
 800afde:	d00f      	beq.n	800b000 <ai_platform_get_weights_map+0x38>
 800afe0:	6855      	ldr	r5, [r2, #4]
 800afe2:	b15d      	cbz	r5, 800affc <ai_platform_get_weights_map+0x34>
 800afe4:	682e      	ldr	r6, [r5, #0]
 800afe6:	429e      	cmp	r6, r3
 800afe8:	d02a      	beq.n	800b040 <ai_platform_get_weights_map+0x78>
 800afea:	f1a1 0001 	sub.w	r0, r1, #1
 800afee:	6025      	str	r5, [r4, #0]
 800aff0:	fab0 f080 	clz	r0, r0
 800aff4:	0940      	lsrs	r0, r0, #5
 800aff6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800aff8:	42a7      	cmp	r7, r4
 800affa:	d034      	beq.n	800b066 <ai_platform_get_weights_map+0x9e>
 800affc:	2000      	movs	r0, #0
 800affe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b000:	1d10      	adds	r0, r2, #4
 800b002:	f7ff ffc7 	bl	800af94 <ai_buffer_array_sane>
 800b006:	2800      	cmp	r0, #0
 800b008:	d0f8      	beq.n	800affc <ai_platform_get_weights_map+0x34>
 800b00a:	88eb      	ldrh	r3, [r5, #6]
 800b00c:	429f      	cmp	r7, r3
 800b00e:	d1f5      	bne.n	800affc <ai_platform_get_weights_map+0x34>
 800b010:	f04f 0c00 	mov.w	ip, #0
 800b014:	1f20      	subs	r0, r4, #4
 800b016:	46e6      	mov	lr, ip
 800b018:	68ab      	ldr	r3, [r5, #8]
 800b01a:	4463      	add	r3, ip
 800b01c:	f10c 0c1c 	add.w	ip, ip, #28
 800b020:	685b      	ldr	r3, [r3, #4]
 800b022:	b12b      	cbz	r3, 800b030 <ai_platform_get_weights_map+0x68>
 800b024:	f10e 0e01 	add.w	lr, lr, #1
 800b028:	4577      	cmp	r7, lr
 800b02a:	f840 3f04 	str.w	r3, [r0, #4]!
 800b02e:	d1f3      	bne.n	800b018 <ai_platform_get_weights_map+0x50>
 800b030:	eba7 000e 	sub.w	r0, r7, lr
 800b034:	fab0 f080 	clz	r0, r0
 800b038:	0940      	lsrs	r0, r0, #5
 800b03a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b03c:	2000      	movs	r0, #0
 800b03e:	4770      	bx	lr
 800b040:	1f20      	subs	r0, r4, #4
 800b042:	462a      	mov	r2, r5
 800b044:	2400      	movs	r4, #0
 800b046:	e000      	b.n	800b04a <ai_platform_get_weights_map+0x82>
 800b048:	461c      	mov	r4, r3
 800b04a:	f852 3f04 	ldr.w	r3, [r2, #4]!
 800b04e:	42b3      	cmp	r3, r6
 800b050:	d0d2      	beq.n	800aff8 <ai_platform_get_weights_map+0x30>
 800b052:	f840 3f04 	str.w	r3, [r0, #4]!
 800b056:	1c63      	adds	r3, r4, #1
 800b058:	429f      	cmp	r7, r3
 800b05a:	d1f5      	bne.n	800b048 <ai_platform_get_weights_map+0x80>
 800b05c:	3402      	adds	r4, #2
 800b05e:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 800b062:	42b3      	cmp	r3, r6
 800b064:	d1ca      	bne.n	800affc <ai_platform_get_weights_map+0x34>
 800b066:	2001      	movs	r0, #1
 800b068:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b06a:	bf00      	nop
 800b06c:	a1facade 	.word	0xa1facade

0800b070 <ai_platform_get_activations_map>:
 800b070:	2a00      	cmp	r2, #0
 800b072:	d038      	beq.n	800b0e6 <ai_platform_get_activations_map+0x76>
 800b074:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b076:	4604      	mov	r4, r0
 800b078:	b1a0      	cbz	r0, 800b0a4 <ai_platform_get_activations_map+0x34>
 800b07a:	460f      	mov	r7, r1
 800b07c:	b191      	cbz	r1, 800b0a4 <ai_platform_get_activations_map+0x34>
 800b07e:	4b25      	ldr	r3, [pc, #148]	@ (800b114 <ai_platform_get_activations_map+0xa4>)
 800b080:	6810      	ldr	r0, [r2, #0]
 800b082:	4298      	cmp	r0, r3
 800b084:	4615      	mov	r5, r2
 800b086:	d00f      	beq.n	800b0a8 <ai_platform_get_activations_map+0x38>
 800b088:	6a15      	ldr	r5, [r2, #32]
 800b08a:	b15d      	cbz	r5, 800b0a4 <ai_platform_get_activations_map+0x34>
 800b08c:	682e      	ldr	r6, [r5, #0]
 800b08e:	429e      	cmp	r6, r3
 800b090:	d02b      	beq.n	800b0ea <ai_platform_get_activations_map+0x7a>
 800b092:	f1a1 0001 	sub.w	r0, r1, #1
 800b096:	6025      	str	r5, [r4, #0]
 800b098:	fab0 f080 	clz	r0, r0
 800b09c:	0940      	lsrs	r0, r0, #5
 800b09e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b0a0:	42a7      	cmp	r7, r4
 800b0a2:	d035      	beq.n	800b110 <ai_platform_get_activations_map+0xa0>
 800b0a4:	2000      	movs	r0, #0
 800b0a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b0a8:	f102 000c 	add.w	r0, r2, #12
 800b0ac:	f7ff ff72 	bl	800af94 <ai_buffer_array_sane>
 800b0b0:	2800      	cmp	r0, #0
 800b0b2:	d0f7      	beq.n	800b0a4 <ai_platform_get_activations_map+0x34>
 800b0b4:	89eb      	ldrh	r3, [r5, #14]
 800b0b6:	429f      	cmp	r7, r3
 800b0b8:	d1f4      	bne.n	800b0a4 <ai_platform_get_activations_map+0x34>
 800b0ba:	f04f 0c00 	mov.w	ip, #0
 800b0be:	1f20      	subs	r0, r4, #4
 800b0c0:	46e6      	mov	lr, ip
 800b0c2:	692b      	ldr	r3, [r5, #16]
 800b0c4:	4463      	add	r3, ip
 800b0c6:	f10c 0c1c 	add.w	ip, ip, #28
 800b0ca:	685b      	ldr	r3, [r3, #4]
 800b0cc:	b12b      	cbz	r3, 800b0da <ai_platform_get_activations_map+0x6a>
 800b0ce:	f10e 0e01 	add.w	lr, lr, #1
 800b0d2:	4577      	cmp	r7, lr
 800b0d4:	f840 3f04 	str.w	r3, [r0, #4]!
 800b0d8:	d1f3      	bne.n	800b0c2 <ai_platform_get_activations_map+0x52>
 800b0da:	eba7 000e 	sub.w	r0, r7, lr
 800b0de:	fab0 f080 	clz	r0, r0
 800b0e2:	0940      	lsrs	r0, r0, #5
 800b0e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b0e6:	2000      	movs	r0, #0
 800b0e8:	4770      	bx	lr
 800b0ea:	1f20      	subs	r0, r4, #4
 800b0ec:	462a      	mov	r2, r5
 800b0ee:	2400      	movs	r4, #0
 800b0f0:	e000      	b.n	800b0f4 <ai_platform_get_activations_map+0x84>
 800b0f2:	461c      	mov	r4, r3
 800b0f4:	f852 3f04 	ldr.w	r3, [r2, #4]!
 800b0f8:	42b3      	cmp	r3, r6
 800b0fa:	d0d1      	beq.n	800b0a0 <ai_platform_get_activations_map+0x30>
 800b0fc:	f840 3f04 	str.w	r3, [r0, #4]!
 800b100:	1c63      	adds	r3, r4, #1
 800b102:	429f      	cmp	r7, r3
 800b104:	d1f5      	bne.n	800b0f2 <ai_platform_get_activations_map+0x82>
 800b106:	3402      	adds	r4, #2
 800b108:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 800b10c:	42b3      	cmp	r3, r6
 800b10e:	d1c9      	bne.n	800b0a4 <ai_platform_get_activations_map+0x34>
 800b110:	2001      	movs	r0, #1
 800b112:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b114:	a1facade 	.word	0xa1facade

0800b118 <ai_platform_bind_network_params>:
 800b118:	b1a0      	cbz	r0, 800b144 <ai_platform_bind_network_params+0x2c>
 800b11a:	b1b1      	cbz	r1, 800b14a <ai_platform_bind_network_params+0x32>
 800b11c:	b1c2      	cbz	r2, 800b150 <ai_platform_bind_network_params+0x38>
 800b11e:	b410      	push	{r4}
 800b120:	4603      	mov	r3, r0
 800b122:	4c0d      	ldr	r4, [pc, #52]	@ (800b158 <ai_platform_bind_network_params+0x40>)
 800b124:	f843 4b04 	str.w	r4, [r3], #4
 800b128:	f100 0c0c 	add.w	ip, r0, #12
 800b12c:	c903      	ldmia	r1, {r0, r1}
 800b12e:	e883 0003 	stmia.w	r3, {r0, r1}
 800b132:	e892 0003 	ldmia.w	r2, {r0, r1}
 800b136:	e88c 0003 	stmia.w	ip, {r0, r1}
 800b13a:	2301      	movs	r3, #1
 800b13c:	4618      	mov	r0, r3
 800b13e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b142:	4770      	bx	lr
 800b144:	4603      	mov	r3, r0
 800b146:	4618      	mov	r0, r3
 800b148:	4770      	bx	lr
 800b14a:	460b      	mov	r3, r1
 800b14c:	4618      	mov	r0, r3
 800b14e:	4770      	bx	lr
 800b150:	4613      	mov	r3, r2
 800b152:	4618      	mov	r0, r3
 800b154:	4770      	bx	lr
 800b156:	bf00      	nop
 800b158:	a1facade 	.word	0xa1facade

0800b15c <ai_platform_network_get_error>:
 800b15c:	4b04      	ldr	r3, [pc, #16]	@ (800b170 <ai_platform_network_get_error+0x14>)
 800b15e:	6802      	ldr	r2, [r0, #0]
 800b160:	4393      	bics	r3, r2
 800b162:	d102      	bne.n	800b16a <ai_platform_network_get_error+0xe>
 800b164:	300c      	adds	r0, #12
 800b166:	f000 bc77 	b.w	800ba58 <core_get_error>
 800b16a:	f241 0010 	movw	r0, #4112	@ 0x1010
 800b16e:	4770      	bx	lr
 800b170:	a1c00100 	.word	0xa1c00100

0800b174 <ai_platform_network_set_error>:
 800b174:	b110      	cbz	r0, 800b17c <ai_platform_network_set_error+0x8>
 800b176:	300c      	adds	r0, #12
 800b178:	f000 bc74 	b.w	800ba64 <core_set_error>
 800b17c:	4770      	bx	lr
 800b17e:	bf00      	nop

0800b180 <ai_platform_inputs_get>:
 800b180:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b184:	4b38      	ldr	r3, [pc, #224]	@ (800b268 <ai_platform_inputs_get+0xe8>)
 800b186:	6802      	ldr	r2, [r0, #0]
 800b188:	b085      	sub	sp, #20
 800b18a:	4393      	bics	r3, r2
 800b18c:	9003      	str	r0, [sp, #12]
 800b18e:	9102      	str	r1, [sp, #8]
 800b190:	d160      	bne.n	800b254 <ai_platform_inputs_get+0xd4>
 800b192:	8e03      	ldrh	r3, [r0, #48]	@ 0x30
 800b194:	2b00      	cmp	r3, #0
 800b196:	d04f      	beq.n	800b238 <ai_platform_inputs_get+0xb8>
 800b198:	f8d0 a034 	ldr.w	sl, [r0, #52]	@ 0x34
 800b19c:	f1ba 0f00 	cmp.w	sl, #0
 800b1a0:	d04a      	beq.n	800b238 <ai_platform_inputs_get+0xb8>
 800b1a2:	f04f 0b00 	mov.w	fp, #0
 800b1a6:	465d      	mov	r5, fp
 800b1a8:	e016      	b.n	800b1d8 <ai_platform_inputs_get+0x58>
 800b1aa:	9901      	ldr	r1, [sp, #4]
 800b1ac:	2201      	movs	r2, #1
 800b1ae:	507a      	str	r2, [r7, r1]
 800b1b0:	69b1      	ldr	r1, [r6, #24]
 800b1b2:	684e      	ldr	r6, [r1, #4]
 800b1b4:	60a3      	str	r3, [r4, #8]
 800b1b6:	f04f 0201 	mov.w	r2, #1
 800b1ba:	7522      	strb	r2, [r4, #20]
 800b1bc:	6961      	ldr	r1, [r4, #20]
 800b1be:	6020      	str	r0, [r4, #0]
 800b1c0:	f369 211f 	bfi	r1, r9, #8, #24
 800b1c4:	2300      	movs	r3, #0
 800b1c6:	e9c4 3603 	strd	r3, r6, [r4, #12]
 800b1ca:	e9c4 1805 	strd	r1, r8, [r4, #20]
 800b1ce:	f8c4 c004 	str.w	ip, [r4, #4]
 800b1d2:	3501      	adds	r5, #1
 800b1d4:	f10b 0b1c 	add.w	fp, fp, #28
 800b1d8:	f8ba 3000 	ldrh.w	r3, [sl]
 800b1dc:	42ab      	cmp	r3, r5
 800b1de:	b2aa      	uxth	r2, r5
 800b1e0:	d93c      	bls.n	800b25c <ai_platform_inputs_get+0xdc>
 800b1e2:	f8da 3004 	ldr.w	r3, [sl, #4]
 800b1e6:	00e9      	lsls	r1, r5, #3
 800b1e8:	9101      	str	r1, [sp, #4]
 800b1ea:	2b00      	cmp	r3, #0
 800b1ec:	d036      	beq.n	800b25c <ai_platform_inputs_get+0xdc>
 800b1ee:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
 800b1f2:	2e00      	cmp	r6, #0
 800b1f4:	d032      	beq.n	800b25c <ai_platform_inputs_get+0xdc>
 800b1f6:	f8da 3008 	ldr.w	r3, [sl, #8]
 800b1fa:	69b2      	ldr	r2, [r6, #24]
 800b1fc:	f8d6 800c 	ldr.w	r8, [r6, #12]
 800b200:	6810      	ldr	r0, [r2, #0]
 800b202:	e9d3 4701 	ldrd	r4, r7, [r3, #4]
 800b206:	68b3      	ldr	r3, [r6, #8]
 800b208:	f3c3 2917 	ubfx	r9, r3, #8, #24
 800b20c:	f001 feac 	bl	800cf68 <ai_array_to_buffer_fmt>
 800b210:	69b1      	ldr	r1, [r6, #24]
 800b212:	eb07 03c5 	add.w	r3, r7, r5, lsl #3
 800b216:	f8d1 c008 	ldr.w	ip, [r1, #8]
 800b21a:	445c      	add	r4, fp
 800b21c:	2b00      	cmp	r3, #0
 800b21e:	d0c8      	beq.n	800b1b2 <ai_platform_inputs_get+0x32>
 800b220:	2100      	movs	r1, #0
 800b222:	f847 1035 	str.w	r1, [r7, r5, lsl #3]
 800b226:	6831      	ldr	r1, [r6, #0]
 800b228:	6059      	str	r1, [r3, #4]
 800b22a:	b111      	cbz	r1, 800b232 <ai_platform_inputs_get+0xb2>
 800b22c:	8849      	ldrh	r1, [r1, #2]
 800b22e:	2900      	cmp	r1, #0
 800b230:	d1bb      	bne.n	800b1aa <ai_platform_inputs_get+0x2a>
 800b232:	69b1      	ldr	r1, [r6, #24]
 800b234:	2300      	movs	r3, #0
 800b236:	e7bc      	b.n	800b1b2 <ai_platform_inputs_get+0x32>
 800b238:	9803      	ldr	r0, [sp, #12]
 800b23a:	2218      	movs	r2, #24
 800b23c:	2111      	movs	r1, #17
 800b23e:	300c      	adds	r0, #12
 800b240:	f000 fc10 	bl	800ba64 <core_set_error>
 800b244:	2200      	movs	r2, #0
 800b246:	4610      	mov	r0, r2
 800b248:	9b02      	ldr	r3, [sp, #8]
 800b24a:	b103      	cbz	r3, 800b24e <ai_platform_inputs_get+0xce>
 800b24c:	801a      	strh	r2, [r3, #0]
 800b24e:	b005      	add	sp, #20
 800b250:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b254:	2000      	movs	r0, #0
 800b256:	b005      	add	sp, #20
 800b258:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b25c:	2a00      	cmp	r2, #0
 800b25e:	d0eb      	beq.n	800b238 <ai_platform_inputs_get+0xb8>
 800b260:	f8da 3008 	ldr.w	r3, [sl, #8]
 800b264:	6858      	ldr	r0, [r3, #4]
 800b266:	e7ef      	b.n	800b248 <ai_platform_inputs_get+0xc8>
 800b268:	a1c00100 	.word	0xa1c00100

0800b26c <ai_platform_outputs_get>:
 800b26c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b270:	4b37      	ldr	r3, [pc, #220]	@ (800b350 <ai_platform_outputs_get+0xe4>)
 800b272:	6802      	ldr	r2, [r0, #0]
 800b274:	b085      	sub	sp, #20
 800b276:	4393      	bics	r3, r2
 800b278:	9003      	str	r0, [sp, #12]
 800b27a:	9102      	str	r1, [sp, #8]
 800b27c:	d15d      	bne.n	800b33a <ai_platform_outputs_get+0xce>
 800b27e:	8e03      	ldrh	r3, [r0, #48]	@ 0x30
 800b280:	2b01      	cmp	r3, #1
 800b282:	d94c      	bls.n	800b31e <ai_platform_outputs_get+0xb2>
 800b284:	f04f 0b00 	mov.w	fp, #0
 800b288:	f8d0 a034 	ldr.w	sl, [r0, #52]	@ 0x34
 800b28c:	465d      	mov	r5, fp
 800b28e:	46d8      	mov	r8, fp
 800b290:	e016      	b.n	800b2c0 <ai_platform_outputs_get+0x54>
 800b292:	9a01      	ldr	r2, [sp, #4]
 800b294:	2101      	movs	r1, #1
 800b296:	50b9      	str	r1, [r7, r2]
 800b298:	69b2      	ldr	r2, [r6, #24]
 800b29a:	6856      	ldr	r6, [r2, #4]
 800b29c:	6020      	str	r0, [r4, #0]
 800b29e:	f04f 0201 	mov.w	r2, #1
 800b2a2:	7522      	strb	r2, [r4, #20]
 800b2a4:	6960      	ldr	r0, [r4, #20]
 800b2a6:	f8c4 c004 	str.w	ip, [r4, #4]
 800b2aa:	f369 201f 	bfi	r0, r9, #8, #24
 800b2ae:	e9c4 6004 	strd	r6, r0, [r4, #16]
 800b2b2:	e9c4 3802 	strd	r3, r8, [r4, #8]
 800b2b6:	9b00      	ldr	r3, [sp, #0]
 800b2b8:	61a3      	str	r3, [r4, #24]
 800b2ba:	3501      	adds	r5, #1
 800b2bc:	f10b 0b1c 	add.w	fp, fp, #28
 800b2c0:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 800b2c4:	42ab      	cmp	r3, r5
 800b2c6:	b2aa      	uxth	r2, r5
 800b2c8:	d93b      	bls.n	800b342 <ai_platform_outputs_get+0xd6>
 800b2ca:	f8da 3010 	ldr.w	r3, [sl, #16]
 800b2ce:	00e9      	lsls	r1, r5, #3
 800b2d0:	9101      	str	r1, [sp, #4]
 800b2d2:	2b00      	cmp	r3, #0
 800b2d4:	d035      	beq.n	800b342 <ai_platform_outputs_get+0xd6>
 800b2d6:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
 800b2da:	2e00      	cmp	r6, #0
 800b2dc:	d031      	beq.n	800b342 <ai_platform_outputs_get+0xd6>
 800b2de:	f8da 3014 	ldr.w	r3, [sl, #20]
 800b2e2:	69b2      	ldr	r2, [r6, #24]
 800b2e4:	e9d3 4701 	ldrd	r4, r7, [r3, #4]
 800b2e8:	68b3      	ldr	r3, [r6, #8]
 800b2ea:	6810      	ldr	r0, [r2, #0]
 800b2ec:	f3c3 2917 	ubfx	r9, r3, #8, #24
 800b2f0:	68f3      	ldr	r3, [r6, #12]
 800b2f2:	9300      	str	r3, [sp, #0]
 800b2f4:	f001 fe38 	bl	800cf68 <ai_array_to_buffer_fmt>
 800b2f8:	69b2      	ldr	r2, [r6, #24]
 800b2fa:	eb07 03c5 	add.w	r3, r7, r5, lsl #3
 800b2fe:	f8d2 c008 	ldr.w	ip, [r2, #8]
 800b302:	445c      	add	r4, fp
 800b304:	2b00      	cmp	r3, #0
 800b306:	d0c8      	beq.n	800b29a <ai_platform_outputs_get+0x2e>
 800b308:	f847 8035 	str.w	r8, [r7, r5, lsl #3]
 800b30c:	6832      	ldr	r2, [r6, #0]
 800b30e:	605a      	str	r2, [r3, #4]
 800b310:	b112      	cbz	r2, 800b318 <ai_platform_outputs_get+0xac>
 800b312:	8852      	ldrh	r2, [r2, #2]
 800b314:	2a00      	cmp	r2, #0
 800b316:	d1bc      	bne.n	800b292 <ai_platform_outputs_get+0x26>
 800b318:	69b2      	ldr	r2, [r6, #24]
 800b31a:	2300      	movs	r3, #0
 800b31c:	e7bd      	b.n	800b29a <ai_platform_outputs_get+0x2e>
 800b31e:	9803      	ldr	r0, [sp, #12]
 800b320:	2218      	movs	r2, #24
 800b322:	2111      	movs	r1, #17
 800b324:	300c      	adds	r0, #12
 800b326:	f000 fb9d 	bl	800ba64 <core_set_error>
 800b32a:	2200      	movs	r2, #0
 800b32c:	4610      	mov	r0, r2
 800b32e:	9b02      	ldr	r3, [sp, #8]
 800b330:	b103      	cbz	r3, 800b334 <ai_platform_outputs_get+0xc8>
 800b332:	801a      	strh	r2, [r3, #0]
 800b334:	b005      	add	sp, #20
 800b336:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b33a:	2000      	movs	r0, #0
 800b33c:	b005      	add	sp, #20
 800b33e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b342:	2a00      	cmp	r2, #0
 800b344:	d0eb      	beq.n	800b31e <ai_platform_outputs_get+0xb2>
 800b346:	f8da 3014 	ldr.w	r3, [sl, #20]
 800b34a:	6858      	ldr	r0, [r3, #4]
 800b34c:	e7ef      	b.n	800b32e <ai_platform_outputs_get+0xc2>
 800b34e:	bf00      	nop
 800b350:	a1c00100 	.word	0xa1c00100

0800b354 <ai_platform_network_create>:
 800b354:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b358:	b083      	sub	sp, #12
 800b35a:	f89d 9028 	ldrb.w	r9, [sp, #40]	@ 0x28
 800b35e:	f89d 802c 	ldrb.w	r8, [sp, #44]	@ 0x2c
 800b362:	b320      	cbz	r0, 800b3ae <ai_platform_network_create+0x5a>
 800b364:	6002      	str	r2, [r0, #0]
 800b366:	4616      	mov	r6, r2
 800b368:	461f      	mov	r7, r3
 800b36a:	4604      	mov	r4, r0
 800b36c:	f000 fb72 	bl	800ba54 <core_init>
 800b370:	b970      	cbnz	r0, 800b390 <ai_platform_network_create+0x3c>
 800b372:	2530      	movs	r5, #48	@ 0x30
 800b374:	2300      	movs	r3, #0
 800b376:	6023      	str	r3, [r4, #0]
 800b378:	2410      	movs	r4, #16
 800b37a:	4642      	mov	r2, r8
 800b37c:	4649      	mov	r1, r9
 800b37e:	4638      	mov	r0, r7
 800b380:	f001 fe74 	bl	800d06c <ai_version_get>
 800b384:	60b0      	str	r0, [r6, #8]
 800b386:	ea45 2004 	orr.w	r0, r5, r4, lsl #8
 800b38a:	b003      	add	sp, #12
 800b38c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b390:	2200      	movs	r2, #0
 800b392:	4649      	mov	r1, r9
 800b394:	4638      	mov	r0, r7
 800b396:	f001 fe69 	bl	800d06c <ai_version_get>
 800b39a:	2200      	movs	r2, #0
 800b39c:	4605      	mov	r5, r0
 800b39e:	2105      	movs	r1, #5
 800b3a0:	2001      	movs	r0, #1
 800b3a2:	f001 fe63 	bl	800d06c <ai_version_get>
 800b3a6:	4285      	cmp	r5, r0
 800b3a8:	d008      	beq.n	800b3bc <ai_platform_network_create+0x68>
 800b3aa:	2501      	movs	r5, #1
 800b3ac:	e7e2      	b.n	800b374 <ai_platform_network_create+0x20>
 800b3ae:	2510      	movs	r5, #16
 800b3b0:	462c      	mov	r4, r5
 800b3b2:	ea45 2004 	orr.w	r0, r5, r4, lsl #8
 800b3b6:	b003      	add	sp, #12
 800b3b8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b3bc:	4b05      	ldr	r3, [pc, #20]	@ (800b3d4 <ai_platform_network_create+0x80>)
 800b3be:	9301      	str	r3, [sp, #4]
 800b3c0:	a801      	add	r0, sp, #4
 800b3c2:	f000 fb5b 	bl	800ba7c <ai_check_custom_types>
 800b3c6:	b110      	cbz	r0, 800b3ce <ai_platform_network_create+0x7a>
 800b3c8:	2400      	movs	r4, #0
 800b3ca:	4625      	mov	r5, r4
 800b3cc:	e7d5      	b.n	800b37a <ai_platform_network_create+0x26>
 800b3ce:	2502      	movs	r5, #2
 800b3d0:	e7d0      	b.n	800b374 <ai_platform_network_create+0x20>
 800b3d2:	bf00      	nop
 800b3d4:	84048403 	.word	0x84048403

0800b3d8 <ai_platform_network_init>:
 800b3d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b3dc:	4b63      	ldr	r3, [pc, #396]	@ (800b56c <ai_platform_network_init+0x194>)
 800b3de:	6802      	ldr	r2, [r0, #0]
 800b3e0:	4393      	bics	r3, r2
 800b3e2:	b083      	sub	sp, #12
 800b3e4:	d156      	bne.n	800b494 <ai_platform_network_init+0xbc>
 800b3e6:	4604      	mov	r4, r0
 800b3e8:	460f      	mov	r7, r1
 800b3ea:	2900      	cmp	r1, #0
 800b3ec:	f000 80a9 	beq.w	800b542 <ai_platform_network_init+0x16a>
 800b3f0:	680b      	ldr	r3, [r1, #0]
 800b3f2:	495f      	ldr	r1, [pc, #380]	@ (800b570 <ai_platform_network_init+0x198>)
 800b3f4:	428b      	cmp	r3, r1
 800b3f6:	d113      	bne.n	800b420 <ai_platform_network_init+0x48>
 800b3f8:	495c      	ldr	r1, [pc, #368]	@ (800b56c <ai_platform_network_init+0x194>)
 800b3fa:	89bd      	ldrh	r5, [r7, #12]
 800b3fc:	f8b7 a00e 	ldrh.w	sl, [r7, #14]
 800b400:	f8d7 8010 	ldr.w	r8, [r7, #16]
 800b404:	f8b7 b004 	ldrh.w	fp, [r7, #4]
 800b408:	f8b7 9006 	ldrh.w	r9, [r7, #6]
 800b40c:	68be      	ldr	r6, [r7, #8]
 800b40e:	428a      	cmp	r2, r1
 800b410:	d02c      	beq.n	800b46c <ai_platform_network_init+0x94>
 800b412:	2303      	movs	r3, #3
 800b414:	6123      	str	r3, [r4, #16]
 800b416:	4627      	mov	r7, r4
 800b418:	4638      	mov	r0, r7
 800b41a:	b003      	add	sp, #12
 800b41c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b420:	2101      	movs	r1, #1
 800b422:	4638      	mov	r0, r7
 800b424:	9301      	str	r3, [sp, #4]
 800b426:	f8d7 b004 	ldr.w	fp, [r7, #4]
 800b42a:	f7ff fd7f 	bl	800af2c <ai_buffer_get_size>
 800b42e:	f107 081c 	add.w	r8, r7, #28
 800b432:	4605      	mov	r5, r0
 800b434:	2101      	movs	r1, #1
 800b436:	4640      	mov	r0, r8
 800b438:	463e      	mov	r6, r7
 800b43a:	6a3f      	ldr	r7, [r7, #32]
 800b43c:	f7ff fd76 	bl	800af2c <ai_buffer_get_size>
 800b440:	2d00      	cmp	r5, #0
 800b442:	9b01      	ldr	r3, [sp, #4]
 800b444:	bf0a      	itet	eq
 800b446:	46a9      	moveq	r9, r5
 800b448:	f04f 0901 	movne.w	r9, #1
 800b44c:	462e      	moveq	r6, r5
 800b44e:	b330      	cbz	r0, 800b49e <ai_platform_network_init+0xc6>
 800b450:	2f00      	cmp	r7, #0
 800b452:	f000 8084 	beq.w	800b55e <ai_platform_network_init+0x186>
 800b456:	f04f 0a01 	mov.w	sl, #1
 800b45a:	f1bb 0f00 	cmp.w	fp, #0
 800b45e:	d021      	beq.n	800b4a4 <ai_platform_network_init+0xcc>
 800b460:	2500      	movs	r5, #0
 800b462:	6822      	ldr	r2, [r4, #0]
 800b464:	4941      	ldr	r1, [pc, #260]	@ (800b56c <ai_platform_network_init+0x194>)
 800b466:	428a      	cmp	r2, r1
 800b468:	46ab      	mov	fp, r5
 800b46a:	d1d2      	bne.n	800b412 <ai_platform_network_init+0x3a>
 800b46c:	8c62      	ldrh	r2, [r4, #34]	@ 0x22
 800b46e:	454a      	cmp	r2, r9
 800b470:	4a3f      	ldr	r2, [pc, #252]	@ (800b570 <ai_platform_network_init+0x198>)
 800b472:	d221      	bcs.n	800b4b8 <ai_platform_network_init+0xe0>
 800b474:	4293      	cmp	r3, r2
 800b476:	d15c      	bne.n	800b532 <ai_platform_network_init+0x15a>
 800b478:	6266      	str	r6, [r4, #36]	@ 0x24
 800b47a:	f8a4 9022 	strh.w	r9, [r4, #34]	@ 0x22
 800b47e:	f8a4 b020 	strh.w	fp, [r4, #32]
 800b482:	f8c4 802c 	str.w	r8, [r4, #44]	@ 0x2c
 800b486:	f8a4 a02a 	strh.w	sl, [r4, #42]	@ 0x2a
 800b48a:	8525      	strh	r5, [r4, #40]	@ 0x28
 800b48c:	4620      	mov	r0, r4
 800b48e:	f000 fb1f 	bl	800bad0 <ai_layers_init_all>
 800b492:	e7be      	b.n	800b412 <ai_platform_network_init+0x3a>
 800b494:	2700      	movs	r7, #0
 800b496:	4638      	mov	r0, r7
 800b498:	b003      	add	sp, #12
 800b49a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b49e:	4680      	mov	r8, r0
 800b4a0:	4682      	mov	sl, r0
 800b4a2:	e7da      	b.n	800b45a <ai_platform_network_init+0x82>
 800b4a4:	2d00      	cmp	r5, #0
 800b4a6:	d0dc      	beq.n	800b462 <ai_platform_network_init+0x8a>
 800b4a8:	2212      	movs	r2, #18
 800b4aa:	2110      	movs	r1, #16
 800b4ac:	f104 000c 	add.w	r0, r4, #12
 800b4b0:	f000 fad8 	bl	800ba64 <core_set_error>
 800b4b4:	465f      	mov	r7, fp
 800b4b6:	e7af      	b.n	800b418 <ai_platform_network_init+0x40>
 800b4b8:	4293      	cmp	r3, r2
 800b4ba:	d0dd      	beq.n	800b478 <ai_platform_network_init+0xa0>
 800b4bc:	f1b9 0f00 	cmp.w	r9, #0
 800b4c0:	d018      	beq.n	800b4f4 <ai_platform_network_init+0x11c>
 800b4c2:	ebc9 03c9 	rsb	r3, r9, r9, lsl #3
 800b4c6:	009b      	lsls	r3, r3, #2
 800b4c8:	f8cd 9004 	str.w	r9, [sp, #4]
 800b4cc:	2700      	movs	r7, #0
 800b4ce:	4699      	mov	r9, r3
 800b4d0:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800b4d2:	eb06 0e07 	add.w	lr, r6, r7
 800b4d6:	eb03 0c07 	add.w	ip, r3, r7
 800b4da:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800b4de:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800b4e2:	e89e 0007 	ldmia.w	lr, {r0, r1, r2}
 800b4e6:	371c      	adds	r7, #28
 800b4e8:	45b9      	cmp	r9, r7
 800b4ea:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
 800b4ee:	d1ef      	bne.n	800b4d0 <ai_platform_network_init+0xf8>
 800b4f0:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800b4f4:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 800b4f6:	f8a4 9022 	strh.w	r9, [r4, #34]	@ 0x22
 800b4fa:	4553      	cmp	r3, sl
 800b4fc:	f8a4 b020 	strh.w	fp, [r4, #32]
 800b500:	d325      	bcc.n	800b54e <ai_platform_network_init+0x176>
 800b502:	f1ba 0f00 	cmp.w	sl, #0
 800b506:	d0be      	beq.n	800b486 <ai_platform_network_init+0xae>
 800b508:	ebca 0eca 	rsb	lr, sl, sl, lsl #3
 800b50c:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 800b510:	f04f 0c00 	mov.w	ip, #0
 800b514:	eb08 070c 	add.w	r7, r8, ip
 800b518:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800b51a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b51c:	4466      	add	r6, ip
 800b51e:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800b520:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 800b524:	f10c 0c1c 	add.w	ip, ip, #28
 800b528:	45f4      	cmp	ip, lr
 800b52a:	e886 0007 	stmia.w	r6, {r0, r1, r2}
 800b52e:	d1f1      	bne.n	800b514 <ai_platform_network_init+0x13c>
 800b530:	e7a9      	b.n	800b486 <ai_platform_network_init+0xae>
 800b532:	2212      	movs	r2, #18
 800b534:	2116      	movs	r1, #22
 800b536:	f104 000c 	add.w	r0, r4, #12
 800b53a:	f000 fa93 	bl	800ba64 <core_set_error>
 800b53e:	2700      	movs	r7, #0
 800b540:	e76a      	b.n	800b418 <ai_platform_network_init+0x40>
 800b542:	2211      	movs	r2, #17
 800b544:	2110      	movs	r1, #16
 800b546:	300c      	adds	r0, #12
 800b548:	f000 fa8c 	bl	800ba64 <core_set_error>
 800b54c:	e764      	b.n	800b418 <ai_platform_network_init+0x40>
 800b54e:	2213      	movs	r2, #19
 800b550:	2116      	movs	r1, #22
 800b552:	f104 000c 	add.w	r0, r4, #12
 800b556:	f000 fa85 	bl	800ba64 <core_set_error>
 800b55a:	2700      	movs	r7, #0
 800b55c:	e75c      	b.n	800b418 <ai_platform_network_init+0x40>
 800b55e:	2213      	movs	r2, #19
 800b560:	2110      	movs	r1, #16
 800b562:	f104 000c 	add.w	r0, r4, #12
 800b566:	f000 fa7d 	bl	800ba64 <core_set_error>
 800b56a:	e755      	b.n	800b418 <ai_platform_network_init+0x40>
 800b56c:	a1c00100 	.word	0xa1c00100
 800b570:	a1facade 	.word	0xa1facade

0800b574 <ai_platform_network_post_init>:
 800b574:	b538      	push	{r3, r4, r5, lr}
 800b576:	4b16      	ldr	r3, [pc, #88]	@ (800b5d0 <ai_platform_network_post_init+0x5c>)
 800b578:	6802      	ldr	r2, [r0, #0]
 800b57a:	ea02 0103 	and.w	r1, r2, r3
 800b57e:	4393      	bics	r3, r2
 800b580:	d108      	bne.n	800b594 <ai_platform_network_post_init+0x20>
 800b582:	6903      	ldr	r3, [r0, #16]
 800b584:	f013 0502 	ands.w	r5, r3, #2
 800b588:	4604      	mov	r4, r0
 800b58a:	d005      	beq.n	800b598 <ai_platform_network_post_init+0x24>
 800b58c:	428a      	cmp	r2, r1
 800b58e:	d00a      	beq.n	800b5a6 <ai_platform_network_post_init+0x32>
 800b590:	2001      	movs	r0, #1
 800b592:	bd38      	pop	{r3, r4, r5, pc}
 800b594:	2000      	movs	r0, #0
 800b596:	bd38      	pop	{r3, r4, r5, pc}
 800b598:	2210      	movs	r2, #16
 800b59a:	2111      	movs	r1, #17
 800b59c:	300c      	adds	r0, #12
 800b59e:	f000 fa61 	bl	800ba64 <core_set_error>
 800b5a2:	4628      	mov	r0, r5
 800b5a4:	bd38      	pop	{r3, r4, r5, pc}
 800b5a6:	f000 faa1 	bl	800baec <ai_layers_post_init_all>
 800b5aa:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800b5ac:	2b00      	cmp	r3, #0
 800b5ae:	d0ef      	beq.n	800b590 <ai_platform_network_post_init+0x1c>
 800b5b0:	6ba5      	ldr	r5, [r4, #56]	@ 0x38
 800b5b2:	e008      	b.n	800b5c6 <ai_platform_network_post_init+0x52>
 800b5b4:	e9d4 3210 	ldrd	r3, r2, [r4, #64]	@ 0x40
 800b5b8:	4798      	blx	r3
 800b5ba:	692b      	ldr	r3, [r5, #16]
 800b5bc:	42ab      	cmp	r3, r5
 800b5be:	d0e7      	beq.n	800b590 <ai_platform_network_post_init+0x1c>
 800b5c0:	2b00      	cmp	r3, #0
 800b5c2:	d0e5      	beq.n	800b590 <ai_platform_network_post_init+0x1c>
 800b5c4:	461d      	mov	r5, r3
 800b5c6:	4629      	mov	r1, r5
 800b5c8:	2000      	movs	r0, #0
 800b5ca:	2d00      	cmp	r5, #0
 800b5cc:	d1f2      	bne.n	800b5b4 <ai_platform_network_post_init+0x40>
 800b5ce:	e7df      	b.n	800b590 <ai_platform_network_post_init+0x1c>
 800b5d0:	a1c00100 	.word	0xa1c00100

0800b5d4 <ai_platform_network_process>:
 800b5d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b5d8:	4bb5      	ldr	r3, [pc, #724]	@ (800b8b0 <ai_platform_network_process+0x2dc>)
 800b5da:	4605      	mov	r5, r0
 800b5dc:	6800      	ldr	r0, [r0, #0]
 800b5de:	b085      	sub	sp, #20
 800b5e0:	4383      	bics	r3, r0
 800b5e2:	9202      	str	r2, [sp, #8]
 800b5e4:	f040 8140 	bne.w	800b868 <ai_platform_network_process+0x294>
 800b5e8:	8e2b      	ldrh	r3, [r5, #48]	@ 0x30
 800b5ea:	2b00      	cmp	r3, #0
 800b5ec:	f000 8125 	beq.w	800b83a <ai_platform_network_process+0x266>
 800b5f0:	692b      	ldr	r3, [r5, #16]
 800b5f2:	f8d5 a034 	ldr.w	sl, [r5, #52]	@ 0x34
 800b5f6:	f003 0303 	and.w	r3, r3, #3
 800b5fa:	2700      	movs	r7, #0
 800b5fc:	2b03      	cmp	r3, #3
 800b5fe:	61af      	str	r7, [r5, #24]
 800b600:	f040 8137 	bne.w	800b872 <ai_platform_network_process+0x29e>
 800b604:	2900      	cmp	r1, #0
 800b606:	f000 811e 	beq.w	800b846 <ai_platform_network_process+0x272>
 800b60a:	f1ba 0f00 	cmp.w	sl, #0
 800b60e:	f000 811a 	beq.w	800b846 <ai_platform_network_process+0x272>
 800b612:	f8ba 3000 	ldrh.w	r3, [sl]
 800b616:	2b00      	cmp	r3, #0
 800b618:	f000 8115 	beq.w	800b846 <ai_platform_network_process+0x272>
 800b61c:	698b      	ldr	r3, [r1, #24]
 800b61e:	9503      	str	r5, [sp, #12]
 800b620:	681b      	ldr	r3, [r3, #0]
 800b622:	9301      	str	r3, [sp, #4]
 800b624:	460e      	mov	r6, r1
 800b626:	f8da 3004 	ldr.w	r3, [sl, #4]
 800b62a:	2b00      	cmp	r3, #0
 800b62c:	d072      	beq.n	800b714 <ai_platform_network_process+0x140>
 800b62e:	f853 4027 	ldr.w	r4, [r3, r7, lsl #2]
 800b632:	2c00      	cmp	r4, #0
 800b634:	d06e      	beq.n	800b714 <ai_platform_network_process+0x140>
 800b636:	f8da 3008 	ldr.w	r3, [sl, #8]
 800b63a:	f8d3 9000 	ldr.w	r9, [r3]
 800b63e:	eb19 1807 	adds.w	r8, r9, r7, lsl #4
 800b642:	ea4f 1b07 	mov.w	fp, r7, lsl #4
 800b646:	f000 81d3 	beq.w	800b9f0 <ai_platform_network_process+0x41c>
 800b64a:	69a3      	ldr	r3, [r4, #24]
 800b64c:	2101      	movs	r1, #1
 800b64e:	4630      	mov	r0, r6
 800b650:	685d      	ldr	r5, [r3, #4]
 800b652:	f7ff fc6b 	bl	800af2c <ai_buffer_get_size>
 800b656:	4285      	cmp	r5, r0
 800b658:	f0c0 8116 	bcc.w	800b888 <ai_platform_network_process+0x2b4>
 800b65c:	68e0      	ldr	r0, [r4, #12]
 800b65e:	69b1      	ldr	r1, [r6, #24]
 800b660:	68c2      	ldr	r2, [r0, #12]
 800b662:	68cb      	ldr	r3, [r1, #12]
 800b664:	429a      	cmp	r2, r3
 800b666:	f040 810f 	bne.w	800b888 <ai_platform_network_process+0x2b4>
 800b66a:	6882      	ldr	r2, [r0, #8]
 800b66c:	688b      	ldr	r3, [r1, #8]
 800b66e:	429a      	cmp	r2, r3
 800b670:	f040 810a 	bne.w	800b888 <ai_platform_network_process+0x2b4>
 800b674:	6842      	ldr	r2, [r0, #4]
 800b676:	684b      	ldr	r3, [r1, #4]
 800b678:	429a      	cmp	r2, r3
 800b67a:	f040 8105 	bne.w	800b888 <ai_platform_network_process+0x2b4>
 800b67e:	69a3      	ldr	r3, [r4, #24]
 800b680:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b684:	f001 fce0 	bl	800d048 <ai_array_get_data_byte_size>
 800b688:	4605      	mov	r5, r0
 800b68a:	4620      	mov	r0, r4
 800b68c:	f001 fcf4 	bl	800d078 <get_tensor_byte_size>
 800b690:	4285      	cmp	r5, r0
 800b692:	f0c0 80f9 	bcc.w	800b888 <ai_platform_network_process+0x2b4>
 800b696:	69a3      	ldr	r3, [r4, #24]
 800b698:	6818      	ldr	r0, [r3, #0]
 800b69a:	f001 fc65 	bl	800cf68 <ai_array_to_buffer_fmt>
 800b69e:	6833      	ldr	r3, [r6, #0]
 800b6a0:	4058      	eors	r0, r3
 800b6a2:	f030 407e 	bics.w	r0, r0, #4261412864	@ 0xfe000000
 800b6a6:	f040 81a5 	bne.w	800b9f4 <ai_platform_network_process+0x420>
 800b6aa:	6873      	ldr	r3, [r6, #4]
 800b6ac:	2b00      	cmp	r3, #0
 800b6ae:	f000 819f 	beq.w	800b9f0 <ai_platform_network_process+0x41c>
 800b6b2:	69b3      	ldr	r3, [r6, #24]
 800b6b4:	681b      	ldr	r3, [r3, #0]
 800b6b6:	2b00      	cmp	r3, #0
 800b6b8:	f000 81a5 	beq.w	800ba06 <ai_platform_network_process+0x432>
 800b6bc:	9a01      	ldr	r2, [sp, #4]
 800b6be:	429a      	cmp	r2, r3
 800b6c0:	bf38      	it	cc
 800b6c2:	461a      	movcc	r2, r3
 800b6c4:	4620      	mov	r0, r4
 800b6c6:	9201      	str	r2, [sp, #4]
 800b6c8:	f001 fcd6 	bl	800d078 <get_tensor_byte_size>
 800b6cc:	f8c8 0008 	str.w	r0, [r8, #8]
 800b6d0:	69b3      	ldr	r3, [r6, #24]
 800b6d2:	681b      	ldr	r3, [r3, #0]
 800b6d4:	fb00 f303 	mul.w	r3, r0, r3
 800b6d8:	f8c8 300c 	str.w	r3, [r8, #12]
 800b6dc:	6871      	ldr	r1, [r6, #4]
 800b6de:	f8c8 1004 	str.w	r1, [r8, #4]
 800b6e2:	440b      	add	r3, r1
 800b6e4:	f849 300b 	str.w	r3, [r9, fp]
 800b6e8:	69a0      	ldr	r0, [r4, #24]
 800b6ea:	6803      	ldr	r3, [r0, #0]
 800b6ec:	009a      	lsls	r2, r3, #2
 800b6ee:	f107 0701 	add.w	r7, r7, #1
 800b6f2:	f106 061c 	add.w	r6, r6, #28
 800b6f6:	f100 80b1 	bmi.w	800b85c <ai_platform_network_process+0x288>
 800b6fa:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 800b6fe:	1a9b      	subs	r3, r3, r2
 800b700:	4419      	add	r1, r3
 800b702:	6081      	str	r1, [r0, #8]
 800b704:	69a3      	ldr	r3, [r4, #24]
 800b706:	f8d8 2004 	ldr.w	r2, [r8, #4]
 800b70a:	60da      	str	r2, [r3, #12]
 800b70c:	f8ba 3000 	ldrh.w	r3, [sl]
 800b710:	42bb      	cmp	r3, r7
 800b712:	d888      	bhi.n	800b626 <ai_platform_network_process+0x52>
 800b714:	9d03      	ldr	r5, [sp, #12]
 800b716:	9b02      	ldr	r3, [sp, #8]
 800b718:	8e2a      	ldrh	r2, [r5, #48]	@ 0x30
 800b71a:	2b00      	cmp	r3, #0
 800b71c:	f000 817c 	beq.w	800ba18 <ai_platform_network_process+0x444>
 800b720:	2a01      	cmp	r2, #1
 800b722:	f240 80bd 	bls.w	800b8a0 <ai_platform_network_process+0x2cc>
 800b726:	f8d5 8034 	ldr.w	r8, [r5, #52]	@ 0x34
 800b72a:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 800b72e:	2b00      	cmp	r3, #0
 800b730:	f000 80b6 	beq.w	800b8a0 <ai_platform_network_process+0x2cc>
 800b734:	f8dd b008 	ldr.w	fp, [sp, #8]
 800b738:	2700      	movs	r7, #0
 800b73a:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800b73e:	2b00      	cmp	r3, #0
 800b740:	f000 80bd 	beq.w	800b8be <ai_platform_network_process+0x2ea>
 800b744:	f853 6027 	ldr.w	r6, [r3, r7, lsl #2]
 800b748:	2e00      	cmp	r6, #0
 800b74a:	f000 80b8 	beq.w	800b8be <ai_platform_network_process+0x2ea>
 800b74e:	f8d8 3014 	ldr.w	r3, [r8, #20]
 800b752:	681c      	ldr	r4, [r3, #0]
 800b754:	eb14 1907 	adds.w	r9, r4, r7, lsl #4
 800b758:	ea4f 1a07 	mov.w	sl, r7, lsl #4
 800b75c:	f000 8160 	beq.w	800ba20 <ai_platform_network_process+0x44c>
 800b760:	69b3      	ldr	r3, [r6, #24]
 800b762:	2101      	movs	r1, #1
 800b764:	685b      	ldr	r3, [r3, #4]
 800b766:	9302      	str	r3, [sp, #8]
 800b768:	4658      	mov	r0, fp
 800b76a:	f7ff fbdf 	bl	800af2c <ai_buffer_get_size>
 800b76e:	9b02      	ldr	r3, [sp, #8]
 800b770:	4283      	cmp	r3, r0
 800b772:	f0c0 8095 	bcc.w	800b8a0 <ai_platform_network_process+0x2cc>
 800b776:	68f0      	ldr	r0, [r6, #12]
 800b778:	f8db 1018 	ldr.w	r1, [fp, #24]
 800b77c:	68c2      	ldr	r2, [r0, #12]
 800b77e:	68cb      	ldr	r3, [r1, #12]
 800b780:	429a      	cmp	r2, r3
 800b782:	f040 808d 	bne.w	800b8a0 <ai_platform_network_process+0x2cc>
 800b786:	6882      	ldr	r2, [r0, #8]
 800b788:	688b      	ldr	r3, [r1, #8]
 800b78a:	429a      	cmp	r2, r3
 800b78c:	f040 8088 	bne.w	800b8a0 <ai_platform_network_process+0x2cc>
 800b790:	6842      	ldr	r2, [r0, #4]
 800b792:	684b      	ldr	r3, [r1, #4]
 800b794:	429a      	cmp	r2, r3
 800b796:	f040 8083 	bne.w	800b8a0 <ai_platform_network_process+0x2cc>
 800b79a:	69b3      	ldr	r3, [r6, #24]
 800b79c:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b7a0:	f001 fc52 	bl	800d048 <ai_array_get_data_byte_size>
 800b7a4:	9002      	str	r0, [sp, #8]
 800b7a6:	4630      	mov	r0, r6
 800b7a8:	f001 fc66 	bl	800d078 <get_tensor_byte_size>
 800b7ac:	9b02      	ldr	r3, [sp, #8]
 800b7ae:	4283      	cmp	r3, r0
 800b7b0:	d376      	bcc.n	800b8a0 <ai_platform_network_process+0x2cc>
 800b7b2:	69b3      	ldr	r3, [r6, #24]
 800b7b4:	6818      	ldr	r0, [r3, #0]
 800b7b6:	f001 fbd7 	bl	800cf68 <ai_array_to_buffer_fmt>
 800b7ba:	f8db 3000 	ldr.w	r3, [fp]
 800b7be:	4058      	eors	r0, r3
 800b7c0:	f030 407e 	bics.w	r0, r0, #4261412864	@ 0xfe000000
 800b7c4:	f040 8134 	bne.w	800ba30 <ai_platform_network_process+0x45c>
 800b7c8:	f8db 3004 	ldr.w	r3, [fp, #4]
 800b7cc:	2b00      	cmp	r3, #0
 800b7ce:	f000 8127 	beq.w	800ba20 <ai_platform_network_process+0x44c>
 800b7d2:	f8db 3018 	ldr.w	r3, [fp, #24]
 800b7d6:	681b      	ldr	r3, [r3, #0]
 800b7d8:	2b00      	cmp	r3, #0
 800b7da:	f000 8133 	beq.w	800ba44 <ai_platform_network_process+0x470>
 800b7de:	9a01      	ldr	r2, [sp, #4]
 800b7e0:	429a      	cmp	r2, r3
 800b7e2:	bf38      	it	cc
 800b7e4:	461a      	movcc	r2, r3
 800b7e6:	4630      	mov	r0, r6
 800b7e8:	9201      	str	r2, [sp, #4]
 800b7ea:	f001 fc45 	bl	800d078 <get_tensor_byte_size>
 800b7ee:	f8c9 0008 	str.w	r0, [r9, #8]
 800b7f2:	f8db 3018 	ldr.w	r3, [fp, #24]
 800b7f6:	681b      	ldr	r3, [r3, #0]
 800b7f8:	fb00 f303 	mul.w	r3, r0, r3
 800b7fc:	f8c9 300c 	str.w	r3, [r9, #12]
 800b800:	f8db 1004 	ldr.w	r1, [fp, #4]
 800b804:	f8c9 1004 	str.w	r1, [r9, #4]
 800b808:	440b      	add	r3, r1
 800b80a:	f844 300a 	str.w	r3, [r4, sl]
 800b80e:	69b0      	ldr	r0, [r6, #24]
 800b810:	6803      	ldr	r3, [r0, #0]
 800b812:	009b      	lsls	r3, r3, #2
 800b814:	f107 0701 	add.w	r7, r7, #1
 800b818:	f10b 0b1c 	add.w	fp, fp, #28
 800b81c:	d44a      	bmi.n	800b8b4 <ai_platform_network_process+0x2e0>
 800b81e:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 800b822:	1a9b      	subs	r3, r3, r2
 800b824:	4419      	add	r1, r3
 800b826:	6081      	str	r1, [r0, #8]
 800b828:	69b3      	ldr	r3, [r6, #24]
 800b82a:	f8d9 2004 	ldr.w	r2, [r9, #4]
 800b82e:	60da      	str	r2, [r3, #12]
 800b830:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 800b834:	42bb      	cmp	r3, r7
 800b836:	d880      	bhi.n	800b73a <ai_platform_network_process+0x166>
 800b838:	e041      	b.n	800b8be <ai_platform_network_process+0x2ea>
 800b83a:	692a      	ldr	r2, [r5, #16]
 800b83c:	61ab      	str	r3, [r5, #24]
 800b83e:	f002 0203 	and.w	r2, r2, #3
 800b842:	2a03      	cmp	r2, #3
 800b844:	d115      	bne.n	800b872 <ai_platform_network_process+0x29e>
 800b846:	2217      	movs	r2, #23
 800b848:	2112      	movs	r1, #18
 800b84a:	f105 000c 	add.w	r0, r5, #12
 800b84e:	f000 f909 	bl	800ba64 <core_set_error>
 800b852:	2400      	movs	r4, #0
 800b854:	4620      	mov	r0, r4
 800b856:	b005      	add	sp, #20
 800b858:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b85c:	f8ba 3000 	ldrh.w	r3, [sl]
 800b860:	429f      	cmp	r7, r3
 800b862:	f4ff aee0 	bcc.w	800b626 <ai_platform_network_process+0x52>
 800b866:	e755      	b.n	800b714 <ai_platform_network_process+0x140>
 800b868:	2400      	movs	r4, #0
 800b86a:	4620      	mov	r0, r4
 800b86c:	b005      	add	sp, #20
 800b86e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b872:	2230      	movs	r2, #48	@ 0x30
 800b874:	2111      	movs	r1, #17
 800b876:	f105 000c 	add.w	r0, r5, #12
 800b87a:	f000 f8f3 	bl	800ba64 <core_set_error>
 800b87e:	2400      	movs	r4, #0
 800b880:	4620      	mov	r0, r4
 800b882:	b005      	add	sp, #20
 800b884:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b888:	9d03      	ldr	r5, [sp, #12]
 800b88a:	2218      	movs	r2, #24
 800b88c:	2112      	movs	r1, #18
 800b88e:	f105 000c 	add.w	r0, r5, #12
 800b892:	f000 f8e7 	bl	800ba64 <core_set_error>
 800b896:	2400      	movs	r4, #0
 800b898:	4620      	mov	r0, r4
 800b89a:	b005      	add	sp, #20
 800b89c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b8a0:	2218      	movs	r2, #24
 800b8a2:	2113      	movs	r1, #19
 800b8a4:	f105 000c 	add.w	r0, r5, #12
 800b8a8:	f000 f8dc 	bl	800ba64 <core_set_error>
 800b8ac:	2400      	movs	r4, #0
 800b8ae:	e7d1      	b.n	800b854 <ai_platform_network_process+0x280>
 800b8b0:	a1c00100 	.word	0xa1c00100
 800b8b4:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 800b8b8:	429f      	cmp	r7, r3
 800b8ba:	f4ff af3e 	bcc.w	800b73a <ai_platform_network_process+0x166>
 800b8be:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 800b8c2:	8e2a      	ldrh	r2, [r5, #48]	@ 0x30
 800b8c4:	832b      	strh	r3, [r5, #24]
 800b8c6:	2a00      	cmp	r2, #0
 800b8c8:	f040 808c 	bne.w	800b9e4 <ai_platform_network_process+0x410>
 800b8cc:	4616      	mov	r6, r2
 800b8ce:	4617      	mov	r7, r2
 800b8d0:	8b6c      	ldrh	r4, [r5, #26]
 800b8d2:	429c      	cmp	r4, r3
 800b8d4:	bf38      	it	cc
 800b8d6:	46ab      	movcc	fp, r5
 800b8d8:	d2bc      	bcs.n	800b854 <ai_platform_network_process+0x280>
 800b8da:	2e00      	cmp	r6, #0
 800b8dc:	d030      	beq.n	800b940 <ai_platform_network_process+0x36c>
 800b8de:	f04f 0800 	mov.w	r8, #0
 800b8e2:	e014      	b.n	800b90e <ai_platform_network_process+0x33a>
 800b8e4:	6882      	ldr	r2, [r0, #8]
 800b8e6:	68c5      	ldr	r5, [r0, #12]
 800b8e8:	6863      	ldr	r3, [r4, #4]
 800b8ea:	1b52      	subs	r2, r2, r5
 800b8ec:	4413      	add	r3, r2
 800b8ee:	6083      	str	r3, [r0, #8]
 800b8f0:	698b      	ldr	r3, [r1, #24]
 800b8f2:	6862      	ldr	r2, [r4, #4]
 800b8f4:	60da      	str	r2, [r3, #12]
 800b8f6:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 800b8fa:	f859 200a 	ldr.w	r2, [r9, sl]
 800b8fe:	440b      	add	r3, r1
 800b900:	4293      	cmp	r3, r2
 800b902:	bf24      	itt	cs
 800b904:	68e3      	ldrcs	r3, [r4, #12]
 800b906:	1ad3      	subcs	r3, r2, r3
 800b908:	6063      	str	r3, [r4, #4]
 800b90a:	f108 0801 	add.w	r8, r8, #1
 800b90e:	8833      	ldrh	r3, [r6, #0]
 800b910:	4543      	cmp	r3, r8
 800b912:	ea4f 1a08 	mov.w	sl, r8, lsl #4
 800b916:	d913      	bls.n	800b940 <ai_platform_network_process+0x36c>
 800b918:	6873      	ldr	r3, [r6, #4]
 800b91a:	b18b      	cbz	r3, 800b940 <ai_platform_network_process+0x36c>
 800b91c:	f853 1028 	ldr.w	r1, [r3, r8, lsl #2]
 800b920:	b171      	cbz	r1, 800b940 <ai_platform_network_process+0x36c>
 800b922:	6988      	ldr	r0, [r1, #24]
 800b924:	68b2      	ldr	r2, [r6, #8]
 800b926:	6803      	ldr	r3, [r0, #0]
 800b928:	f8d2 9000 	ldr.w	r9, [r2]
 800b92c:	009d      	lsls	r5, r3, #2
 800b92e:	eb09 1408 	add.w	r4, r9, r8, lsl #4
 800b932:	d5d7      	bpl.n	800b8e4 <ai_platform_network_process+0x310>
 800b934:	6881      	ldr	r1, [r0, #8]
 800b936:	68a2      	ldr	r2, [r4, #8]
 800b938:	6860      	ldr	r0, [r4, #4]
 800b93a:	f001 fa8f 	bl	800ce5c <st_int8_copy>
 800b93e:	e7da      	b.n	800b8f6 <ai_platform_network_process+0x322>
 800b940:	4658      	mov	r0, fp
 800b942:	f000 f8e7 	bl	800bb14 <ai_layers_forward_all>
 800b946:	2f00      	cmp	r7, #0
 800b948:	d03d      	beq.n	800b9c6 <ai_platform_network_process+0x3f2>
 800b94a:	2400      	movs	r4, #0
 800b94c:	e016      	b.n	800b97c <ai_platform_network_process+0x3a8>
 800b94e:	e9d8 3201 	ldrd	r3, r2, [r8, #4]
 800b952:	f859 100a 	ldr.w	r1, [r9, sl]
 800b956:	4413      	add	r3, r2
 800b958:	428b      	cmp	r3, r1
 800b95a:	bf24      	itt	cs
 800b95c:	f8d8 300c 	ldrcs.w	r3, [r8, #12]
 800b960:	1acb      	subcs	r3, r1, r3
 800b962:	f8c8 3004 	str.w	r3, [r8, #4]
 800b966:	6981      	ldr	r1, [r0, #24]
 800b968:	e9d1 2502 	ldrd	r2, r5, [r1, #8]
 800b96c:	1b52      	subs	r2, r2, r5
 800b96e:	4413      	add	r3, r2
 800b970:	608b      	str	r3, [r1, #8]
 800b972:	6983      	ldr	r3, [r0, #24]
 800b974:	f8d8 2004 	ldr.w	r2, [r8, #4]
 800b978:	60da      	str	r2, [r3, #12]
 800b97a:	3401      	adds	r4, #1
 800b97c:	883b      	ldrh	r3, [r7, #0]
 800b97e:	42a3      	cmp	r3, r4
 800b980:	d921      	bls.n	800b9c6 <ai_platform_network_process+0x3f2>
 800b982:	687b      	ldr	r3, [r7, #4]
 800b984:	b1fb      	cbz	r3, 800b9c6 <ai_platform_network_process+0x3f2>
 800b986:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800b98a:	b1e0      	cbz	r0, 800b9c6 <ai_platform_network_process+0x3f2>
 800b98c:	68ba      	ldr	r2, [r7, #8]
 800b98e:	6983      	ldr	r3, [r0, #24]
 800b990:	f8d2 9000 	ldr.w	r9, [r2]
 800b994:	681a      	ldr	r2, [r3, #0]
 800b996:	0092      	lsls	r2, r2, #2
 800b998:	ea4f 1a04 	mov.w	sl, r4, lsl #4
 800b99c:	eb09 1804 	add.w	r8, r9, r4, lsl #4
 800b9a0:	d5d5      	bpl.n	800b94e <ai_platform_network_process+0x37a>
 800b9a2:	e9d8 1201 	ldrd	r1, r2, [r8, #4]
 800b9a6:	6898      	ldr	r0, [r3, #8]
 800b9a8:	f001 fa58 	bl	800ce5c <st_int8_copy>
 800b9ac:	e9d8 3101 	ldrd	r3, r1, [r8, #4]
 800b9b0:	f859 200a 	ldr.w	r2, [r9, sl]
 800b9b4:	440b      	add	r3, r1
 800b9b6:	4293      	cmp	r3, r2
 800b9b8:	bf24      	itt	cs
 800b9ba:	f8d8 300c 	ldrcs.w	r3, [r8, #12]
 800b9be:	1ad3      	subcs	r3, r2, r3
 800b9c0:	f8c8 3004 	str.w	r3, [r8, #4]
 800b9c4:	e7d9      	b.n	800b97a <ai_platform_network_process+0x3a6>
 800b9c6:	f8bb 401a 	ldrh.w	r4, [fp, #26]
 800b9ca:	f8bb 3018 	ldrh.w	r3, [fp, #24]
 800b9ce:	3401      	adds	r4, #1
 800b9d0:	b2a4      	uxth	r4, r4
 800b9d2:	42a3      	cmp	r3, r4
 800b9d4:	f8ab 401a 	strh.w	r4, [fp, #26]
 800b9d8:	f63f af7f 	bhi.w	800b8da <ai_platform_network_process+0x306>
 800b9dc:	4620      	mov	r0, r4
 800b9de:	b005      	add	sp, #20
 800b9e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b9e4:	2a01      	cmp	r2, #1
 800b9e6:	6b6e      	ldr	r6, [r5, #52]	@ 0x34
 800b9e8:	d02a      	beq.n	800ba40 <ai_platform_network_process+0x46c>
 800b9ea:	f106 070c 	add.w	r7, r6, #12
 800b9ee:	e76f      	b.n	800b8d0 <ai_platform_network_process+0x2fc>
 800b9f0:	9d03      	ldr	r5, [sp, #12]
 800b9f2:	e728      	b.n	800b846 <ai_platform_network_process+0x272>
 800b9f4:	9d03      	ldr	r5, [sp, #12]
 800b9f6:	2219      	movs	r2, #25
 800b9f8:	2112      	movs	r1, #18
 800b9fa:	f105 000c 	add.w	r0, r5, #12
 800b9fe:	f000 f831 	bl	800ba64 <core_set_error>
 800ba02:	2400      	movs	r4, #0
 800ba04:	e726      	b.n	800b854 <ai_platform_network_process+0x280>
 800ba06:	9d03      	ldr	r5, [sp, #12]
 800ba08:	4604      	mov	r4, r0
 800ba0a:	2221      	movs	r2, #33	@ 0x21
 800ba0c:	2112      	movs	r1, #18
 800ba0e:	f105 000c 	add.w	r0, r5, #12
 800ba12:	f000 f827 	bl	800ba64 <core_set_error>
 800ba16:	e71d      	b.n	800b854 <ai_platform_network_process+0x280>
 800ba18:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 800ba1c:	832b      	strh	r3, [r5, #24]
 800ba1e:	e752      	b.n	800b8c6 <ai_platform_network_process+0x2f2>
 800ba20:	2217      	movs	r2, #23
 800ba22:	2113      	movs	r1, #19
 800ba24:	f105 000c 	add.w	r0, r5, #12
 800ba28:	f000 f81c 	bl	800ba64 <core_set_error>
 800ba2c:	2400      	movs	r4, #0
 800ba2e:	e711      	b.n	800b854 <ai_platform_network_process+0x280>
 800ba30:	2219      	movs	r2, #25
 800ba32:	2113      	movs	r1, #19
 800ba34:	f105 000c 	add.w	r0, r5, #12
 800ba38:	f000 f814 	bl	800ba64 <core_set_error>
 800ba3c:	2400      	movs	r4, #0
 800ba3e:	e709      	b.n	800b854 <ai_platform_network_process+0x280>
 800ba40:	2700      	movs	r7, #0
 800ba42:	e745      	b.n	800b8d0 <ai_platform_network_process+0x2fc>
 800ba44:	4604      	mov	r4, r0
 800ba46:	2221      	movs	r2, #33	@ 0x21
 800ba48:	2113      	movs	r1, #19
 800ba4a:	f105 000c 	add.w	r0, r5, #12
 800ba4e:	f000 f809 	bl	800ba64 <core_set_error>
 800ba52:	e6ff      	b.n	800b854 <ai_platform_network_process+0x280>

0800ba54 <core_init>:
 800ba54:	2001      	movs	r0, #1
 800ba56:	4770      	bx	lr

0800ba58 <core_get_error>:
 800ba58:	4603      	mov	r3, r0
 800ba5a:	2200      	movs	r2, #0
 800ba5c:	6800      	ldr	r0, [r0, #0]
 800ba5e:	601a      	str	r2, [r3, #0]
 800ba60:	4770      	bx	lr
 800ba62:	bf00      	nop

0800ba64 <core_set_error>:
 800ba64:	4603      	mov	r3, r0
 800ba66:	7800      	ldrb	r0, [r0, #0]
 800ba68:	b108      	cbz	r0, 800ba6e <core_set_error+0xa>
 800ba6a:	2000      	movs	r0, #0
 800ba6c:	4770      	bx	lr
 800ba6e:	7019      	strb	r1, [r3, #0]
 800ba70:	6819      	ldr	r1, [r3, #0]
 800ba72:	f362 211f 	bfi	r1, r2, #8, #24
 800ba76:	2001      	movs	r0, #1
 800ba78:	6019      	str	r1, [r3, #0]
 800ba7a:	4770      	bx	lr

0800ba7c <ai_check_custom_types>:
 800ba7c:	b082      	sub	sp, #8
 800ba7e:	4b13      	ldr	r3, [pc, #76]	@ (800bacc <ai_check_custom_types+0x50>)
 800ba80:	9301      	str	r3, [sp, #4]
 800ba82:	b118      	cbz	r0, 800ba8c <ai_check_custom_types+0x10>
 800ba84:	7803      	ldrb	r3, [r0, #0]
 800ba86:	2b03      	cmp	r3, #3
 800ba88:	d002      	beq.n	800ba90 <ai_check_custom_types+0x14>
 800ba8a:	2000      	movs	r0, #0
 800ba8c:	b002      	add	sp, #8
 800ba8e:	4770      	bx	lr
 800ba90:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800ba94:	4293      	cmp	r3, r2
 800ba96:	d004      	beq.n	800baa2 <ai_check_custom_types+0x26>
 800ba98:	2001      	movs	r0, #1
 800ba9a:	f080 0001 	eor.w	r0, r0, #1
 800ba9e:	b002      	add	sp, #8
 800baa0:	4770      	bx	lr
 800baa2:	7842      	ldrb	r2, [r0, #1]
 800baa4:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800baa8:	429a      	cmp	r2, r3
 800baaa:	f100 0001 	add.w	r0, r0, #1
 800baae:	d1f3      	bne.n	800ba98 <ai_check_custom_types+0x1c>
 800bab0:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 800bab4:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800bab8:	429a      	cmp	r2, r3
 800baba:	d1ed      	bne.n	800ba98 <ai_check_custom_types+0x1c>
 800babc:	7842      	ldrb	r2, [r0, #1]
 800babe:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800bac2:	429a      	cmp	r2, r3
 800bac4:	d1e8      	bne.n	800ba98 <ai_check_custom_types+0x1c>
 800bac6:	2000      	movs	r0, #0
 800bac8:	e7e7      	b.n	800ba9a <ai_check_custom_types+0x1e>
 800baca:	bf00      	nop
 800bacc:	84048403 	.word	0x84048403

0800bad0 <ai_layers_init_all>:
 800bad0:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 800bad2:	2100      	movs	r1, #0
 800bad4:	b143      	cbz	r3, 800bae8 <ai_layers_init_all+0x18>
 800bad6:	691a      	ldr	r2, [r3, #16]
 800bad8:	60d8      	str	r0, [r3, #12]
 800bada:	429a      	cmp	r2, r3
 800badc:	f101 0101 	add.w	r1, r1, #1
 800bae0:	d002      	beq.n	800bae8 <ai_layers_init_all+0x18>
 800bae2:	b10a      	cbz	r2, 800bae8 <ai_layers_init_all+0x18>
 800bae4:	4613      	mov	r3, r2
 800bae6:	e7f5      	b.n	800bad4 <ai_layers_init_all+0x4>
 800bae8:	4608      	mov	r0, r1
 800baea:	4770      	bx	lr

0800baec <ai_layers_post_init_all>:
 800baec:	b538      	push	{r3, r4, r5, lr}
 800baee:	6b84      	ldr	r4, [r0, #56]	@ 0x38
 800baf0:	2500      	movs	r5, #0
 800baf2:	b16c      	cbz	r4, 800bb10 <ai_layers_post_init_all+0x24>
 800baf4:	6863      	ldr	r3, [r4, #4]
 800baf6:	07db      	lsls	r3, r3, #31
 800baf8:	d504      	bpl.n	800bb04 <ai_layers_post_init_all+0x18>
 800bafa:	6a23      	ldr	r3, [r4, #32]
 800bafc:	4620      	mov	r0, r4
 800bafe:	b10b      	cbz	r3, 800bb04 <ai_layers_post_init_all+0x18>
 800bb00:	4798      	blx	r3
 800bb02:	3501      	adds	r5, #1
 800bb04:	6923      	ldr	r3, [r4, #16]
 800bb06:	42a3      	cmp	r3, r4
 800bb08:	d002      	beq.n	800bb10 <ai_layers_post_init_all+0x24>
 800bb0a:	b10b      	cbz	r3, 800bb10 <ai_layers_post_init_all+0x24>
 800bb0c:	461c      	mov	r4, r3
 800bb0e:	e7f0      	b.n	800baf2 <ai_layers_post_init_all+0x6>
 800bb10:	4628      	mov	r0, r5
 800bb12:	bd38      	pop	{r3, r4, r5, pc}

0800bb14 <ai_layers_forward_all>:
 800bb14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bb18:	f8d0 8040 	ldr.w	r8, [r0, #64]	@ 0x40
 800bb1c:	4604      	mov	r4, r0
 800bb1e:	f1b8 0f00 	cmp.w	r8, #0
 800bb22:	d02b      	beq.n	800bb7c <ai_layers_forward_all+0x68>
 800bb24:	6b81      	ldr	r1, [r0, #56]	@ 0x38
 800bb26:	63c1      	str	r1, [r0, #60]	@ 0x3c
 800bb28:	b321      	cbz	r1, 800bb74 <ai_layers_forward_all+0x60>
 800bb2a:	6c42      	ldr	r2, [r0, #68]	@ 0x44
 800bb2c:	2001      	movs	r0, #1
 800bb2e:	47c0      	blx	r8
 800bb30:	6be6      	ldr	r6, [r4, #60]	@ 0x3c
 800bb32:	b1fe      	cbz	r6, 800bb74 <ai_layers_forward_all+0x60>
 800bb34:	2700      	movs	r7, #0
 800bb36:	4631      	mov	r1, r6
 800bb38:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 800bb3a:	2002      	movs	r0, #2
 800bb3c:	47c0      	blx	r8
 800bb3e:	6be5      	ldr	r5, [r4, #60]	@ 0x3c
 800bb40:	4628      	mov	r0, r5
 800bb42:	696b      	ldr	r3, [r5, #20]
 800bb44:	4798      	blx	r3
 800bb46:	692e      	ldr	r6, [r5, #16]
 800bb48:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 800bb4a:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
 800bb4c:	42b5      	cmp	r5, r6
 800bb4e:	f04f 0003 	mov.w	r0, #3
 800bb52:	d007      	beq.n	800bb64 <ai_layers_forward_all+0x50>
 800bb54:	47c0      	blx	r8
 800bb56:	3701      	adds	r7, #1
 800bb58:	63e6      	str	r6, [r4, #60]	@ 0x3c
 800bb5a:	2e00      	cmp	r6, #0
 800bb5c:	d1eb      	bne.n	800bb36 <ai_layers_forward_all+0x22>
 800bb5e:	4638      	mov	r0, r7
 800bb60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bb64:	2003      	movs	r0, #3
 800bb66:	47c0      	blx	r8
 800bb68:	2300      	movs	r3, #0
 800bb6a:	3701      	adds	r7, #1
 800bb6c:	63e3      	str	r3, [r4, #60]	@ 0x3c
 800bb6e:	4638      	mov	r0, r7
 800bb70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bb74:	2700      	movs	r7, #0
 800bb76:	4638      	mov	r0, r7
 800bb78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bb7c:	6b85      	ldr	r5, [r0, #56]	@ 0x38
 800bb7e:	63c5      	str	r5, [r0, #60]	@ 0x3c
 800bb80:	2d00      	cmp	r5, #0
 800bb82:	d0f7      	beq.n	800bb74 <ai_layers_forward_all+0x60>
 800bb84:	4647      	mov	r7, r8
 800bb86:	696b      	ldr	r3, [r5, #20]
 800bb88:	4628      	mov	r0, r5
 800bb8a:	4798      	blx	r3
 800bb8c:	462b      	mov	r3, r5
 800bb8e:	692d      	ldr	r5, [r5, #16]
 800bb90:	429d      	cmp	r5, r3
 800bb92:	d004      	beq.n	800bb9e <ai_layers_forward_all+0x8a>
 800bb94:	63e5      	str	r5, [r4, #60]	@ 0x3c
 800bb96:	3701      	adds	r7, #1
 800bb98:	2d00      	cmp	r5, #0
 800bb9a:	d1f4      	bne.n	800bb86 <ai_layers_forward_all+0x72>
 800bb9c:	e7df      	b.n	800bb5e <ai_layers_forward_all+0x4a>
 800bb9e:	2300      	movs	r3, #0
 800bba0:	63e3      	str	r3, [r4, #60]	@ 0x3c
 800bba2:	3701      	adds	r7, #1
 800bba4:	e7db      	b.n	800bb5e <ai_layers_forward_all+0x4a>
 800bba6:	bf00      	nop

0800bba8 <forward_conv2d_if32of32wf32>:
 800bba8:	6983      	ldr	r3, [r0, #24]
 800bbaa:	881a      	ldrh	r2, [r3, #0]
 800bbac:	2a00      	cmp	r2, #0
 800bbae:	f000 80af 	beq.w	800bd10 <forward_conv2d_if32of32wf32+0x168>
 800bbb2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bbb6:	f8d3 e004 	ldr.w	lr, [r3, #4]
 800bbba:	f8de 3004 	ldr.w	r3, [lr, #4]
 800bbbe:	b0a3      	sub	sp, #140	@ 0x8c
 800bbc0:	4607      	mov	r7, r0
 800bbc2:	b103      	cbz	r3, 800bbc6 <forward_conv2d_if32of32wf32+0x1e>
 800bbc4:	681b      	ldr	r3, [r3, #0]
 800bbc6:	2a01      	cmp	r2, #1
 800bbc8:	f000 80dc 	beq.w	800bd84 <forward_conv2d_if32of32wf32+0x1dc>
 800bbcc:	f8de 0010 	ldr.w	r0, [lr, #16]
 800bbd0:	b100      	cbz	r0, 800bbd4 <forward_conv2d_if32of32wf32+0x2c>
 800bbd2:	6800      	ldr	r0, [r0, #0]
 800bbd4:	2a02      	cmp	r2, #2
 800bbd6:	f000 809d 	beq.w	800bd14 <forward_conv2d_if32of32wf32+0x16c>
 800bbda:	f8de 501c 	ldr.w	r5, [lr, #28]
 800bbde:	2d00      	cmp	r5, #0
 800bbe0:	f000 80c9 	beq.w	800bd76 <forward_conv2d_if32of32wf32+0x1ce>
 800bbe4:	f8be 1018 	ldrh.w	r1, [lr, #24]
 800bbe8:	682c      	ldr	r4, [r5, #0]
 800bbea:	2901      	cmp	r1, #1
 800bbec:	f240 80c5 	bls.w	800bd7a <forward_conv2d_if32of32wf32+0x1d2>
 800bbf0:	686d      	ldr	r5, [r5, #4]
 800bbf2:	f8d3 800c 	ldr.w	r8, [r3, #12]
 800bbf6:	699b      	ldr	r3, [r3, #24]
 800bbf8:	f8d0 900c 	ldr.w	r9, [r0, #12]
 800bbfc:	f8d3 b008 	ldr.w	fp, [r3, #8]
 800bc00:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800bc04:	9313      	str	r3, [sp, #76]	@ 0x4c
 800bc06:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800bc0a:	9315      	str	r3, [sp, #84]	@ 0x54
 800bc0c:	f8d9 300c 	ldr.w	r3, [r9, #12]
 800bc10:	9316      	str	r3, [sp, #88]	@ 0x58
 800bc12:	f8d9 3008 	ldr.w	r3, [r9, #8]
 800bc16:	9317      	str	r3, [sp, #92]	@ 0x5c
 800bc18:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800bc1c:	9318      	str	r3, [sp, #96]	@ 0x60
 800bc1e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800bc22:	9319      	str	r3, [sp, #100]	@ 0x64
 800bc24:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800bc26:	6bfe      	ldr	r6, [r7, #60]	@ 0x3c
 800bc28:	931a      	str	r3, [sp, #104]	@ 0x68
 800bc2a:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800bc2c:	68e1      	ldr	r1, [r4, #12]
 800bc2e:	f8d4 c018 	ldr.w	ip, [r4, #24]
 800bc32:	931b      	str	r3, [sp, #108]	@ 0x6c
 800bc34:	e9d7 a40c 	ldrd	sl, r4, [r7, #48]	@ 0x30
 800bc38:	69fb      	ldr	r3, [r7, #28]
 800bc3a:	9320      	str	r3, [sp, #128]	@ 0x80
 800bc3c:	8833      	ldrh	r3, [r6, #0]
 800bc3e:	931c      	str	r3, [sp, #112]	@ 0x70
 800bc40:	88b3      	ldrh	r3, [r6, #4]
 800bc42:	931d      	str	r3, [sp, #116]	@ 0x74
 800bc44:	fa1f f38a 	uxth.w	r3, sl
 800bc48:	e9d1 7601 	ldrd	r7, r6, [r1, #4]
 800bc4c:	931e      	str	r3, [sp, #120]	@ 0x78
 800bc4e:	b2a3      	uxth	r3, r4
 800bc50:	f8dc 1008 	ldr.w	r1, [ip, #8]
 800bc54:	931f      	str	r3, [sp, #124]	@ 0x7c
 800bc56:	b10d      	cbz	r5, 800bc5c <forward_conv2d_if32of32wf32+0xb4>
 800bc58:	69ad      	ldr	r5, [r5, #24]
 800bc5a:	68ad      	ldr	r5, [r5, #8]
 800bc5c:	6980      	ldr	r0, [r0, #24]
 800bc5e:	b2a4      	uxth	r4, r4
 800bc60:	fa1f f38a 	uxth.w	r3, sl
 800bc64:	3c01      	subs	r4, #1
 800bc66:	f8d0 a008 	ldr.w	sl, [r0, #8]
 800bc6a:	1e70      	subs	r0, r6, #1
 800bc6c:	3b01      	subs	r3, #1
 800bc6e:	fb00 6404 	mla	r4, r0, r4, r6
 800bc72:	1e78      	subs	r0, r7, #1
 800bc74:	fb00 7303 	mla	r3, r0, r3, r7
 800bc78:	2a03      	cmp	r2, #3
 800bc7a:	9314      	str	r3, [sp, #80]	@ 0x50
 800bc7c:	d07f      	beq.n	800bd7e <forward_conv2d_if32of32wf32+0x1d6>
 800bc7e:	f8de 3028 	ldr.w	r3, [lr, #40]	@ 0x28
 800bc82:	2b00      	cmp	r3, #0
 800bc84:	d049      	beq.n	800bd1a <forward_conv2d_if32of32wf32+0x172>
 800bc86:	f8d3 8000 	ldr.w	r8, [r3]
 800bc8a:	f1b8 0f00 	cmp.w	r8, #0
 800bc8e:	d003      	beq.n	800bc98 <forward_conv2d_if32of32wf32+0xf0>
 800bc90:	f8d8 2018 	ldr.w	r2, [r8, #24]
 800bc94:	f8d2 8008 	ldr.w	r8, [r2, #8]
 800bc98:	6858      	ldr	r0, [r3, #4]
 800bc9a:	2800      	cmp	r0, #0
 800bc9c:	d03e      	beq.n	800bd1c <forward_conv2d_if32of32wf32+0x174>
 800bc9e:	6983      	ldr	r3, [r0, #24]
 800bca0:	f8dc e000 	ldr.w	lr, [ip]
 800bca4:	f8d3 9008 	ldr.w	r9, [r3, #8]
 800bca8:	f3ce 4243 	ubfx	r2, lr, #17, #4
 800bcac:	f46f 7388 	mvn.w	r3, #272	@ 0x110
 800bcb0:	4113      	asrs	r3, r2
 800bcb2:	07db      	lsls	r3, r3, #31
 800bcb4:	d553      	bpl.n	800bd5e <forward_conv2d_if32of32wf32+0x1b6>
 800bcb6:	f1b9 0f00 	cmp.w	r9, #0
 800bcba:	bf18      	it	ne
 800bcbc:	4649      	movne	r1, r9
 800bcbe:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 800bcc0:	930c      	str	r3, [sp, #48]	@ 0x30
 800bcc2:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 800bcc4:	930b      	str	r3, [sp, #44]	@ 0x2c
 800bcc6:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 800bcc8:	930a      	str	r3, [sp, #40]	@ 0x28
 800bcca:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800bccc:	940d      	str	r4, [sp, #52]	@ 0x34
 800bcce:	e9cd 6308 	strd	r6, r3, [sp, #32]
 800bcd2:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800bcd4:	9306      	str	r3, [sp, #24]
 800bcd6:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800bcd8:	9305      	str	r3, [sp, #20]
 800bcda:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 800bcdc:	9304      	str	r3, [sp, #16]
 800bcde:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800bce0:	9303      	str	r3, [sp, #12]
 800bce2:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800bce4:	9302      	str	r3, [sp, #8]
 800bce6:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800bce8:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 800bcea:	9707      	str	r7, [sp, #28]
 800bcec:	e9cd 8300 	strd	r8, r3, [sp]
 800bcf0:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800bcf2:	9311      	str	r3, [sp, #68]	@ 0x44
 800bcf4:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 800bcf6:	9310      	str	r3, [sp, #64]	@ 0x40
 800bcf8:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 800bcfa:	930f      	str	r3, [sp, #60]	@ 0x3c
 800bcfc:	460a      	mov	r2, r1
 800bcfe:	462b      	mov	r3, r5
 800bd00:	4651      	mov	r1, sl
 800bd02:	4658      	mov	r0, fp
 800bd04:	940e      	str	r4, [sp, #56]	@ 0x38
 800bd06:	f000 f95b 	bl	800bfc0 <forward_lite_conv2d_if32of32wf32>
 800bd0a:	b023      	add	sp, #140	@ 0x8c
 800bd0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bd10:	6853      	ldr	r3, [r2, #4]
 800bd12:	deff      	udf	#255	@ 0xff
 800bd14:	2300      	movs	r3, #0
 800bd16:	685b      	ldr	r3, [r3, #4]
 800bd18:	deff      	udf	#255	@ 0xff
 800bd1a:	4698      	mov	r8, r3
 800bd1c:	f8dc e000 	ldr.w	lr, [ip]
 800bd20:	f46f 7088 	mvn.w	r0, #272	@ 0x110
 800bd24:	f3ce 4343 	ubfx	r3, lr, #17, #4
 800bd28:	4118      	asrs	r0, r3
 800bd2a:	f010 0001 	ands.w	r0, r0, #1
 800bd2e:	d1c6      	bne.n	800bcbe <forward_conv2d_if32of32wf32+0x116>
 800bd30:	f3ce 13c6 	ubfx	r3, lr, #7, #7
 800bd34:	f8dc 200c 	ldr.w	r2, [ip, #12]
 800bd38:	f3ce 5e41 	ubfx	lr, lr, #21, #2
 800bd3c:	fa43 f30e 	asr.w	r3, r3, lr
 800bd40:	b29b      	uxth	r3, r3
 800bd42:	2a00      	cmp	r2, #0
 800bd44:	d0bb      	beq.n	800bcbe <forward_conv2d_if32of32wf32+0x116>
 800bd46:	4681      	mov	r9, r0
 800bd48:	6980      	ldr	r0, [r0, #24]
 800bd4a:	9121      	str	r1, [sp, #132]	@ 0x84
 800bd4c:	6840      	ldr	r0, [r0, #4]
 800bd4e:	9001      	str	r0, [sp, #4]
 800bd50:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 800bd52:	9000      	str	r0, [sp, #0]
 800bd54:	4648      	mov	r0, r9
 800bd56:	f000 fc77 	bl	800c648 <lite_decompress_ilutof32>
 800bd5a:	9921      	ldr	r1, [sp, #132]	@ 0x84
 800bd5c:	e7ab      	b.n	800bcb6 <forward_conv2d_if32of32wf32+0x10e>
 800bd5e:	f3ce 13c6 	ubfx	r3, lr, #7, #7
 800bd62:	f8dc 200c 	ldr.w	r2, [ip, #12]
 800bd66:	f3ce 5e41 	ubfx	lr, lr, #21, #2
 800bd6a:	fa43 f30e 	asr.w	r3, r3, lr
 800bd6e:	b29b      	uxth	r3, r3
 800bd70:	2a00      	cmp	r2, #0
 800bd72:	d0a0      	beq.n	800bcb6 <forward_conv2d_if32of32wf32+0x10e>
 800bd74:	e7e8      	b.n	800bd48 <forward_conv2d_if32of32wf32+0x1a0>
 800bd76:	462c      	mov	r4, r5
 800bd78:	e73b      	b.n	800bbf2 <forward_conv2d_if32of32wf32+0x4a>
 800bd7a:	2500      	movs	r5, #0
 800bd7c:	e739      	b.n	800bbf2 <forward_conv2d_if32of32wf32+0x4a>
 800bd7e:	2300      	movs	r3, #0
 800bd80:	685b      	ldr	r3, [r3, #4]
 800bd82:	deff      	udf	#255	@ 0xff
 800bd84:	2300      	movs	r3, #0
 800bd86:	685b      	ldr	r3, [r3, #4]
 800bd88:	deff      	udf	#255	@ 0xff
 800bd8a:	bf00      	nop

0800bd8c <forward_dense>:
 800bd8c:	6982      	ldr	r2, [r0, #24]
 800bd8e:	8813      	ldrh	r3, [r2, #0]
 800bd90:	2b00      	cmp	r3, #0
 800bd92:	d043      	beq.n	800be1c <forward_dense+0x90>
 800bd94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bd98:	6855      	ldr	r5, [r2, #4]
 800bd9a:	6869      	ldr	r1, [r5, #4]
 800bd9c:	b08e      	sub	sp, #56	@ 0x38
 800bd9e:	b101      	cbz	r1, 800bda2 <forward_dense+0x16>
 800bda0:	6809      	ldr	r1, [r1, #0]
 800bda2:	2b01      	cmp	r3, #1
 800bda4:	d069      	beq.n	800be7a <forward_dense+0xee>
 800bda6:	692a      	ldr	r2, [r5, #16]
 800bda8:	b102      	cbz	r2, 800bdac <forward_dense+0x20>
 800bdaa:	6812      	ldr	r2, [r2, #0]
 800bdac:	2b02      	cmp	r3, #2
 800bdae:	d061      	beq.n	800be74 <forward_dense+0xe8>
 800bdb0:	69ec      	ldr	r4, [r5, #28]
 800bdb2:	2c00      	cmp	r4, #0
 800bdb4:	d057      	beq.n	800be66 <forward_dense+0xda>
 800bdb6:	8b2e      	ldrh	r6, [r5, #24]
 800bdb8:	6820      	ldr	r0, [r4, #0]
 800bdba:	2e01      	cmp	r6, #1
 800bdbc:	d955      	bls.n	800be6a <forward_dense+0xde>
 800bdbe:	6864      	ldr	r4, [r4, #4]
 800bdc0:	f8d0 9018 	ldr.w	r9, [r0, #24]
 800bdc4:	68cf      	ldr	r7, [r1, #12]
 800bdc6:	68d0      	ldr	r0, [r2, #12]
 800bdc8:	f8d7 a004 	ldr.w	sl, [r7, #4]
 800bdcc:	f8d0 e004 	ldr.w	lr, [r0, #4]
 800bdd0:	e9d0 7602 	ldrd	r7, r6, [r0, #8]
 800bdd4:	f8d9 0000 	ldr.w	r0, [r9]
 800bdd8:	2b03      	cmp	r3, #3
 800bdda:	fb06 f807 	mul.w	r8, r6, r7
 800bdde:	f020 4c7e 	bic.w	ip, r0, #4261412864	@ 0xfe000000
 800bde2:	d044      	beq.n	800be6e <forward_dense+0xe2>
 800bde4:	6aad      	ldr	r5, [r5, #40]	@ 0x28
 800bde6:	b11d      	cbz	r5, 800bdf0 <forward_dense+0x64>
 800bde8:	682d      	ldr	r5, [r5, #0]
 800bdea:	b10d      	cbz	r5, 800bdf0 <forward_dense+0x64>
 800bdec:	69ab      	ldr	r3, [r5, #24]
 800bdee:	689d      	ldr	r5, [r3, #8]
 800bdf0:	6992      	ldr	r2, [r2, #24]
 800bdf2:	698b      	ldr	r3, [r1, #24]
 800bdf4:	6890      	ldr	r0, [r2, #8]
 800bdf6:	6899      	ldr	r1, [r3, #8]
 800bdf8:	b10c      	cbz	r4, 800bdfe <forward_dense+0x72>
 800bdfa:	69a3      	ldr	r3, [r4, #24]
 800bdfc:	689c      	ldr	r4, [r3, #8]
 800bdfe:	4b20      	ldr	r3, [pc, #128]	@ (800be80 <forward_dense+0xf4>)
 800be00:	459c      	cmp	ip, r3
 800be02:	e9d9 2902 	ldrd	r2, r9, [r9, #8]
 800be06:	d023      	beq.n	800be50 <forward_dense+0xc4>
 800be08:	4e1e      	ldr	r6, [pc, #120]	@ (800be84 <forward_dense+0xf8>)
 800be0a:	45b4      	cmp	ip, r6
 800be0c:	d015      	beq.n	800be3a <forward_dense+0xae>
 800be0e:	f5a3 039c 	sub.w	r3, r3, #5111808	@ 0x4e0000
 800be12:	459c      	cmp	ip, r3
 800be14:	d004      	beq.n	800be20 <forward_dense+0x94>
 800be16:	b00e      	add	sp, #56	@ 0x38
 800be18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800be1c:	685b      	ldr	r3, [r3, #4]
 800be1e:	deff      	udf	#255	@ 0xff
 800be20:	e9cd 0107 	strd	r0, r1, [sp, #28]
 800be24:	a807      	add	r0, sp, #28
 800be26:	e9cd 4a0a 	strd	r4, sl, [sp, #40]	@ 0x28
 800be2a:	e9cd e80c 	strd	lr, r8, [sp, #48]	@ 0x30
 800be2e:	9209      	str	r2, [sp, #36]	@ 0x24
 800be30:	f000 fc64 	bl	800c6fc <forward_lite_dense_if32of32wf32>
 800be34:	b00e      	add	sp, #56	@ 0x38
 800be36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800be3a:	e9cd e803 	strd	lr, r8, [sp, #12]
 800be3e:	e9cd 4a01 	strd	r4, sl, [sp, #4]
 800be42:	9500      	str	r5, [sp, #0]
 800be44:	464b      	mov	r3, r9
 800be46:	f000 fdb3 	bl	800c9b0 <forward_lite_dense_if32of32wf32_lut4>
 800be4a:	b00e      	add	sp, #56	@ 0x38
 800be4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800be50:	e9cd e803 	strd	lr, r8, [sp, #12]
 800be54:	e9cd 4a01 	strd	r4, sl, [sp, #4]
 800be58:	9500      	str	r5, [sp, #0]
 800be5a:	464b      	mov	r3, r9
 800be5c:	f000 fed0 	bl	800cc00 <forward_lite_dense_if32of32wf32_lut8>
 800be60:	b00e      	add	sp, #56	@ 0x38
 800be62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800be66:	4620      	mov	r0, r4
 800be68:	e7aa      	b.n	800bdc0 <forward_dense+0x34>
 800be6a:	2400      	movs	r4, #0
 800be6c:	e7a8      	b.n	800bdc0 <forward_dense+0x34>
 800be6e:	2300      	movs	r3, #0
 800be70:	685b      	ldr	r3, [r3, #4]
 800be72:	deff      	udf	#255	@ 0xff
 800be74:	2300      	movs	r3, #0
 800be76:	685b      	ldr	r3, [r3, #4]
 800be78:	deff      	udf	#255	@ 0xff
 800be7a:	2300      	movs	r3, #0
 800be7c:	685b      	ldr	r3, [r3, #4]
 800be7e:	deff      	udf	#255	@ 0xff
 800be80:	01d01040 	.word	0x01d01040
 800be84:	01e81040 	.word	0x01e81040

0800be88 <forward_relu>:
 800be88:	6982      	ldr	r2, [r0, #24]
 800be8a:	8813      	ldrh	r3, [r2, #0]
 800be8c:	b323      	cbz	r3, 800bed8 <forward_relu+0x50>
 800be8e:	6851      	ldr	r1, [r2, #4]
 800be90:	684a      	ldr	r2, [r1, #4]
 800be92:	b102      	cbz	r2, 800be96 <forward_relu+0xe>
 800be94:	6812      	ldr	r2, [r2, #0]
 800be96:	2b01      	cmp	r3, #1
 800be98:	f000 808d 	beq.w	800bfb6 <forward_relu+0x12e>
 800be9c:	b470      	push	{r4, r5, r6}
 800be9e:	6909      	ldr	r1, [r1, #16]
 800bea0:	b101      	cbz	r1, 800bea4 <forward_relu+0x1c>
 800bea2:	6809      	ldr	r1, [r1, #0]
 800bea4:	69c6      	ldr	r6, [r0, #28]
 800bea6:	b1ce      	cbz	r6, 800bedc <forward_relu+0x54>
 800bea8:	6873      	ldr	r3, [r6, #4]
 800beaa:	6988      	ldr	r0, [r1, #24]
 800beac:	6991      	ldr	r1, [r2, #24]
 800beae:	2b01      	cmp	r3, #1
 800beb0:	d044      	beq.n	800bf3c <forward_relu+0xb4>
 800beb2:	6893      	ldr	r3, [r2, #8]
 800beb4:	6880      	ldr	r0, [r0, #8]
 800beb6:	6889      	ldr	r1, [r1, #8]
 800beb8:	0a1b      	lsrs	r3, r3, #8
 800beba:	d073      	beq.n	800bfa4 <forward_relu+0x11c>
 800bebc:	68d5      	ldr	r5, [r2, #12]
 800bebe:	2201      	movs	r2, #1
 800bec0:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800bec4:	f853 4d04 	ldr.w	r4, [r3, #-4]!
 800bec8:	429d      	cmp	r5, r3
 800beca:	fb04 f202 	mul.w	r2, r4, r2
 800bece:	d1f9      	bne.n	800bec4 <forward_relu+0x3c>
 800bed0:	68b3      	ldr	r3, [r6, #8]
 800bed2:	bc70      	pop	{r4, r5, r6}
 800bed4:	f000 bb3a 	b.w	800c54c <forward_lite_nl_relu_generic_if32of32_kernel>
 800bed8:	685b      	ldr	r3, [r3, #4]
 800beda:	deff      	udf	#255	@ 0xff
 800bedc:	6893      	ldr	r3, [r2, #8]
 800bede:	6989      	ldr	r1, [r1, #24]
 800bee0:	6990      	ldr	r0, [r2, #24]
 800bee2:	6889      	ldr	r1, [r1, #8]
 800bee4:	6884      	ldr	r4, [r0, #8]
 800bee6:	0a1b      	lsrs	r3, r3, #8
 800bee8:	d05e      	beq.n	800bfa8 <forward_relu+0x120>
 800beea:	68d5      	ldr	r5, [r2, #12]
 800beec:	2201      	movs	r2, #1
 800beee:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800bef2:	f853 0d04 	ldr.w	r0, [r3, #-4]!
 800bef6:	429d      	cmp	r5, r3
 800bef8:	fb00 f202 	mul.w	r2, r0, r2
 800befc:	d1f9      	bne.n	800bef2 <forward_relu+0x6a>
 800befe:	f102 4380 	add.w	r3, r2, #1073741824	@ 0x40000000
 800bf02:	3b01      	subs	r3, #1
 800bf04:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 800bf08:	4294      	cmp	r4, r2
 800bf0a:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 800bf0e:	d813      	bhi.n	800bf38 <forward_relu+0xb0>
 800bf10:	ed9f 7a2a 	vldr	s14, [pc, #168]	@ 800bfbc <forward_relu+0x134>
 800bf14:	3204      	adds	r2, #4
 800bf16:	3104      	adds	r1, #4
 800bf18:	4613      	mov	r3, r2
 800bf1a:	ed72 7a01 	vldmdb	r2!, {s15}
 800bf1e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800bf22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bf26:	f1a3 0308 	sub.w	r3, r3, #8
 800bf2a:	bfb8      	it	lt
 800bf2c:	eef0 7a47 	vmovlt.f32	s15, s14
 800bf30:	429c      	cmp	r4, r3
 800bf32:	ed61 7a01 	vstmdb	r1!, {s15}
 800bf36:	d9ef      	bls.n	800bf18 <forward_relu+0x90>
 800bf38:	bc70      	pop	{r4, r5, r6}
 800bf3a:	4770      	bx	lr
 800bf3c:	688c      	ldr	r4, [r1, #8]
 800bf3e:	6891      	ldr	r1, [r2, #8]
 800bf40:	6880      	ldr	r0, [r0, #8]
 800bf42:	0a09      	lsrs	r1, r1, #8
 800bf44:	d032      	beq.n	800bfac <forward_relu+0x124>
 800bf46:	68d5      	ldr	r5, [r2, #12]
 800bf48:	eb05 0281 	add.w	r2, r5, r1, lsl #2
 800bf4c:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800bf50:	4295      	cmp	r5, r2
 800bf52:	fb01 f303 	mul.w	r3, r1, r3
 800bf56:	d1f9      	bne.n	800bf4c <forward_relu+0xc4>
 800bf58:	f103 4280 	add.w	r2, r3, #1073741824	@ 0x40000000
 800bf5c:	3a01      	subs	r2, #1
 800bf5e:	68b1      	ldr	r1, [r6, #8]
 800bf60:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800bf64:	429c      	cmp	r4, r3
 800bf66:	ed91 7a00 	vldr	s14, [r1]
 800bf6a:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 800bf6e:	d8e3      	bhi.n	800bf38 <forward_relu+0xb0>
 800bf70:	2500      	movs	r5, #0
 800bf72:	3304      	adds	r3, #4
 800bf74:	1d02      	adds	r2, r0, #4
 800bf76:	ed53 7a01 	vldr	s15, [r3, #-4]
 800bf7a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800bf7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bf82:	f1a3 0104 	sub.w	r1, r3, #4
 800bf86:	f1a3 0308 	sub.w	r3, r3, #8
 800bf8a:	d405      	bmi.n	800bf98 <forward_relu+0x110>
 800bf8c:	429c      	cmp	r4, r3
 800bf8e:	f842 5d04 	str.w	r5, [r2, #-4]!
 800bf92:	d8d1      	bhi.n	800bf38 <forward_relu+0xb0>
 800bf94:	460b      	mov	r3, r1
 800bf96:	e7ee      	b.n	800bf76 <forward_relu+0xee>
 800bf98:	429c      	cmp	r4, r3
 800bf9a:	ed62 7a01 	vstmdb	r2!, {s15}
 800bf9e:	d8cb      	bhi.n	800bf38 <forward_relu+0xb0>
 800bfa0:	460b      	mov	r3, r1
 800bfa2:	e7e8      	b.n	800bf76 <forward_relu+0xee>
 800bfa4:	2201      	movs	r2, #1
 800bfa6:	e793      	b.n	800bed0 <forward_relu+0x48>
 800bfa8:	4622      	mov	r2, r4
 800bfaa:	e7b1      	b.n	800bf10 <forward_relu+0x88>
 800bfac:	68b2      	ldr	r2, [r6, #8]
 800bfae:	4623      	mov	r3, r4
 800bfb0:	ed92 7a00 	vldr	s14, [r2]
 800bfb4:	e7dc      	b.n	800bf70 <forward_relu+0xe8>
 800bfb6:	2300      	movs	r3, #0
 800bfb8:	685b      	ldr	r3, [r3, #4]
 800bfba:	deff      	udf	#255	@ 0xff
 800bfbc:	00000000 	.word	0x00000000

0800bfc0 <forward_lite_conv2d_if32of32wf32>:
 800bfc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bfc4:	ed2d 8b02 	vpush	{d8}
 800bfc8:	b0a1      	sub	sp, #132	@ 0x84
 800bfca:	4686      	mov	lr, r0
 800bfcc:	910c      	str	r1, [sp, #48]	@ 0x30
 800bfce:	f8bd 10d8 	ldrh.w	r1, [sp, #216]	@ 0xd8
 800bfd2:	901e      	str	r0, [sp, #120]	@ 0x78
 800bfd4:	9832      	ldr	r0, [sp, #200]	@ 0xc8
 800bfd6:	f8bd 40d4 	ldrh.w	r4, [sp, #212]	@ 0xd4
 800bfda:	f8bd 50dc 	ldrh.w	r5, [sp, #220]	@ 0xdc
 800bfde:	f8bd 60e0 	ldrh.w	r6, [sp, #224]	@ 0xe0
 800bfe2:	9217      	str	r2, [sp, #92]	@ 0x5c
 800bfe4:	424f      	negs	r7, r1
 800bfe6:	4694      	mov	ip, r2
 800bfe8:	930e      	str	r3, [sp, #56]	@ 0x38
 800bfea:	9a2e      	ldr	r2, [sp, #184]	@ 0xb8
 800bfec:	9b34      	ldr	r3, [sp, #208]	@ 0xd0
 800bfee:	9418      	str	r4, [sp, #96]	@ 0x60
 800bff0:	9508      	str	r5, [sp, #32]
 800bff2:	961f      	str	r6, [sp, #124]	@ 0x7c
 800bff4:	9711      	str	r7, [sp, #68]	@ 0x44
 800bff6:	2800      	cmp	r0, #0
 800bff8:	f000 8177 	beq.w	800c2ea <forward_lite_conv2d_if32of32wf32+0x32a>
 800bffc:	9833      	ldr	r0, [sp, #204]	@ 0xcc
 800bffe:	910d      	str	r1, [sp, #52]	@ 0x34
 800c000:	fb00 f303 	mul.w	r3, r0, r3
 800c004:	982d      	ldr	r0, [sp, #180]	@ 0xb4
 800c006:	9931      	ldr	r1, [sp, #196]	@ 0xc4
 800c008:	ed9f 8abf 	vldr	s16, [pc, #764]	@ 800c308 <forward_lite_conv2d_if32of32wf32+0x348>
 800c00c:	fb00 f303 	mul.w	r3, r0, r3
 800c010:	009b      	lsls	r3, r3, #2
 800c012:	930f      	str	r3, [sp, #60]	@ 0x3c
 800c014:	9b2f      	ldr	r3, [sp, #188]	@ 0xbc
 800c016:	fb01 f102 	mul.w	r1, r1, r2
 800c01a:	fb00 f303 	mul.w	r3, r0, r3
 800c01e:	0092      	lsls	r2, r2, #2
 800c020:	9205      	str	r2, [sp, #20]
 800c022:	fb06 f203 	mul.w	r2, r6, r3
 800c026:	fb07 f303 	mul.w	r3, r7, r3
 800c02a:	eb0e 0383 	add.w	r3, lr, r3, lsl #2
 800c02e:	9312      	str	r3, [sp, #72]	@ 0x48
 800c030:	9b2d      	ldr	r3, [sp, #180]	@ 0xb4
 800c032:	fb05 f303 	mul.w	r3, r5, r3
 800c036:	009b      	lsls	r3, r3, #2
 800c038:	9306      	str	r3, [sp, #24]
 800c03a:	9b2d      	ldr	r3, [sp, #180]	@ 0xb4
 800c03c:	0089      	lsls	r1, r1, #2
 800c03e:	009b      	lsls	r3, r3, #2
 800c040:	911a      	str	r1, [sp, #104]	@ 0x68
 800c042:	4261      	negs	r1, r4
 800c044:	9307      	str	r3, [sp, #28]
 800c046:	fb03 f301 	mul.w	r3, r3, r1
 800c04a:	0094      	lsls	r4, r2, #2
 800c04c:	9316      	str	r3, [sp, #88]	@ 0x58
 800c04e:	f10c 4278 	add.w	r2, ip, #4160749568	@ 0xf8000000
 800c052:	2300      	movs	r3, #0
 800c054:	9115      	str	r1, [sp, #84]	@ 0x54
 800c056:	941c      	str	r4, [sp, #112]	@ 0x70
 800c058:	9219      	str	r2, [sp, #100]	@ 0x64
 800c05a:	9314      	str	r3, [sp, #80]	@ 0x50
 800c05c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800c05e:	2b00      	cmp	r3, #0
 800c060:	f2c0 8270 	blt.w	800c544 <forward_lite_conv2d_if32of32wf32+0x584>
 800c064:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800c066:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c068:	2300      	movs	r3, #0
 800c06a:	990d      	ldr	r1, [sp, #52]	@ 0x34
 800c06c:	9a30      	ldr	r2, [sp, #192]	@ 0xc0
 800c06e:	440a      	add	r2, r1
 800c070:	9939      	ldr	r1, [sp, #228]	@ 0xe4
 800c072:	428a      	cmp	r2, r1
 800c074:	bf94      	ite	ls
 800c076:	ebc3 0b02 	rsbls	fp, r3, r2
 800c07a:	ebc3 0b01 	rsbhi	fp, r3, r1
 800c07e:	9a2c      	ldr	r2, [sp, #176]	@ 0xb0
 800c080:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800c082:	2a00      	cmp	r2, #0
 800c084:	f000 8142 	beq.w	800c30c <forward_lite_conv2d_if32of32wf32+0x34c>
 800c088:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800c08a:	f1b2 7f80 	cmp.w	r2, #16777216	@ 0x1000000
 800c08e:	f0c0 813d 	bcc.w	800c30c <forward_lite_conv2d_if32of32wf32+0x34c>
 800c092:	9a05      	ldr	r2, [sp, #20]
 800c094:	188a      	adds	r2, r1, r2
 800c096:	4291      	cmp	r1, r2
 800c098:	921b      	str	r2, [sp, #108]	@ 0x6c
 800c09a:	f080 8110 	bcs.w	800c2be <forward_lite_conv2d_if32of32wf32+0x2fe>
 800c09e:	9a33      	ldr	r2, [sp, #204]	@ 0xcc
 800c0a0:	fb02 f303 	mul.w	r3, r2, r3
 800c0a4:	9309      	str	r3, [sp, #36]	@ 0x24
 800c0a6:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800c0a8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c0aa:	4413      	add	r3, r2
 800c0ac:	931d      	str	r3, [sp, #116]	@ 0x74
 800c0ae:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800c0b0:	9310      	str	r3, [sp, #64]	@ 0x40
 800c0b2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c0b4:	9313      	str	r3, [sp, #76]	@ 0x4c
 800c0b6:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800c0b8:	930a      	str	r3, [sp, #40]	@ 0x28
 800c0ba:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800c0bc:	992c      	ldr	r1, [sp, #176]	@ 0xb0
 800c0be:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800c0c0:	f000 fecc 	bl	800ce5c <st_int8_copy>
 800c0c4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c0c6:	2b00      	cmp	r3, #0
 800c0c8:	f000 811a 	beq.w	800c300 <forward_lite_conv2d_if32of32wf32+0x340>
 800c0cc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800c0ce:	ecf3 1a01 	vldmia	r3!, {s3}
 800c0d2:	9313      	str	r3, [sp, #76]	@ 0x4c
 800c0d4:	9b31      	ldr	r3, [sp, #196]	@ 0xc4
 800c0d6:	2b00      	cmp	r3, #0
 800c0d8:	f000 80e6 	beq.w	800c2a8 <forward_lite_conv2d_if32of32wf32+0x2e8>
 800c0dc:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 800c0de:	9300      	str	r3, [sp, #0]
 800c0e0:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800c0e2:	9302      	str	r3, [sp, #8]
 800c0e4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800c0e6:	9303      	str	r3, [sp, #12]
 800c0e8:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800c0ea:	9301      	str	r3, [sp, #4]
 800c0ec:	2300      	movs	r3, #0
 800c0ee:	9304      	str	r3, [sp, #16]
 800c0f0:	9b01      	ldr	r3, [sp, #4]
 800c0f2:	2b00      	cmp	r3, #0
 800c0f4:	f2c0 80fe 	blt.w	800c2f4 <forward_lite_conv2d_if32of32wf32+0x334>
 800c0f8:	9902      	ldr	r1, [sp, #8]
 800c0fa:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c0fc:	2600      	movs	r6, #0
 800c0fe:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 800c100:	9807      	ldr	r0, [sp, #28]
 800c102:	9c00      	ldr	r4, [sp, #0]
 800c104:	fb00 3202 	mla	r2, r0, r2, r3
 800c108:	9b2f      	ldr	r3, [sp, #188]	@ 0xbc
 800c10a:	4423      	add	r3, r4
 800c10c:	9c33      	ldr	r4, [sp, #204]	@ 0xcc
 800c10e:	42a3      	cmp	r3, r4
 800c110:	bf94      	ite	ls
 800c112:	ebc6 0603 	rsbls	r6, r6, r3
 800c116:	ebc6 0604 	rsbhi	r6, r6, r4
 800c11a:	9b2f      	ldr	r3, [sp, #188]	@ 0xbc
 800c11c:	eba3 0a06 	sub.w	sl, r3, r6
 800c120:	9b2d      	ldr	r3, [sp, #180]	@ 0xb4
 800c122:	f1bb 0f00 	cmp.w	fp, #0
 800c126:	eba4 0906 	sub.w	r9, r4, r6
 800c12a:	eeb0 7a61 	vmov.f32	s14, s3
 800c12e:	fb03 f606 	mul.w	r6, r3, r6
 800c132:	f340 80a1 	ble.w	800c278 <forward_lite_conv2d_if32of32wf32+0x2b8>
 800c136:	f026 070f 	bic.w	r7, r6, #15
 800c13a:	f107 38ff 	add.w	r8, r7, #4294967295
 800c13e:	ea4f 1818 	mov.w	r8, r8, lsr #4
 800c142:	f108 0801 	add.w	r8, r8, #1
 800c146:	ea4f 1e88 	mov.w	lr, r8, lsl #6
 800c14a:	fb00 fa0a 	mul.w	sl, r0, sl
 800c14e:	fb00 f909 	mul.w	r9, r0, r9
 800c152:	ea4f 1808 	mov.w	r8, r8, lsl #4
 800c156:	f04f 0c00 	mov.w	ip, #0
 800c15a:	2f00      	cmp	r7, #0
 800c15c:	bfd8      	it	le
 800c15e:	2000      	movle	r0, #0
 800c160:	dd70      	ble.n	800c244 <forward_lite_conv2d_if32of32wf32+0x284>
 800c162:	f101 0040 	add.w	r0, r1, #64	@ 0x40
 800c166:	f102 0340 	add.w	r3, r2, #64	@ 0x40
 800c16a:	2400      	movs	r4, #0
 800c16c:	ed53 5a0f 	vldr	s11, [r3, #-60]	@ 0xffffffc4
 800c170:	ed50 7a0f 	vldr	s15, [r0, #-60]	@ 0xffffffc4
 800c174:	ed10 6a10 	vldr	s12, [r0, #-64]	@ 0xffffffc0
 800c178:	ed53 6a10 	vldr	s13, [r3, #-64]	@ 0xffffffc0
 800c17c:	ed50 4a0d 	vldr	s9, [r0, #-52]	@ 0xffffffcc
 800c180:	ed10 5a0c 	vldr	s10, [r0, #-48]	@ 0xffffffd0
 800c184:	ed10 3a0a 	vldr	s6, [r0, #-40]	@ 0xffffffd8
 800c188:	ed53 3a0a 	vldr	s7, [r3, #-40]	@ 0xffffffd8
 800c18c:	ed10 4a09 	vldr	s8, [r0, #-36]	@ 0xffffffdc
 800c190:	ed50 0a06 	vldr	s1, [r0, #-24]	@ 0xffffffe8
 800c194:	ed13 1a06 	vldr	s2, [r3, #-24]	@ 0xffffffe8
 800c198:	ed10 2a05 	vldr	s4, [r0, #-20]	@ 0xffffffec
 800c19c:	ed53 2a05 	vldr	s5, [r3, #-20]	@ 0xffffffec
 800c1a0:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800c1a4:	ed50 5a0e 	vldr	s11, [r0, #-56]	@ 0xffffffc8
 800c1a8:	eee6 7a26 	vfma.f32	s15, s12, s13
 800c1ac:	3410      	adds	r4, #16
 800c1ae:	42bc      	cmp	r4, r7
 800c1b0:	ed13 6a0e 	vldr	s12, [r3, #-56]	@ 0xffffffc8
 800c1b4:	ed53 6a0d 	vldr	s13, [r3, #-52]	@ 0xffffffcc
 800c1b8:	eee5 7a86 	vfma.f32	s15, s11, s12
 800c1bc:	f100 0040 	add.w	r0, r0, #64	@ 0x40
 800c1c0:	f103 0340 	add.w	r3, r3, #64	@ 0x40
 800c1c4:	ed53 5a1c 	vldr	s11, [r3, #-112]	@ 0xffffff90
 800c1c8:	ed10 6a1b 	vldr	s12, [r0, #-108]	@ 0xffffff94
 800c1cc:	eee4 7aa6 	vfma.f32	s15, s9, s13
 800c1d0:	ed53 6a1b 	vldr	s13, [r3, #-108]	@ 0xffffff94
 800c1d4:	ed53 4a19 	vldr	s9, [r3, #-100]	@ 0xffffff9c
 800c1d8:	eee5 7a25 	vfma.f32	s15, s10, s11
 800c1dc:	ed10 5a18 	vldr	s10, [r0, #-96]	@ 0xffffffa0
 800c1e0:	ed53 5a18 	vldr	s11, [r3, #-96]	@ 0xffffffa0
 800c1e4:	eee6 7a26 	vfma.f32	s15, s12, s13
 800c1e8:	ed10 6a17 	vldr	s12, [r0, #-92]	@ 0xffffffa4
 800c1ec:	ed53 6a17 	vldr	s13, [r3, #-92]	@ 0xffffffa4
 800c1f0:	eee3 7a23 	vfma.f32	s15, s6, s7
 800c1f4:	ed10 3a14 	vldr	s6, [r0, #-80]	@ 0xffffffb0
 800c1f8:	ed53 3a14 	vldr	s7, [r3, #-80]	@ 0xffffffb0
 800c1fc:	eee4 7a24 	vfma.f32	s15, s8, s9
 800c200:	ed10 4a13 	vldr	s8, [r0, #-76]	@ 0xffffffb4
 800c204:	ed53 4a13 	vldr	s9, [r3, #-76]	@ 0xffffffb4
 800c208:	eee5 7a25 	vfma.f32	s15, s10, s11
 800c20c:	ed10 5a12 	vldr	s10, [r0, #-72]	@ 0xffffffb8
 800c210:	ed53 5a12 	vldr	s11, [r3, #-72]	@ 0xffffffb8
 800c214:	eee6 7a26 	vfma.f32	s15, s12, s13
 800c218:	ed10 6a11 	vldr	s12, [r0, #-68]	@ 0xffffffbc
 800c21c:	ed53 6a11 	vldr	s13, [r3, #-68]	@ 0xffffffbc
 800c220:	eee0 7a81 	vfma.f32	s15, s1, s2
 800c224:	eee2 7a22 	vfma.f32	s15, s4, s5
 800c228:	eee3 7a23 	vfma.f32	s15, s6, s7
 800c22c:	eee4 7a24 	vfma.f32	s15, s8, s9
 800c230:	eee5 7a25 	vfma.f32	s15, s10, s11
 800c234:	eee6 7a26 	vfma.f32	s15, s12, s13
 800c238:	ee37 7a27 	vadd.f32	s14, s14, s15
 800c23c:	db96      	blt.n	800c16c <forward_lite_conv2d_if32of32wf32+0x1ac>
 800c23e:	4471      	add	r1, lr
 800c240:	4472      	add	r2, lr
 800c242:	4640      	mov	r0, r8
 800c244:	4286      	cmp	r6, r0
 800c246:	dd10      	ble.n	800c26a <forward_lite_conv2d_if32of32wf32+0x2aa>
 800c248:	4603      	mov	r3, r0
 800c24a:	460d      	mov	r5, r1
 800c24c:	4614      	mov	r4, r2
 800c24e:	ecf4 6a01 	vldmia	r4!, {s13}
 800c252:	ecf5 7a01 	vldmia	r5!, {s15}
 800c256:	3301      	adds	r3, #1
 800c258:	429e      	cmp	r6, r3
 800c25a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800c25e:	d1f6      	bne.n	800c24e <forward_lite_conv2d_if32of32wf32+0x28e>
 800c260:	1a30      	subs	r0, r6, r0
 800c262:	eb02 0280 	add.w	r2, r2, r0, lsl #2
 800c266:	eb01 0180 	add.w	r1, r1, r0, lsl #2
 800c26a:	f10c 0c01 	add.w	ip, ip, #1
 800c26e:	45e3      	cmp	fp, ip
 800c270:	4451      	add	r1, sl
 800c272:	444a      	add	r2, r9
 800c274:	f47f af71 	bne.w	800c15a <forward_lite_conv2d_if32of32wf32+0x19a>
 800c278:	9901      	ldr	r1, [sp, #4]
 800c27a:	9808      	ldr	r0, [sp, #32]
 800c27c:	9a03      	ldr	r2, [sp, #12]
 800c27e:	9b04      	ldr	r3, [sp, #16]
 800c280:	ed82 7a00 	vstr	s14, [r2]
 800c284:	4401      	add	r1, r0
 800c286:	9101      	str	r1, [sp, #4]
 800c288:	9905      	ldr	r1, [sp, #20]
 800c28a:	440a      	add	r2, r1
 800c28c:	9203      	str	r2, [sp, #12]
 800c28e:	9a00      	ldr	r2, [sp, #0]
 800c290:	9906      	ldr	r1, [sp, #24]
 800c292:	1a12      	subs	r2, r2, r0
 800c294:	9200      	str	r2, [sp, #0]
 800c296:	9a02      	ldr	r2, [sp, #8]
 800c298:	440a      	add	r2, r1
 800c29a:	9202      	str	r2, [sp, #8]
 800c29c:	9a31      	ldr	r2, [sp, #196]	@ 0xc4
 800c29e:	3301      	adds	r3, #1
 800c2a0:	429a      	cmp	r2, r3
 800c2a2:	9304      	str	r3, [sp, #16]
 800c2a4:	f47f af24 	bne.w	800c0f0 <forward_lite_conv2d_if32of32wf32+0x130>
 800c2a8:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800c2aa:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800c2ac:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800c2ae:	440a      	add	r2, r1
 800c2b0:	920a      	str	r2, [sp, #40]	@ 0x28
 800c2b2:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800c2b4:	3304      	adds	r3, #4
 800c2b6:	4293      	cmp	r3, r2
 800c2b8:	9310      	str	r3, [sp, #64]	@ 0x40
 800c2ba:	f4ff aefe 	bcc.w	800c0ba <forward_lite_conv2d_if32of32wf32+0xfa>
 800c2be:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800c2c0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800c2c2:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800c2c4:	440a      	add	r2, r1
 800c2c6:	920c      	str	r2, [sp, #48]	@ 0x30
 800c2c8:	991f      	ldr	r1, [sp, #124]	@ 0x7c
 800c2ca:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800c2cc:	440a      	add	r2, r1
 800c2ce:	9211      	str	r2, [sp, #68]	@ 0x44
 800c2d0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800c2d2:	1a52      	subs	r2, r2, r1
 800c2d4:	920d      	str	r2, [sp, #52]	@ 0x34
 800c2d6:	991c      	ldr	r1, [sp, #112]	@ 0x70
 800c2d8:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800c2da:	440a      	add	r2, r1
 800c2dc:	9212      	str	r2, [sp, #72]	@ 0x48
 800c2de:	9a32      	ldr	r2, [sp, #200]	@ 0xc8
 800c2e0:	3301      	adds	r3, #1
 800c2e2:	429a      	cmp	r2, r3
 800c2e4:	9314      	str	r3, [sp, #80]	@ 0x50
 800c2e6:	f47f aeb9 	bne.w	800c05c <forward_lite_conv2d_if32of32wf32+0x9c>
 800c2ea:	b021      	add	sp, #132	@ 0x84
 800c2ec:	ecbd 8b02 	vpop	{d8}
 800c2f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c2f4:	9a00      	ldr	r2, [sp, #0]
 800c2f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c2f8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800c2fa:	4616      	mov	r6, r2
 800c2fc:	189a      	adds	r2, r3, r2
 800c2fe:	e6fe      	b.n	800c0fe <forward_lite_conv2d_if32of32wf32+0x13e>
 800c300:	eef0 1a48 	vmov.f32	s3, s16
 800c304:	e6e6      	b.n	800c0d4 <forward_lite_conv2d_if32of32wf32+0x114>
 800c306:	bf00      	nop
 800c308:	00000000 	.word	0x00000000
 800c30c:	9a05      	ldr	r2, [sp, #20]
 800c30e:	188a      	adds	r2, r1, r2
 800c310:	4291      	cmp	r1, r2
 800c312:	921b      	str	r2, [sp, #108]	@ 0x6c
 800c314:	d2d3      	bcs.n	800c2be <forward_lite_conv2d_if32of32wf32+0x2fe>
 800c316:	9a33      	ldr	r2, [sp, #204]	@ 0xcc
 800c318:	fb02 f303 	mul.w	r3, r2, r3
 800c31c:	930a      	str	r3, [sp, #40]	@ 0x28
 800c31e:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800c320:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c322:	4413      	add	r3, r2
 800c324:	931d      	str	r3, [sp, #116]	@ 0x74
 800c326:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800c328:	9310      	str	r3, [sp, #64]	@ 0x40
 800c32a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c32c:	9313      	str	r3, [sp, #76]	@ 0x4c
 800c32e:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800c330:	9309      	str	r3, [sp, #36]	@ 0x24
 800c332:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c334:	2b00      	cmp	r3, #0
 800c336:	f000 80fc 	beq.w	800c532 <forward_lite_conv2d_if32of32wf32+0x572>
 800c33a:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800c33c:	ecf3 1a01 	vldmia	r3!, {s3}
 800c340:	9313      	str	r3, [sp, #76]	@ 0x4c
 800c342:	9b31      	ldr	r3, [sp, #196]	@ 0xc4
 800c344:	2b00      	cmp	r3, #0
 800c346:	f000 80e5 	beq.w	800c514 <forward_lite_conv2d_if32of32wf32+0x554>
 800c34a:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 800c34c:	9300      	str	r3, [sp, #0]
 800c34e:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800c350:	9302      	str	r3, [sp, #8]
 800c352:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800c354:	9303      	str	r3, [sp, #12]
 800c356:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800c358:	9301      	str	r3, [sp, #4]
 800c35a:	2300      	movs	r3, #0
 800c35c:	9304      	str	r3, [sp, #16]
 800c35e:	9b01      	ldr	r3, [sp, #4]
 800c360:	2b00      	cmp	r3, #0
 800c362:	f2c0 80e9 	blt.w	800c538 <forward_lite_conv2d_if32of32wf32+0x578>
 800c366:	9a02      	ldr	r2, [sp, #8]
 800c368:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c36a:	2400      	movs	r4, #0
 800c36c:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800c36e:	9807      	ldr	r0, [sp, #28]
 800c370:	9d00      	ldr	r5, [sp, #0]
 800c372:	fb03 1300 	mla	r3, r3, r0, r1
 800c376:	992f      	ldr	r1, [sp, #188]	@ 0xbc
 800c378:	4429      	add	r1, r5
 800c37a:	9d33      	ldr	r5, [sp, #204]	@ 0xcc
 800c37c:	42a9      	cmp	r1, r5
 800c37e:	bf94      	ite	ls
 800c380:	ebc4 0401 	rsbls	r4, r4, r1
 800c384:	ebc4 0405 	rsbhi	r4, r4, r5
 800c388:	992f      	ldr	r1, [sp, #188]	@ 0xbc
 800c38a:	eba1 0a04 	sub.w	sl, r1, r4
 800c38e:	992d      	ldr	r1, [sp, #180]	@ 0xb4
 800c390:	f1bb 0f00 	cmp.w	fp, #0
 800c394:	eba5 0904 	sub.w	r9, r5, r4
 800c398:	eeb0 7a61 	vmov.f32	s14, s3
 800c39c:	fb01 f404 	mul.w	r4, r1, r4
 800c3a0:	f340 80a0 	ble.w	800c4e4 <forward_lite_conv2d_if32of32wf32+0x524>
 800c3a4:	f024 0c0f 	bic.w	ip, r4, #15
 800c3a8:	f10c 38ff 	add.w	r8, ip, #4294967295
 800c3ac:	ea4f 1818 	mov.w	r8, r8, lsr #4
 800c3b0:	f108 0801 	add.w	r8, r8, #1
 800c3b4:	ea4f 1e88 	mov.w	lr, r8, lsl #6
 800c3b8:	fb00 fa0a 	mul.w	sl, r0, sl
 800c3bc:	fb00 f909 	mul.w	r9, r0, r9
 800c3c0:	ea4f 1808 	mov.w	r8, r8, lsl #4
 800c3c4:	2700      	movs	r7, #0
 800c3c6:	f1bc 0f00 	cmp.w	ip, #0
 800c3ca:	bfd8      	it	le
 800c3cc:	2100      	movle	r1, #0
 800c3ce:	dd70      	ble.n	800c4b2 <forward_lite_conv2d_if32of32wf32+0x4f2>
 800c3d0:	f102 0040 	add.w	r0, r2, #64	@ 0x40
 800c3d4:	f103 0140 	add.w	r1, r3, #64	@ 0x40
 800c3d8:	2500      	movs	r5, #0
 800c3da:	ed51 5a0f 	vldr	s11, [r1, #-60]	@ 0xffffffc4
 800c3de:	ed50 7a0f 	vldr	s15, [r0, #-60]	@ 0xffffffc4
 800c3e2:	ed10 6a10 	vldr	s12, [r0, #-64]	@ 0xffffffc0
 800c3e6:	ed51 6a10 	vldr	s13, [r1, #-64]	@ 0xffffffc0
 800c3ea:	ed50 4a0d 	vldr	s9, [r0, #-52]	@ 0xffffffcc
 800c3ee:	ed10 5a0c 	vldr	s10, [r0, #-48]	@ 0xffffffd0
 800c3f2:	ed10 3a0a 	vldr	s6, [r0, #-40]	@ 0xffffffd8
 800c3f6:	ed51 3a0a 	vldr	s7, [r1, #-40]	@ 0xffffffd8
 800c3fa:	ed10 4a09 	vldr	s8, [r0, #-36]	@ 0xffffffdc
 800c3fe:	ed50 0a06 	vldr	s1, [r0, #-24]	@ 0xffffffe8
 800c402:	ed11 1a06 	vldr	s2, [r1, #-24]	@ 0xffffffe8
 800c406:	ed10 2a05 	vldr	s4, [r0, #-20]	@ 0xffffffec
 800c40a:	ed51 2a05 	vldr	s5, [r1, #-20]	@ 0xffffffec
 800c40e:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800c412:	ed50 5a0e 	vldr	s11, [r0, #-56]	@ 0xffffffc8
 800c416:	eee6 7a26 	vfma.f32	s15, s12, s13
 800c41a:	3510      	adds	r5, #16
 800c41c:	4565      	cmp	r5, ip
 800c41e:	ed11 6a0e 	vldr	s12, [r1, #-56]	@ 0xffffffc8
 800c422:	ed51 6a0d 	vldr	s13, [r1, #-52]	@ 0xffffffcc
 800c426:	eee5 7a86 	vfma.f32	s15, s11, s12
 800c42a:	f100 0040 	add.w	r0, r0, #64	@ 0x40
 800c42e:	f101 0140 	add.w	r1, r1, #64	@ 0x40
 800c432:	ed51 5a1c 	vldr	s11, [r1, #-112]	@ 0xffffff90
 800c436:	ed10 6a1b 	vldr	s12, [r0, #-108]	@ 0xffffff94
 800c43a:	eee4 7aa6 	vfma.f32	s15, s9, s13
 800c43e:	ed51 6a1b 	vldr	s13, [r1, #-108]	@ 0xffffff94
 800c442:	ed51 4a19 	vldr	s9, [r1, #-100]	@ 0xffffff9c
 800c446:	eee5 7a25 	vfma.f32	s15, s10, s11
 800c44a:	ed10 5a18 	vldr	s10, [r0, #-96]	@ 0xffffffa0
 800c44e:	ed51 5a18 	vldr	s11, [r1, #-96]	@ 0xffffffa0
 800c452:	eee6 7a26 	vfma.f32	s15, s12, s13
 800c456:	ed10 6a17 	vldr	s12, [r0, #-92]	@ 0xffffffa4
 800c45a:	ed51 6a17 	vldr	s13, [r1, #-92]	@ 0xffffffa4
 800c45e:	eee3 7a23 	vfma.f32	s15, s6, s7
 800c462:	ed10 3a14 	vldr	s6, [r0, #-80]	@ 0xffffffb0
 800c466:	ed51 3a14 	vldr	s7, [r1, #-80]	@ 0xffffffb0
 800c46a:	eee4 7a24 	vfma.f32	s15, s8, s9
 800c46e:	ed10 4a13 	vldr	s8, [r0, #-76]	@ 0xffffffb4
 800c472:	ed51 4a13 	vldr	s9, [r1, #-76]	@ 0xffffffb4
 800c476:	eee5 7a25 	vfma.f32	s15, s10, s11
 800c47a:	ed10 5a12 	vldr	s10, [r0, #-72]	@ 0xffffffb8
 800c47e:	ed51 5a12 	vldr	s11, [r1, #-72]	@ 0xffffffb8
 800c482:	eee6 7a26 	vfma.f32	s15, s12, s13
 800c486:	ed10 6a11 	vldr	s12, [r0, #-68]	@ 0xffffffbc
 800c48a:	ed51 6a11 	vldr	s13, [r1, #-68]	@ 0xffffffbc
 800c48e:	eee0 7a81 	vfma.f32	s15, s1, s2
 800c492:	eee2 7a22 	vfma.f32	s15, s4, s5
 800c496:	eee3 7a23 	vfma.f32	s15, s6, s7
 800c49a:	eee4 7a24 	vfma.f32	s15, s8, s9
 800c49e:	eee5 7a25 	vfma.f32	s15, s10, s11
 800c4a2:	eee6 7a26 	vfma.f32	s15, s12, s13
 800c4a6:	ee37 7a27 	vadd.f32	s14, s14, s15
 800c4aa:	db96      	blt.n	800c3da <forward_lite_conv2d_if32of32wf32+0x41a>
 800c4ac:	4472      	add	r2, lr
 800c4ae:	4473      	add	r3, lr
 800c4b0:	4641      	mov	r1, r8
 800c4b2:	428c      	cmp	r4, r1
 800c4b4:	dd10      	ble.n	800c4d8 <forward_lite_conv2d_if32of32wf32+0x518>
 800c4b6:	4608      	mov	r0, r1
 800c4b8:	4616      	mov	r6, r2
 800c4ba:	461d      	mov	r5, r3
 800c4bc:	ecf5 6a01 	vldmia	r5!, {s13}
 800c4c0:	ecf6 7a01 	vldmia	r6!, {s15}
 800c4c4:	3001      	adds	r0, #1
 800c4c6:	4284      	cmp	r4, r0
 800c4c8:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800c4cc:	d1f6      	bne.n	800c4bc <forward_lite_conv2d_if32of32wf32+0x4fc>
 800c4ce:	1a61      	subs	r1, r4, r1
 800c4d0:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 800c4d4:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 800c4d8:	3701      	adds	r7, #1
 800c4da:	45bb      	cmp	fp, r7
 800c4dc:	4452      	add	r2, sl
 800c4de:	444b      	add	r3, r9
 800c4e0:	f47f af71 	bne.w	800c3c6 <forward_lite_conv2d_if32of32wf32+0x406>
 800c4e4:	9901      	ldr	r1, [sp, #4]
 800c4e6:	9808      	ldr	r0, [sp, #32]
 800c4e8:	9a03      	ldr	r2, [sp, #12]
 800c4ea:	9b04      	ldr	r3, [sp, #16]
 800c4ec:	ed82 7a00 	vstr	s14, [r2]
 800c4f0:	4401      	add	r1, r0
 800c4f2:	9101      	str	r1, [sp, #4]
 800c4f4:	9905      	ldr	r1, [sp, #20]
 800c4f6:	440a      	add	r2, r1
 800c4f8:	9203      	str	r2, [sp, #12]
 800c4fa:	9a00      	ldr	r2, [sp, #0]
 800c4fc:	9906      	ldr	r1, [sp, #24]
 800c4fe:	1a12      	subs	r2, r2, r0
 800c500:	9200      	str	r2, [sp, #0]
 800c502:	9a02      	ldr	r2, [sp, #8]
 800c504:	440a      	add	r2, r1
 800c506:	9202      	str	r2, [sp, #8]
 800c508:	9a31      	ldr	r2, [sp, #196]	@ 0xc4
 800c50a:	3301      	adds	r3, #1
 800c50c:	429a      	cmp	r2, r3
 800c50e:	9304      	str	r3, [sp, #16]
 800c510:	f47f af25 	bne.w	800c35e <forward_lite_conv2d_if32of32wf32+0x39e>
 800c514:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c516:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800c518:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800c51a:	440a      	add	r2, r1
 800c51c:	9209      	str	r2, [sp, #36]	@ 0x24
 800c51e:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800c520:	3304      	adds	r3, #4
 800c522:	4293      	cmp	r3, r2
 800c524:	9310      	str	r3, [sp, #64]	@ 0x40
 800c526:	f4bf aeca 	bcs.w	800c2be <forward_lite_conv2d_if32of32wf32+0x2fe>
 800c52a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c52c:	2b00      	cmp	r3, #0
 800c52e:	f47f af04 	bne.w	800c33a <forward_lite_conv2d_if32of32wf32+0x37a>
 800c532:	eef0 1a48 	vmov.f32	s3, s16
 800c536:	e704      	b.n	800c342 <forward_lite_conv2d_if32of32wf32+0x382>
 800c538:	9a00      	ldr	r2, [sp, #0]
 800c53a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c53c:	4614      	mov	r4, r2
 800c53e:	4413      	add	r3, r2
 800c540:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800c542:	e713      	b.n	800c36c <forward_lite_conv2d_if32of32wf32+0x3ac>
 800c544:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 800c546:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800c548:	920b      	str	r2, [sp, #44]	@ 0x2c
 800c54a:	e58e      	b.n	800c06a <forward_lite_conv2d_if32of32wf32+0xaa>

0800c54c <forward_lite_nl_relu_generic_if32of32_kernel>:
 800c54c:	edd3 6a02 	vldr	s13, [r3, #8]
 800c550:	ed93 7a00 	vldr	s14, [r3]
 800c554:	ed93 6a01 	vldr	s12, [r3, #4]
 800c558:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 800c55c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c560:	d42a      	bmi.n	800c5b8 <forward_lite_nl_relu_generic_if32of32_kernel+0x6c>
 800c562:	f102 4280 	add.w	r2, r2, #1073741824	@ 0x40000000
 800c566:	3a01      	subs	r2, #1
 800c568:	eb01 0c82 	add.w	ip, r1, r2, lsl #2
 800c56c:	4561      	cmp	r1, ip
 800c56e:	ea4f 0282 	mov.w	r2, r2, lsl #2
 800c572:	d85d      	bhi.n	800c630 <forward_lite_nl_relu_generic_if32of32_kernel+0xe4>
 800c574:	1d11      	adds	r1, r2, #4
 800c576:	f10c 0304 	add.w	r3, ip, #4
 800c57a:	4408      	add	r0, r1
 800c57c:	ebac 0202 	sub.w	r2, ip, r2
 800c580:	e00c      	b.n	800c59c <forward_lite_nl_relu_generic_if32of32_kernel+0x50>
 800c582:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800c586:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c58a:	ee77 5ac7 	vsub.f32	s11, s15, s14
 800c58e:	db01      	blt.n	800c594 <forward_lite_nl_relu_generic_if32of32_kernel+0x48>
 800c590:	ee65 7a86 	vmul.f32	s15, s11, s12
 800c594:	4293      	cmp	r3, r2
 800c596:	ed60 7a01 	vstmdb	r0!, {s15}
 800c59a:	d00c      	beq.n	800c5b6 <forward_lite_nl_relu_generic_if32of32_kernel+0x6a>
 800c59c:	ed73 7a01 	vldmdb	r3!, {s15}
 800c5a0:	eef4 6ae7 	vcmpe.f32	s13, s15
 800c5a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c5a8:	daeb      	bge.n	800c582 <forward_lite_nl_relu_generic_if32of32_kernel+0x36>
 800c5aa:	eef0 7a66 	vmov.f32	s15, s13
 800c5ae:	4293      	cmp	r3, r2
 800c5b0:	ed60 7a01 	vstmdb	r0!, {s15}
 800c5b4:	d1f2      	bne.n	800c59c <forward_lite_nl_relu_generic_if32of32_kernel+0x50>
 800c5b6:	4770      	bx	lr
 800c5b8:	eeb5 6a40 	vcmp.f32	s12, #0.0
 800c5bc:	f102 4280 	add.w	r2, r2, #1073741824	@ 0x40000000
 800c5c0:	3a01      	subs	r2, #1
 800c5c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c5c6:	eb01 0c82 	add.w	ip, r1, r2, lsl #2
 800c5ca:	ea4f 0282 	mov.w	r2, r2, lsl #2
 800c5ce:	d017      	beq.n	800c600 <forward_lite_nl_relu_generic_if32of32_kernel+0xb4>
 800c5d0:	4561      	cmp	r1, ip
 800c5d2:	d82d      	bhi.n	800c630 <forward_lite_nl_relu_generic_if32of32_kernel+0xe4>
 800c5d4:	1d11      	adds	r1, r2, #4
 800c5d6:	f10c 0304 	add.w	r3, ip, #4
 800c5da:	4401      	add	r1, r0
 800c5dc:	ebac 0202 	sub.w	r2, ip, r2
 800c5e0:	ed73 7a01 	vldmdb	r3!, {s15}
 800c5e4:	ee77 6ac7 	vsub.f32	s13, s15, s14
 800c5e8:	eef4 7ac7 	vcmpe.f32	s15, s14
 800c5ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c5f0:	ee66 6a86 	vmul.f32	s13, s13, s12
 800c5f4:	d81d      	bhi.n	800c632 <forward_lite_nl_relu_generic_if32of32_kernel+0xe6>
 800c5f6:	4293      	cmp	r3, r2
 800c5f8:	ed61 6a01 	vstmdb	r1!, {s13}
 800c5fc:	d1f0      	bne.n	800c5e0 <forward_lite_nl_relu_generic_if32of32_kernel+0x94>
 800c5fe:	4770      	bx	lr
 800c600:	4561      	cmp	r1, ip
 800c602:	d815      	bhi.n	800c630 <forward_lite_nl_relu_generic_if32of32_kernel+0xe4>
 800c604:	1d11      	adds	r1, r2, #4
 800c606:	b500      	push	{lr}
 800c608:	f10c 0304 	add.w	r3, ip, #4
 800c60c:	f04f 0e00 	mov.w	lr, #0
 800c610:	4401      	add	r1, r0
 800c612:	ebac 0202 	sub.w	r2, ip, r2
 800c616:	ed73 7a01 	vldmdb	r3!, {s15}
 800c61a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800c61e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c622:	d40b      	bmi.n	800c63c <forward_lite_nl_relu_generic_if32of32_kernel+0xf0>
 800c624:	4293      	cmp	r3, r2
 800c626:	f841 ed04 	str.w	lr, [r1, #-4]!
 800c62a:	d1f4      	bne.n	800c616 <forward_lite_nl_relu_generic_if32of32_kernel+0xca>
 800c62c:	f85d fb04 	ldr.w	pc, [sp], #4
 800c630:	4770      	bx	lr
 800c632:	4293      	cmp	r3, r2
 800c634:	ed61 7a01 	vstmdb	r1!, {s15}
 800c638:	d1d2      	bne.n	800c5e0 <forward_lite_nl_relu_generic_if32of32_kernel+0x94>
 800c63a:	4770      	bx	lr
 800c63c:	4293      	cmp	r3, r2
 800c63e:	ed61 7a01 	vstmdb	r1!, {s15}
 800c642:	d1e8      	bne.n	800c616 <forward_lite_nl_relu_generic_if32of32_kernel+0xca>
 800c644:	e7f2      	b.n	800c62c <forward_lite_nl_relu_generic_if32of32_kernel+0xe0>
 800c646:	bf00      	nop

0800c648 <lite_decompress_ilutof32>:
 800c648:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c64c:	9d08      	ldr	r5, [sp, #32]
 800c64e:	2b04      	cmp	r3, #4
 800c650:	ea4f 0685 	mov.w	r6, r5, lsl #2
 800c654:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 800c658:	d015      	beq.n	800c686 <lite_decompress_ilutof32+0x3e>
 800c65a:	2b08      	cmp	r3, #8
 800c65c:	d110      	bne.n	800c680 <lite_decompress_ilutof32+0x38>
 800c65e:	42a8      	cmp	r0, r5
 800c660:	bf38      	it	cc
 800c662:	460c      	movcc	r4, r1
 800c664:	d20c      	bcs.n	800c680 <lite_decompress_ilutof32+0x38>
 800c666:	f814 3b01 	ldrb.w	r3, [r4], #1
 800c66a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800c66e:	681b      	ldr	r3, [r3, #0]
 800c670:	f840 3b04 	str.w	r3, [r0], #4
 800c674:	4285      	cmp	r5, r0
 800c676:	d8f6      	bhi.n	800c666 <lite_decompress_ilutof32+0x1e>
 800c678:	3e01      	subs	r6, #1
 800c67a:	eb01 0696 	add.w	r6, r1, r6, lsr #2
 800c67e:	1c71      	adds	r1, r6, #1
 800c680:	4608      	mov	r0, r1
 800c682:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c686:	9b07      	ldr	r3, [sp, #28]
 800c688:	085e      	lsrs	r6, r3, #1
 800c68a:	f003 0701 	and.w	r7, r3, #1
 800c68e:	ea4f 09c6 	mov.w	r9, r6, lsl #3
 800c692:	f106 38ff 	add.w	r8, r6, #4294967295
 800c696:	42a8      	cmp	r0, r5
 800c698:	d2f2      	bcs.n	800c680 <lite_decompress_ilutof32+0x38>
 800c69a:	b33e      	cbz	r6, 800c6ec <lite_decompress_ilutof32+0xa4>
 800c69c:	f100 0e08 	add.w	lr, r0, #8
 800c6a0:	f101 3cff 	add.w	ip, r1, #4294967295
 800c6a4:	eb01 0408 	add.w	r4, r1, r8
 800c6a8:	f81c 3f01 	ldrb.w	r3, [ip, #1]!
 800c6ac:	091b      	lsrs	r3, r3, #4
 800c6ae:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800c6b2:	f10e 0e08 	add.w	lr, lr, #8
 800c6b6:	681b      	ldr	r3, [r3, #0]
 800c6b8:	f84e 3c10 	str.w	r3, [lr, #-16]
 800c6bc:	f89c 3000 	ldrb.w	r3, [ip]
 800c6c0:	f003 030f 	and.w	r3, r3, #15
 800c6c4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800c6c8:	4564      	cmp	r4, ip
 800c6ca:	681b      	ldr	r3, [r3, #0]
 800c6cc:	f84e 3c0c 	str.w	r3, [lr, #-12]
 800c6d0:	d1ea      	bne.n	800c6a8 <lite_decompress_ilutof32+0x60>
 800c6d2:	4431      	add	r1, r6
 800c6d4:	4448      	add	r0, r9
 800c6d6:	2f00      	cmp	r7, #0
 800c6d8:	d0dd      	beq.n	800c696 <lite_decompress_ilutof32+0x4e>
 800c6da:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c6de:	091b      	lsrs	r3, r3, #4
 800c6e0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800c6e4:	681b      	ldr	r3, [r3, #0]
 800c6e6:	f840 3b04 	str.w	r3, [r0], #4
 800c6ea:	e7d4      	b.n	800c696 <lite_decompress_ilutof32+0x4e>
 800c6ec:	2f00      	cmp	r7, #0
 800c6ee:	d1f4      	bne.n	800c6da <lite_decompress_ilutof32+0x92>
 800c6f0:	42a8      	cmp	r0, r5
 800c6f2:	d3fd      	bcc.n	800c6f0 <lite_decompress_ilutof32+0xa8>
 800c6f4:	4608      	mov	r0, r1
 800c6f6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c6fa:	bf00      	nop

0800c6fc <forward_lite_dense_if32of32wf32>:
 800c6fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c700:	e9d0 2305 	ldrd	r2, r3, [r0, #20]
 800c704:	6801      	ldr	r1, [r0, #0]
 800c706:	f8d0 8004 	ldr.w	r8, [r0, #4]
 800c70a:	fb02 f303 	mul.w	r3, r2, r3
 800c70e:	b083      	sub	sp, #12
 800c710:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800c714:	4299      	cmp	r1, r3
 800c716:	9100      	str	r1, [sp, #0]
 800c718:	9301      	str	r3, [sp, #4]
 800c71a:	f080 811e 	bcs.w	800c95a <forward_lite_dense_if32of32wf32+0x25e>
 800c71e:	6904      	ldr	r4, [r0, #16]
 800c720:	4607      	mov	r7, r0
 800c722:	0096      	lsls	r6, r2, #2
 800c724:	9b00      	ldr	r3, [sp, #0]
 800c726:	68bd      	ldr	r5, [r7, #8]
 800c728:	eb03 0e06 	add.w	lr, r3, r6
 800c72c:	459e      	cmp	lr, r3
 800c72e:	461e      	mov	r6, r3
 800c730:	f240 8104 	bls.w	800c93c <forward_lite_dense_if32of32wf32+0x240>
 800c734:	f1a4 0c10 	sub.w	ip, r4, #16
 800c738:	ea4f 1c1c 	mov.w	ip, ip, lsr #4
 800c73c:	f10c 0c01 	add.w	ip, ip, #1
 800c740:	ea4f 1b8c 	mov.w	fp, ip, lsl #6
 800c744:	ea4f 0984 	mov.w	r9, r4, lsl #2
 800c748:	eb08 1c8c 	add.w	ip, r8, ip, lsl #6
 800c74c:	2c0f      	cmp	r4, #15
 800c74e:	ed9f 7a97 	vldr	s14, [pc, #604]	@ 800c9ac <forward_lite_dense_if32of32wf32+0x2b0>
 800c752:	f240 8105 	bls.w	800c960 <forward_lite_dense_if32of32wf32+0x264>
 800c756:	f108 0240 	add.w	r2, r8, #64	@ 0x40
 800c75a:	f105 0340 	add.w	r3, r5, #64	@ 0x40
 800c75e:	4621      	mov	r1, r4
 800c760:	ed53 5a0f 	vldr	s11, [r3, #-60]	@ 0xffffffc4
 800c764:	ed52 7a0f 	vldr	s15, [r2, #-60]	@ 0xffffffc4
 800c768:	ed12 6a10 	vldr	s12, [r2, #-64]	@ 0xffffffc0
 800c76c:	ed53 6a10 	vldr	s13, [r3, #-64]	@ 0xffffffc0
 800c770:	ed52 4a0d 	vldr	s9, [r2, #-52]	@ 0xffffffcc
 800c774:	ed12 5a0c 	vldr	s10, [r2, #-48]	@ 0xffffffd0
 800c778:	ed12 3a0a 	vldr	s6, [r2, #-40]	@ 0xffffffd8
 800c77c:	ed53 3a0a 	vldr	s7, [r3, #-40]	@ 0xffffffd8
 800c780:	ed12 4a09 	vldr	s8, [r2, #-36]	@ 0xffffffdc
 800c784:	ed12 1a06 	vldr	s2, [r2, #-24]	@ 0xffffffe8
 800c788:	ed53 1a06 	vldr	s3, [r3, #-24]	@ 0xffffffe8
 800c78c:	ed12 2a05 	vldr	s4, [r2, #-20]	@ 0xffffffec
 800c790:	ed53 2a05 	vldr	s5, [r3, #-20]	@ 0xffffffec
 800c794:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800c798:	ed52 5a0e 	vldr	s11, [r2, #-56]	@ 0xffffffc8
 800c79c:	eee6 7a26 	vfma.f32	s15, s12, s13
 800c7a0:	3910      	subs	r1, #16
 800c7a2:	290f      	cmp	r1, #15
 800c7a4:	ed13 6a0e 	vldr	s12, [r3, #-56]	@ 0xffffffc8
 800c7a8:	ed53 6a0d 	vldr	s13, [r3, #-52]	@ 0xffffffcc
 800c7ac:	eee5 7a86 	vfma.f32	s15, s11, s12
 800c7b0:	f102 0240 	add.w	r2, r2, #64	@ 0x40
 800c7b4:	f103 0340 	add.w	r3, r3, #64	@ 0x40
 800c7b8:	ed53 5a1c 	vldr	s11, [r3, #-112]	@ 0xffffff90
 800c7bc:	ed12 6a1b 	vldr	s12, [r2, #-108]	@ 0xffffff94
 800c7c0:	eee4 7aa6 	vfma.f32	s15, s9, s13
 800c7c4:	ed53 6a1b 	vldr	s13, [r3, #-108]	@ 0xffffff94
 800c7c8:	ed53 4a19 	vldr	s9, [r3, #-100]	@ 0xffffff9c
 800c7cc:	eee5 7a25 	vfma.f32	s15, s10, s11
 800c7d0:	ed12 5a18 	vldr	s10, [r2, #-96]	@ 0xffffffa0
 800c7d4:	ed53 5a18 	vldr	s11, [r3, #-96]	@ 0xffffffa0
 800c7d8:	eee6 7a26 	vfma.f32	s15, s12, s13
 800c7dc:	ed12 6a17 	vldr	s12, [r2, #-92]	@ 0xffffffa4
 800c7e0:	ed53 6a17 	vldr	s13, [r3, #-92]	@ 0xffffffa4
 800c7e4:	eee3 7a23 	vfma.f32	s15, s6, s7
 800c7e8:	ed12 3a14 	vldr	s6, [r2, #-80]	@ 0xffffffb0
 800c7ec:	ed53 3a14 	vldr	s7, [r3, #-80]	@ 0xffffffb0
 800c7f0:	eee4 7a24 	vfma.f32	s15, s8, s9
 800c7f4:	ed12 4a13 	vldr	s8, [r2, #-76]	@ 0xffffffb4
 800c7f8:	ed53 4a13 	vldr	s9, [r3, #-76]	@ 0xffffffb4
 800c7fc:	eee5 7a25 	vfma.f32	s15, s10, s11
 800c800:	ed12 5a12 	vldr	s10, [r2, #-72]	@ 0xffffffb8
 800c804:	ed53 5a12 	vldr	s11, [r3, #-72]	@ 0xffffffb8
 800c808:	eee6 7a26 	vfma.f32	s15, s12, s13
 800c80c:	ed12 6a11 	vldr	s12, [r2, #-68]	@ 0xffffffbc
 800c810:	ed53 6a11 	vldr	s13, [r3, #-68]	@ 0xffffffbc
 800c814:	eee1 7a21 	vfma.f32	s15, s2, s3
 800c818:	eee2 7a22 	vfma.f32	s15, s4, s5
 800c81c:	eee3 7a23 	vfma.f32	s15, s6, s7
 800c820:	eee4 7a24 	vfma.f32	s15, s8, s9
 800c824:	eee5 7a25 	vfma.f32	s15, s10, s11
 800c828:	eee6 7a26 	vfma.f32	s15, s12, s13
 800c82c:	ee37 7a27 	vadd.f32	s14, s14, s15
 800c830:	d896      	bhi.n	800c760 <forward_lite_dense_if32of32wf32+0x64>
 800c832:	eb05 020b 	add.w	r2, r5, fp
 800c836:	f004 010f 	and.w	r1, r4, #15
 800c83a:	4663      	mov	r3, ip
 800c83c:	2903      	cmp	r1, #3
 800c83e:	d95f      	bls.n	800c900 <forward_lite_dense_if32of32wf32+0x204>
 800c840:	edd2 6a01 	vldr	s13, [r2, #4]
 800c844:	edd3 7a01 	vldr	s15, [r3, #4]
 800c848:	ed93 6a00 	vldr	s12, [r3]
 800c84c:	ed93 5a02 	vldr	s10, [r3, #8]
 800c850:	edd2 5a02 	vldr	s11, [r2, #8]
 800c854:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800c858:	edd2 6a00 	vldr	s13, [r2]
 800c85c:	eee6 7a26 	vfma.f32	s15, s12, s13
 800c860:	1f08      	subs	r0, r1, #4
 800c862:	2803      	cmp	r0, #3
 800c864:	ed93 6a03 	vldr	s12, [r3, #12]
 800c868:	edd2 6a03 	vldr	s13, [r2, #12]
 800c86c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c870:	eee5 7a25 	vfma.f32	s15, s10, s11
 800c874:	eee6 7a26 	vfma.f32	s15, s12, s13
 800c878:	eeb0 7a67 	vmov.f32	s14, s15
 800c87c:	d938      	bls.n	800c8f0 <forward_lite_dense_if32of32wf32+0x1f4>
 800c87e:	edd2 6a05 	vldr	s13, [r2, #20]
 800c882:	edd3 7a05 	vldr	s15, [r3, #20]
 800c886:	ed93 6a04 	vldr	s12, [r3, #16]
 800c88a:	ed93 5a06 	vldr	s10, [r3, #24]
 800c88e:	edd2 5a06 	vldr	s11, [r2, #24]
 800c892:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800c896:	edd2 6a04 	vldr	s13, [r2, #16]
 800c89a:	eee6 7a26 	vfma.f32	s15, s12, s13
 800c89e:	f1a1 0a08 	sub.w	sl, r1, #8
 800c8a2:	f1ba 0f03 	cmp.w	sl, #3
 800c8a6:	ed93 6a07 	vldr	s12, [r3, #28]
 800c8aa:	edd2 6a07 	vldr	s13, [r2, #28]
 800c8ae:	eee5 7a25 	vfma.f32	s15, s10, s11
 800c8b2:	eee6 7a26 	vfma.f32	s15, s12, s13
 800c8b6:	ee37 7a27 	vadd.f32	s14, s14, s15
 800c8ba:	d919      	bls.n	800c8f0 <forward_lite_dense_if32of32wf32+0x1f4>
 800c8bc:	edd3 6a09 	vldr	s13, [r3, #36]	@ 0x24
 800c8c0:	edd2 7a09 	vldr	s15, [r2, #36]	@ 0x24
 800c8c4:	ed92 6a08 	vldr	s12, [r2, #32]
 800c8c8:	ed92 5a0a 	vldr	s10, [r2, #40]	@ 0x28
 800c8cc:	edd3 5a0a 	vldr	s11, [r3, #40]	@ 0x28
 800c8d0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800c8d4:	edd3 6a08 	vldr	s13, [r3, #32]
 800c8d8:	eee6 7a26 	vfma.f32	s15, s12, s13
 800c8dc:	ed92 6a0b 	vldr	s12, [r2, #44]	@ 0x2c
 800c8e0:	edd3 6a0b 	vldr	s13, [r3, #44]	@ 0x2c
 800c8e4:	eee5 7a25 	vfma.f32	s15, s10, s11
 800c8e8:	eee6 7a26 	vfma.f32	s15, s12, s13
 800c8ec:	ee37 7a27 	vadd.f32	s14, s14, s15
 800c8f0:	0880      	lsrs	r0, r0, #2
 800c8f2:	3001      	adds	r0, #1
 800c8f4:	eb02 1200 	add.w	r2, r2, r0, lsl #4
 800c8f8:	eb03 1300 	add.w	r3, r3, r0, lsl #4
 800c8fc:	f001 0103 	and.w	r1, r1, #3
 800c900:	b1a9      	cbz	r1, 800c92e <forward_lite_dense_if32of32wf32+0x232>
 800c902:	edd3 6a00 	vldr	s13, [r3]
 800c906:	edd2 7a00 	vldr	s15, [r2]
 800c90a:	3901      	subs	r1, #1
 800c90c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800c910:	d00d      	beq.n	800c92e <forward_lite_dense_if32of32wf32+0x232>
 800c912:	edd3 6a01 	vldr	s13, [r3, #4]
 800c916:	edd2 7a01 	vldr	s15, [r2, #4]
 800c91a:	2901      	cmp	r1, #1
 800c91c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800c920:	d005      	beq.n	800c92e <forward_lite_dense_if32of32wf32+0x232>
 800c922:	edd2 6a02 	vldr	s13, [r2, #8]
 800c926:	edd3 7a02 	vldr	s15, [r3, #8]
 800c92a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800c92e:	444d      	add	r5, r9
 800c930:	eca6 7a01 	vstmia	r6!, {s14}
 800c934:	45b6      	cmp	lr, r6
 800c936:	f63f af09 	bhi.w	800c74c <forward_lite_dense_if32of32wf32+0x50>
 800c93a:	697a      	ldr	r2, [r7, #20]
 800c93c:	68fb      	ldr	r3, [r7, #12]
 800c93e:	b99b      	cbnz	r3, 800c968 <forward_lite_dense_if32of32wf32+0x26c>
 800c940:	9b00      	ldr	r3, [sp, #0]
 800c942:	9901      	ldr	r1, [sp, #4]
 800c944:	693c      	ldr	r4, [r7, #16]
 800c946:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 800c94a:	4299      	cmp	r1, r3
 800c94c:	9300      	str	r3, [sp, #0]
 800c94e:	eb08 0884 	add.w	r8, r8, r4, lsl #2
 800c952:	ea4f 0682 	mov.w	r6, r2, lsl #2
 800c956:	f63f aee5 	bhi.w	800c724 <forward_lite_dense_if32of32wf32+0x28>
 800c95a:	b003      	add	sp, #12
 800c95c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c960:	4621      	mov	r1, r4
 800c962:	462a      	mov	r2, r5
 800c964:	4643      	mov	r3, r8
 800c966:	e769      	b.n	800c83c <forward_lite_dense_if32of32wf32+0x140>
 800c968:	2a00      	cmp	r2, #0
 800c96a:	d0e9      	beq.n	800c940 <forward_lite_dense_if32of32wf32+0x244>
 800c96c:	9a00      	ldr	r2, [sp, #0]
 800c96e:	ed93 7a00 	vldr	s14, [r3]
 800c972:	edd2 7a00 	vldr	s15, [r2]
 800c976:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c97a:	4613      	mov	r3, r2
 800c97c:	edc2 7a00 	vstr	s15, [r2]
 800c980:	697a      	ldr	r2, [r7, #20]
 800c982:	2a01      	cmp	r2, #1
 800c984:	d9dc      	bls.n	800c940 <forward_lite_dense_if32of32wf32+0x244>
 800c986:	1d19      	adds	r1, r3, #4
 800c988:	2301      	movs	r3, #1
 800c98a:	68fa      	ldr	r2, [r7, #12]
 800c98c:	ed91 7a00 	vldr	s14, [r1]
 800c990:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800c994:	edd2 7a00 	vldr	s15, [r2]
 800c998:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c99c:	3301      	adds	r3, #1
 800c99e:	ece1 7a01 	vstmia	r1!, {s15}
 800c9a2:	697a      	ldr	r2, [r7, #20]
 800c9a4:	429a      	cmp	r2, r3
 800c9a6:	d8f0      	bhi.n	800c98a <forward_lite_dense_if32of32wf32+0x28e>
 800c9a8:	e7ca      	b.n	800c940 <forward_lite_dense_if32of32wf32+0x244>
 800c9aa:	bf00      	nop
 800c9ac:	00000000 	.word	0x00000000

0800c9b0 <forward_lite_dense_if32of32wf32_lut4>:
 800c9b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c9b4:	b08d      	sub	sp, #52	@ 0x34
 800c9b6:	4605      	mov	r5, r0
 800c9b8:	9005      	str	r0, [sp, #20]
 800c9ba:	920a      	str	r2, [sp, #40]	@ 0x28
 800c9bc:	4618      	mov	r0, r3
 800c9be:	e9dd 2319 	ldrd	r2, r3, [sp, #100]	@ 0x64
 800c9c2:	9e16      	ldr	r6, [sp, #88]	@ 0x58
 800c9c4:	fb02 f303 	mul.w	r3, r2, r3
 800c9c8:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800c9cc:	460c      	mov	r4, r1
 800c9ce:	9d18      	ldr	r5, [sp, #96]	@ 0x60
 800c9d0:	9308      	str	r3, [sp, #32]
 800c9d2:	b126      	cbz	r6, 800c9de <forward_lite_dense_if32of32wf32_lut4+0x2e>
 800c9d4:	2240      	movs	r2, #64	@ 0x40
 800c9d6:	4631      	mov	r1, r6
 800c9d8:	f000 fa40 	bl	800ce5c <st_int8_copy>
 800c9dc:	4630      	mov	r0, r6
 800c9de:	9b05      	ldr	r3, [sp, #20]
 800c9e0:	9a08      	ldr	r2, [sp, #32]
 800c9e2:	4293      	cmp	r3, r2
 800c9e4:	f080 80f5 	bcs.w	800cbd2 <forward_lite_dense_if32of32wf32_lut4+0x222>
 800c9e8:	08eb      	lsrs	r3, r5, #3
 800c9ea:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800c9ec:	9301      	str	r3, [sp, #4]
 800c9ee:	f005 0101 	and.w	r1, r5, #1
 800c9f2:	eb04 1a43 	add.w	sl, r4, r3, lsl #5
 800c9f6:	009b      	lsls	r3, r3, #2
 800c9f8:	0092      	lsls	r2, r2, #2
 800c9fa:	f025 0801 	bic.w	r8, r5, #1
 800c9fe:	9102      	str	r1, [sp, #8]
 800ca00:	9304      	str	r3, [sp, #16]
 800ca02:	00a9      	lsls	r1, r5, #2
 800ca04:	9b05      	ldr	r3, [sp, #20]
 800ca06:	9207      	str	r2, [sp, #28]
 800ca08:	eb04 0888 	add.w	r8, r4, r8, lsl #2
 800ca0c:	9109      	str	r1, [sp, #36]	@ 0x24
 800ca0e:	f104 0b20 	add.w	fp, r4, #32
 800ca12:	920b      	str	r2, [sp, #44]	@ 0x2c
 800ca14:	9a07      	ldr	r2, [sp, #28]
 800ca16:	eb03 0902 	add.w	r9, r3, r2
 800ca1a:	4599      	cmp	r9, r3
 800ca1c:	f1ab 0220 	sub.w	r2, fp, #32
 800ca20:	9206      	str	r2, [sp, #24]
 800ca22:	f240 80d9 	bls.w	800cbd8 <forward_lite_dense_if32of32wf32_lut4+0x228>
 800ca26:	469e      	mov	lr, r3
 800ca28:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800ca2a:	f108 33ff 	add.w	r3, r8, #4294967295
 800ca2e:	9303      	str	r3, [sp, #12]
 800ca30:	9b01      	ldr	r3, [sp, #4]
 800ca32:	ed9f 7a72 	vldr	s14, [pc, #456]	@ 800cbfc <forward_lite_dense_if32of32wf32_lut4+0x24c>
 800ca36:	2b00      	cmp	r3, #0
 800ca38:	f000 80b2 	beq.w	800cba0 <forward_lite_dense_if32of32wf32_lut4+0x1f0>
 800ca3c:	9b04      	ldr	r3, [sp, #16]
 800ca3e:	18d5      	adds	r5, r2, r3
 800ca40:	465b      	mov	r3, fp
 800ca42:	7814      	ldrb	r4, [r2, #0]
 800ca44:	ed53 2a07 	vldr	s5, [r3, #-28]	@ 0xffffffe4
 800ca48:	7851      	ldrb	r1, [r2, #1]
 800ca4a:	ed53 3a08 	vldr	s7, [r3, #-32]	@ 0xffffffe0
 800ca4e:	ed13 4a06 	vldr	s8, [r3, #-24]	@ 0xffffffe8
 800ca52:	ed53 4a05 	vldr	s9, [r3, #-20]	@ 0xffffffec
 800ca56:	ed13 5a04 	vldr	s10, [r3, #-16]
 800ca5a:	ed53 5a03 	vldr	s11, [r3, #-12]
 800ca5e:	ed13 6a02 	vldr	s12, [r3, #-8]
 800ca62:	ed53 6a01 	vldr	s13, [r3, #-4]
 800ca66:	f004 060f 	and.w	r6, r4, #15
 800ca6a:	eb00 0686 	add.w	r6, r0, r6, lsl #2
 800ca6e:	edd6 7a00 	vldr	s15, [r6]
 800ca72:	0924      	lsrs	r4, r4, #4
 800ca74:	eb00 0484 	add.w	r4, r0, r4, lsl #2
 800ca78:	ed94 3a00 	vldr	s6, [r4]
 800ca7c:	ee67 7aa2 	vmul.f32	s15, s15, s5
 800ca80:	090c      	lsrs	r4, r1, #4
 800ca82:	eee3 7a23 	vfma.f32	s15, s6, s7
 800ca86:	eb00 0484 	add.w	r4, r0, r4, lsl #2
 800ca8a:	f001 010f 	and.w	r1, r1, #15
 800ca8e:	edd4 3a00 	vldr	s7, [r4]
 800ca92:	7894      	ldrb	r4, [r2, #2]
 800ca94:	eee3 7a84 	vfma.f32	s15, s7, s8
 800ca98:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800ca9c:	0926      	lsrs	r6, r4, #4
 800ca9e:	ed91 4a00 	vldr	s8, [r1]
 800caa2:	78d1      	ldrb	r1, [r2, #3]
 800caa4:	eee4 7a24 	vfma.f32	s15, s8, s9
 800caa8:	eb00 0686 	add.w	r6, r0, r6, lsl #2
 800caac:	f004 040f 	and.w	r4, r4, #15
 800cab0:	edd6 4a00 	vldr	s9, [r6]
 800cab4:	eee4 7a85 	vfma.f32	s15, s9, s10
 800cab8:	eb00 0484 	add.w	r4, r0, r4, lsl #2
 800cabc:	3204      	adds	r2, #4
 800cabe:	ed94 5a00 	vldr	s10, [r4]
 800cac2:	090c      	lsrs	r4, r1, #4
 800cac4:	eee5 7a25 	vfma.f32	s15, s10, s11
 800cac8:	eb00 0484 	add.w	r4, r0, r4, lsl #2
 800cacc:	f001 010f 	and.w	r1, r1, #15
 800cad0:	edd4 5a00 	vldr	s11, [r4]
 800cad4:	eee5 7a86 	vfma.f32	s15, s11, s12
 800cad8:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800cadc:	42aa      	cmp	r2, r5
 800cade:	ed91 6a00 	vldr	s12, [r1]
 800cae2:	eee6 7a26 	vfma.f32	s15, s12, s13
 800cae6:	f103 0320 	add.w	r3, r3, #32
 800caea:	ee37 7a27 	vadd.f32	s14, s14, s15
 800caee:	d1a8      	bne.n	800ca42 <forward_lite_dense_if32of32wf32_lut4+0x92>
 800caf0:	4656      	mov	r6, sl
 800caf2:	4546      	cmp	r6, r8
 800caf4:	d258      	bcs.n	800cba8 <forward_lite_dense_if32of32wf32_lut4+0x1f8>
 800caf6:	9b03      	ldr	r3, [sp, #12]
 800caf8:	1b9c      	subs	r4, r3, r6
 800cafa:	08e7      	lsrs	r7, r4, #3
 800cafc:	f106 0208 	add.w	r2, r6, #8
 800cb00:	1e69      	subs	r1, r5, #1
 800cb02:	eb05 04d4 	add.w	r4, r5, r4, lsr #3
 800cb06:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800cb0a:	ed52 5a01 	vldr	s11, [r2, #-4]
 800cb0e:	ed52 6a02 	vldr	s13, [r2, #-8]
 800cb12:	f003 0c0f 	and.w	ip, r3, #15
 800cb16:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
 800cb1a:	eddc 7a00 	vldr	s15, [ip]
 800cb1e:	091b      	lsrs	r3, r3, #4
 800cb20:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 800cb24:	ed93 6a00 	vldr	s12, [r3]
 800cb28:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800cb2c:	42a1      	cmp	r1, r4
 800cb2e:	eee6 7a26 	vfma.f32	s15, s12, s13
 800cb32:	f102 0208 	add.w	r2, r2, #8
 800cb36:	ee37 7a27 	vadd.f32	s14, s14, s15
 800cb3a:	d1e4      	bne.n	800cb06 <forward_lite_dense_if32of32wf32_lut4+0x156>
 800cb3c:	3701      	adds	r7, #1
 800cb3e:	19ea      	adds	r2, r5, r7
 800cb40:	eb06 06c7 	add.w	r6, r6, r7, lsl #3
 800cb44:	9b02      	ldr	r3, [sp, #8]
 800cb46:	b30b      	cbz	r3, 800cb8c <forward_lite_dense_if32of32wf32_lut4+0x1dc>
 800cb48:	f812 3b01 	ldrb.w	r3, [r2], #1
 800cb4c:	edd6 7a00 	vldr	s15, [r6]
 800cb50:	091b      	lsrs	r3, r3, #4
 800cb52:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 800cb56:	edd3 6a00 	vldr	s13, [r3]
 800cb5a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800cb5e:	ecae 7a01 	vstmia	lr!, {s14}
 800cb62:	45f1      	cmp	r9, lr
 800cb64:	f63f af64 	bhi.w	800ca30 <forward_lite_dense_if32of32wf32_lut4+0x80>
 800cb68:	9b05      	ldr	r3, [sp, #20]
 800cb6a:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800cb6c:	1899      	adds	r1, r3, r2
 800cb6e:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800cb70:	b9e3      	cbnz	r3, 800cbac <forward_lite_dense_if32of32wf32_lut4+0x1fc>
 800cb72:	9b08      	ldr	r3, [sp, #32]
 800cb74:	428b      	cmp	r3, r1
 800cb76:	d92c      	bls.n	800cbd2 <forward_lite_dense_if32of32wf32_lut4+0x222>
 800cb78:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cb7a:	4498      	add	r8, r3
 800cb7c:	449a      	add	sl, r3
 800cb7e:	449b      	add	fp, r3
 800cb80:	9b05      	ldr	r3, [sp, #20]
 800cb82:	4599      	cmp	r9, r3
 800cb84:	d92a      	bls.n	800cbdc <forward_lite_dense_if32of32wf32_lut4+0x22c>
 800cb86:	9105      	str	r1, [sp, #20]
 800cb88:	460b      	mov	r3, r1
 800cb8a:	e743      	b.n	800ca14 <forward_lite_dense_if32of32wf32_lut4+0x64>
 800cb8c:	ecae 7a01 	vstmia	lr!, {s14}
 800cb90:	45f1      	cmp	r9, lr
 800cb92:	d9e9      	bls.n	800cb68 <forward_lite_dense_if32of32wf32_lut4+0x1b8>
 800cb94:	9b01      	ldr	r3, [sp, #4]
 800cb96:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 800cbfc <forward_lite_dense_if32of32wf32_lut4+0x24c>
 800cb9a:	2b00      	cmp	r3, #0
 800cb9c:	f47f af4e 	bne.w	800ca3c <forward_lite_dense_if32of32wf32_lut4+0x8c>
 800cba0:	9e06      	ldr	r6, [sp, #24]
 800cba2:	4546      	cmp	r6, r8
 800cba4:	4615      	mov	r5, r2
 800cba6:	d3a6      	bcc.n	800caf6 <forward_lite_dense_if32of32wf32_lut4+0x146>
 800cba8:	462a      	mov	r2, r5
 800cbaa:	e7cb      	b.n	800cb44 <forward_lite_dense_if32of32wf32_lut4+0x194>
 800cbac:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800cbae:	2b00      	cmp	r3, #0
 800cbb0:	d0df      	beq.n	800cb72 <forward_lite_dense_if32of32wf32_lut4+0x1c2>
 800cbb2:	9b07      	ldr	r3, [sp, #28]
 800cbb4:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800cbb6:	1acb      	subs	r3, r1, r3
 800cbb8:	edd3 7a00 	vldr	s15, [r3]
 800cbbc:	ecb2 7a01 	vldmia	r2!, {s14}
 800cbc0:	ee77 7a87 	vadd.f32	s15, s15, s14
 800cbc4:	ece3 7a01 	vstmia	r3!, {s15}
 800cbc8:	428b      	cmp	r3, r1
 800cbca:	d1f5      	bne.n	800cbb8 <forward_lite_dense_if32of32wf32_lut4+0x208>
 800cbcc:	9b08      	ldr	r3, [sp, #32]
 800cbce:	428b      	cmp	r3, r1
 800cbd0:	d8d2      	bhi.n	800cb78 <forward_lite_dense_if32of32wf32_lut4+0x1c8>
 800cbd2:	b00d      	add	sp, #52	@ 0x34
 800cbd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cbd8:	4619      	mov	r1, r3
 800cbda:	e7c8      	b.n	800cb6e <forward_lite_dense_if32of32wf32_lut4+0x1be>
 800cbdc:	9b07      	ldr	r3, [sp, #28]
 800cbde:	1acb      	subs	r3, r1, r3
 800cbe0:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 800cbe2:	461a      	mov	r2, r3
 800cbe4:	ed92 7a00 	vldr	s14, [r2]
 800cbe8:	ecf0 7a01 	vldmia	r0!, {s15}
 800cbec:	ee77 7a87 	vadd.f32	s15, s15, s14
 800cbf0:	ece2 7a01 	vstmia	r2!, {s15}
 800cbf4:	428a      	cmp	r2, r1
 800cbf6:	d1f5      	bne.n	800cbe4 <forward_lite_dense_if32of32wf32_lut4+0x234>
 800cbf8:	e7f2      	b.n	800cbe0 <forward_lite_dense_if32of32wf32_lut4+0x230>
 800cbfa:	bf00      	nop
 800cbfc:	00000000 	.word	0x00000000

0800cc00 <forward_lite_dense_if32of32wf32_lut8>:
 800cc00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cc04:	b087      	sub	sp, #28
 800cc06:	460f      	mov	r7, r1
 800cc08:	9204      	str	r2, [sp, #16]
 800cc0a:	e9dd 1213 	ldrd	r1, r2, [sp, #76]	@ 0x4c
 800cc0e:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 800cc10:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 800cc12:	fb01 f202 	mul.w	r2, r1, r2
 800cc16:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800cc1a:	4605      	mov	r5, r0
 800cc1c:	9202      	str	r2, [sp, #8]
 800cc1e:	b136      	cbz	r6, 800cc2e <forward_lite_dense_if32of32wf32_lut8+0x2e>
 800cc20:	4618      	mov	r0, r3
 800cc22:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800cc26:	4631      	mov	r1, r6
 800cc28:	f000 f918 	bl	800ce5c <st_int8_copy>
 800cc2c:	4633      	mov	r3, r6
 800cc2e:	9a02      	ldr	r2, [sp, #8]
 800cc30:	4295      	cmp	r5, r2
 800cc32:	f080 80f9 	bcs.w	800ce28 <forward_lite_dense_if32of32wf32_lut8+0x228>
 800cc36:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800cc38:	0092      	lsls	r2, r2, #2
 800cc3a:	ea4f 09d4 	mov.w	r9, r4, lsr #3
 800cc3e:	9201      	str	r2, [sp, #4]
 800cc40:	9205      	str	r2, [sp, #20]
 800cc42:	462a      	mov	r2, r5
 800cc44:	eb07 1849 	add.w	r8, r7, r9, lsl #5
 800cc48:	ea4f 0ac9 	mov.w	sl, r9, lsl #3
 800cc4c:	464d      	mov	r5, r9
 800cc4e:	4691      	mov	r9, r2
 800cc50:	9a01      	ldr	r2, [sp, #4]
 800cc52:	eb09 0e02 	add.w	lr, r9, r2
 800cc56:	00a1      	lsls	r1, r4, #2
 800cc58:	3720      	adds	r7, #32
 800cc5a:	45ce      	cmp	lr, r9
 800cc5c:	f004 0007 	and.w	r0, r4, #7
 800cc60:	9103      	str	r1, [sp, #12]
 800cc62:	f1a7 0b20 	sub.w	fp, r7, #32
 800cc66:	f240 80c8 	bls.w	800cdfa <forward_lite_dense_if32of32wf32_lut8+0x1fa>
 800cc6a:	9a04      	ldr	r2, [sp, #16]
 800cc6c:	46cc      	mov	ip, r9
 800cc6e:	ed9f 7a7a 	vldr	s14, [pc, #488]	@ 800ce58 <forward_lite_dense_if32of32wf32_lut8+0x258>
 800cc72:	2d00      	cmp	r5, #0
 800cc74:	f000 80dd 	beq.w	800ce32 <forward_lite_dense_if32of32wf32_lut8+0x232>
 800cc78:	eb02 060a 	add.w	r6, r2, sl
 800cc7c:	4639      	mov	r1, r7
 800cc7e:	7854      	ldrb	r4, [r2, #1]
 800cc80:	ed11 3a07 	vldr	s6, [r1, #-28]	@ 0xffffffe4
 800cc84:	ed51 3a08 	vldr	s7, [r1, #-32]	@ 0xffffffe0
 800cc88:	ed11 4a06 	vldr	s8, [r1, #-24]	@ 0xffffffe8
 800cc8c:	ed51 4a05 	vldr	s9, [r1, #-20]	@ 0xffffffec
 800cc90:	ed11 5a04 	vldr	s10, [r1, #-16]
 800cc94:	ed51 5a03 	vldr	s11, [r1, #-12]
 800cc98:	ed11 6a02 	vldr	s12, [r1, #-8]
 800cc9c:	ed51 6a01 	vldr	s13, [r1, #-4]
 800cca0:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800cca4:	edd4 7a00 	vldr	s15, [r4]
 800cca8:	7814      	ldrb	r4, [r2, #0]
 800ccaa:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800ccae:	ee67 7a83 	vmul.f32	s15, s15, s6
 800ccb2:	ed94 3a00 	vldr	s6, [r4]
 800ccb6:	7894      	ldrb	r4, [r2, #2]
 800ccb8:	eee3 7a23 	vfma.f32	s15, s6, s7
 800ccbc:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800ccc0:	3208      	adds	r2, #8
 800ccc2:	edd4 3a00 	vldr	s7, [r4]
 800ccc6:	f812 4c05 	ldrb.w	r4, [r2, #-5]
 800ccca:	eee3 7a84 	vfma.f32	s15, s7, s8
 800ccce:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800ccd2:	3120      	adds	r1, #32
 800ccd4:	ed94 4a00 	vldr	s8, [r4]
 800ccd8:	f812 4c04 	ldrb.w	r4, [r2, #-4]
 800ccdc:	eee4 7a24 	vfma.f32	s15, s8, s9
 800cce0:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800cce4:	edd4 4a00 	vldr	s9, [r4]
 800cce8:	f812 4c03 	ldrb.w	r4, [r2, #-3]
 800ccec:	eee4 7a85 	vfma.f32	s15, s9, s10
 800ccf0:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800ccf4:	ed94 5a00 	vldr	s10, [r4]
 800ccf8:	f812 4c02 	ldrb.w	r4, [r2, #-2]
 800ccfc:	eee5 7a25 	vfma.f32	s15, s10, s11
 800cd00:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800cd04:	edd4 5a00 	vldr	s11, [r4]
 800cd08:	f812 4c01 	ldrb.w	r4, [r2, #-1]
 800cd0c:	eee5 7a86 	vfma.f32	s15, s11, s12
 800cd10:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800cd14:	42b2      	cmp	r2, r6
 800cd16:	ed94 6a00 	vldr	s12, [r4]
 800cd1a:	eee6 7a26 	vfma.f32	s15, s12, s13
 800cd1e:	ee37 7a27 	vadd.f32	s14, s14, s15
 800cd22:	d1ac      	bne.n	800cc7e <forward_lite_dense_if32of32wf32_lut8+0x7e>
 800cd24:	4642      	mov	r2, r8
 800cd26:	2800      	cmp	r0, #0
 800cd28:	f000 8081 	beq.w	800ce2e <forward_lite_dense_if32of32wf32_lut8+0x22e>
 800cd2c:	7831      	ldrb	r1, [r6, #0]
 800cd2e:	edd2 7a00 	vldr	s15, [r2]
 800cd32:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 800cd36:	edd1 6a00 	vldr	s13, [r1]
 800cd3a:	2801      	cmp	r0, #1
 800cd3c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800cd40:	d03f      	beq.n	800cdc2 <forward_lite_dense_if32of32wf32_lut8+0x1c2>
 800cd42:	7871      	ldrb	r1, [r6, #1]
 800cd44:	edd2 7a01 	vldr	s15, [r2, #4]
 800cd48:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 800cd4c:	edd1 6a00 	vldr	s13, [r1]
 800cd50:	2802      	cmp	r0, #2
 800cd52:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800cd56:	d034      	beq.n	800cdc2 <forward_lite_dense_if32of32wf32_lut8+0x1c2>
 800cd58:	78b1      	ldrb	r1, [r6, #2]
 800cd5a:	edd2 7a02 	vldr	s15, [r2, #8]
 800cd5e:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 800cd62:	edd1 6a00 	vldr	s13, [r1]
 800cd66:	2803      	cmp	r0, #3
 800cd68:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800cd6c:	d029      	beq.n	800cdc2 <forward_lite_dense_if32of32wf32_lut8+0x1c2>
 800cd6e:	78f1      	ldrb	r1, [r6, #3]
 800cd70:	edd2 6a03 	vldr	s13, [r2, #12]
 800cd74:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 800cd78:	edd1 7a00 	vldr	s15, [r1]
 800cd7c:	2804      	cmp	r0, #4
 800cd7e:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800cd82:	d01e      	beq.n	800cdc2 <forward_lite_dense_if32of32wf32_lut8+0x1c2>
 800cd84:	7931      	ldrb	r1, [r6, #4]
 800cd86:	edd2 6a04 	vldr	s13, [r2, #16]
 800cd8a:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 800cd8e:	edd1 7a00 	vldr	s15, [r1]
 800cd92:	2805      	cmp	r0, #5
 800cd94:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800cd98:	d013      	beq.n	800cdc2 <forward_lite_dense_if32of32wf32_lut8+0x1c2>
 800cd9a:	7971      	ldrb	r1, [r6, #5]
 800cd9c:	edd2 6a05 	vldr	s13, [r2, #20]
 800cda0:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 800cda4:	edd1 7a00 	vldr	s15, [r1]
 800cda8:	2806      	cmp	r0, #6
 800cdaa:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800cdae:	d008      	beq.n	800cdc2 <forward_lite_dense_if32of32wf32_lut8+0x1c2>
 800cdb0:	edd2 7a06 	vldr	s15, [r2, #24]
 800cdb4:	79b2      	ldrb	r2, [r6, #6]
 800cdb6:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 800cdba:	edd2 6a00 	vldr	s13, [r2]
 800cdbe:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800cdc2:	1832      	adds	r2, r6, r0
 800cdc4:	ecac 7a01 	vstmia	ip!, {s14}
 800cdc8:	45e6      	cmp	lr, ip
 800cdca:	f63f af50 	bhi.w	800cc6e <forward_lite_dense_if32of32wf32_lut8+0x6e>
 800cdce:	9a05      	ldr	r2, [sp, #20]
 800cdd0:	eb09 0402 	add.w	r4, r9, r2
 800cdd4:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800cdd6:	b9a2      	cbnz	r2, 800ce02 <forward_lite_dense_if32of32wf32_lut8+0x202>
 800cdd8:	9a02      	ldr	r2, [sp, #8]
 800cdda:	42a2      	cmp	r2, r4
 800cddc:	d924      	bls.n	800ce28 <forward_lite_dense_if32of32wf32_lut8+0x228>
 800cdde:	9a03      	ldr	r2, [sp, #12]
 800cde0:	45ce      	cmp	lr, r9
 800cde2:	4490      	add	r8, r2
 800cde4:	4417      	add	r7, r2
 800cde6:	d927      	bls.n	800ce38 <forward_lite_dense_if32of32wf32_lut8+0x238>
 800cde8:	9a01      	ldr	r2, [sp, #4]
 800cdea:	46a1      	mov	r9, r4
 800cdec:	eb09 0e02 	add.w	lr, r9, r2
 800cdf0:	45ce      	cmp	lr, r9
 800cdf2:	f1a7 0b20 	sub.w	fp, r7, #32
 800cdf6:	f63f af38 	bhi.w	800cc6a <forward_lite_dense_if32of32wf32_lut8+0x6a>
 800cdfa:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800cdfc:	464c      	mov	r4, r9
 800cdfe:	2a00      	cmp	r2, #0
 800ce00:	d0ea      	beq.n	800cdd8 <forward_lite_dense_if32of32wf32_lut8+0x1d8>
 800ce02:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800ce04:	2a00      	cmp	r2, #0
 800ce06:	d0e7      	beq.n	800cdd8 <forward_lite_dense_if32of32wf32_lut8+0x1d8>
 800ce08:	9a01      	ldr	r2, [sp, #4]
 800ce0a:	9911      	ldr	r1, [sp, #68]	@ 0x44
 800ce0c:	1aa2      	subs	r2, r4, r2
 800ce0e:	edd2 7a00 	vldr	s15, [r2]
 800ce12:	ecb1 7a01 	vldmia	r1!, {s14}
 800ce16:	ee77 7a87 	vadd.f32	s15, s15, s14
 800ce1a:	ece2 7a01 	vstmia	r2!, {s15}
 800ce1e:	4294      	cmp	r4, r2
 800ce20:	d1f5      	bne.n	800ce0e <forward_lite_dense_if32of32wf32_lut8+0x20e>
 800ce22:	9a02      	ldr	r2, [sp, #8]
 800ce24:	42a2      	cmp	r2, r4
 800ce26:	d8da      	bhi.n	800cdde <forward_lite_dense_if32of32wf32_lut8+0x1de>
 800ce28:	b007      	add	sp, #28
 800ce2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ce2e:	4632      	mov	r2, r6
 800ce30:	e7c8      	b.n	800cdc4 <forward_lite_dense_if32of32wf32_lut8+0x1c4>
 800ce32:	4616      	mov	r6, r2
 800ce34:	465a      	mov	r2, fp
 800ce36:	e776      	b.n	800cd26 <forward_lite_dense_if32of32wf32_lut8+0x126>
 800ce38:	9b01      	ldr	r3, [sp, #4]
 800ce3a:	1ae3      	subs	r3, r4, r3
 800ce3c:	9911      	ldr	r1, [sp, #68]	@ 0x44
 800ce3e:	461a      	mov	r2, r3
 800ce40:	ed92 7a00 	vldr	s14, [r2]
 800ce44:	ecf1 7a01 	vldmia	r1!, {s15}
 800ce48:	ee77 7a87 	vadd.f32	s15, s15, s14
 800ce4c:	ece2 7a01 	vstmia	r2!, {s15}
 800ce50:	42a2      	cmp	r2, r4
 800ce52:	d1f5      	bne.n	800ce40 <forward_lite_dense_if32of32wf32_lut8+0x240>
 800ce54:	e7f2      	b.n	800ce3c <forward_lite_dense_if32of32wf32_lut8+0x23c>
 800ce56:	bf00      	nop
 800ce58:	00000000 	.word	0x00000000

0800ce5c <st_int8_copy>:
 800ce5c:	4288      	cmp	r0, r1
 800ce5e:	d056      	beq.n	800cf0e <st_int8_copy+0xb2>
 800ce60:	2a00      	cmp	r2, #0
 800ce62:	d054      	beq.n	800cf0e <st_int8_copy+0xb2>
 800ce64:	4288      	cmp	r0, r1
 800ce66:	d353      	bcc.n	800cf10 <st_int8_copy+0xb4>
 800ce68:	078b      	lsls	r3, r1, #30
 800ce6a:	d102      	bne.n	800ce72 <st_int8_copy+0x16>
 800ce6c:	e009      	b.n	800ce82 <st_int8_copy+0x26>
 800ce6e:	2a00      	cmp	r2, #0
 800ce70:	d05b      	beq.n	800cf2a <st_int8_copy+0xce>
 800ce72:	f910 3b01 	ldrsb.w	r3, [r0], #1
 800ce76:	f801 3b01 	strb.w	r3, [r1], #1
 800ce7a:	078b      	lsls	r3, r1, #30
 800ce7c:	f102 32ff 	add.w	r2, r2, #4294967295
 800ce80:	d1f5      	bne.n	800ce6e <st_int8_copy+0x12>
 800ce82:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ce86:	ea5f 1e12 	movs.w	lr, r2, lsr #4
 800ce8a:	d068      	beq.n	800cf5e <st_int8_copy+0x102>
 800ce8c:	ea40 0301 	orr.w	r3, r0, r1
 800ce90:	075b      	lsls	r3, r3, #29
 800ce92:	d14b      	bne.n	800cf2c <st_int8_copy+0xd0>
 800ce94:	f1be 0f01 	cmp.w	lr, #1
 800ce98:	d048      	beq.n	800cf2c <st_int8_copy+0xd0>
 800ce9a:	f100 0310 	add.w	r3, r0, #16
 800ce9e:	ea4f 140e 	mov.w	r4, lr, lsl #4
 800cea2:	f101 0c10 	add.w	ip, r1, #16
 800cea6:	eb03 1e0e 	add.w	lr, r3, lr, lsl #4
 800ceaa:	ed13 6b04 	vldr	d6, [r3, #-16]
 800ceae:	ed13 7b02 	vldr	d7, [r3, #-8]
 800ceb2:	3310      	adds	r3, #16
 800ceb4:	4573      	cmp	r3, lr
 800ceb6:	ed0c 6b04 	vstr	d6, [ip, #-16]
 800ceba:	ed0c 7b02 	vstr	d7, [ip, #-8]
 800cebe:	f10c 0c10 	add.w	ip, ip, #16
 800cec2:	d1f2      	bne.n	800ceaa <st_int8_copy+0x4e>
 800cec4:	f3c2 0381 	ubfx	r3, r2, #2, #2
 800cec8:	4421      	add	r1, r4
 800ceca:	4420      	add	r0, r4
 800cecc:	f002 0203 	and.w	r2, r2, #3
 800ced0:	b16b      	cbz	r3, 800ceee <st_int8_copy+0x92>
 800ced2:	6804      	ldr	r4, [r0, #0]
 800ced4:	600c      	str	r4, [r1, #0]
 800ced6:	1e5c      	subs	r4, r3, #1
 800ced8:	d005      	beq.n	800cee6 <st_int8_copy+0x8a>
 800ceda:	6845      	ldr	r5, [r0, #4]
 800cedc:	604d      	str	r5, [r1, #4]
 800cede:	2c01      	cmp	r4, #1
 800cee0:	bf1c      	itt	ne
 800cee2:	6884      	ldrne	r4, [r0, #8]
 800cee4:	608c      	strne	r4, [r1, #8]
 800cee6:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 800ceea:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 800ceee:	b162      	cbz	r2, 800cf0a <st_int8_copy+0xae>
 800cef0:	f990 3000 	ldrsb.w	r3, [r0]
 800cef4:	700b      	strb	r3, [r1, #0]
 800cef6:	3a01      	subs	r2, #1
 800cef8:	d007      	beq.n	800cf0a <st_int8_copy+0xae>
 800cefa:	f990 3001 	ldrsb.w	r3, [r0, #1]
 800cefe:	704b      	strb	r3, [r1, #1]
 800cf00:	2a01      	cmp	r2, #1
 800cf02:	bf1c      	itt	ne
 800cf04:	f990 3002 	ldrsbne.w	r3, [r0, #2]
 800cf08:	708b      	strbne	r3, [r1, #2]
 800cf0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cf0e:	4770      	bx	lr
 800cf10:	1883      	adds	r3, r0, r2
 800cf12:	428b      	cmp	r3, r1
 800cf14:	d9a8      	bls.n	800ce68 <st_int8_copy+0xc>
 800cf16:	4283      	cmp	r3, r0
 800cf18:	440a      	add	r2, r1
 800cf1a:	d9f8      	bls.n	800cf0e <st_int8_copy+0xb2>
 800cf1c:	f913 1d01 	ldrsb.w	r1, [r3, #-1]!
 800cf20:	f802 1d01 	strb.w	r1, [r2, #-1]!
 800cf24:	4283      	cmp	r3, r0
 800cf26:	d1f9      	bne.n	800cf1c <st_int8_copy+0xc0>
 800cf28:	4770      	bx	lr
 800cf2a:	4770      	bx	lr
 800cf2c:	ea4f 140e 	mov.w	r4, lr, lsl #4
 800cf30:	460b      	mov	r3, r1
 800cf32:	eb01 1e0e 	add.w	lr, r1, lr, lsl #4
 800cf36:	4684      	mov	ip, r0
 800cf38:	f8dc 7000 	ldr.w	r7, [ip]
 800cf3c:	f8dc 6004 	ldr.w	r6, [ip, #4]
 800cf40:	f8dc 5008 	ldr.w	r5, [ip, #8]
 800cf44:	f8dc 800c 	ldr.w	r8, [ip, #12]
 800cf48:	f8c3 800c 	str.w	r8, [r3, #12]
 800cf4c:	601f      	str	r7, [r3, #0]
 800cf4e:	605e      	str	r6, [r3, #4]
 800cf50:	609d      	str	r5, [r3, #8]
 800cf52:	3310      	adds	r3, #16
 800cf54:	459e      	cmp	lr, r3
 800cf56:	f10c 0c10 	add.w	ip, ip, #16
 800cf5a:	d1ed      	bne.n	800cf38 <st_int8_copy+0xdc>
 800cf5c:	e7b2      	b.n	800cec4 <st_int8_copy+0x68>
 800cf5e:	0893      	lsrs	r3, r2, #2
 800cf60:	f002 0203 	and.w	r2, r2, #3
 800cf64:	e7b4      	b.n	800ced0 <st_int8_copy+0x74>
 800cf66:	bf00      	nop

0800cf68 <ai_array_to_buffer_fmt>:
 800cf68:	f3c0 4343 	ubfx	r3, r0, #17, #4
 800cf6c:	2b02      	cmp	r3, #2
 800cf6e:	d053      	beq.n	800d018 <ai_array_to_buffer_fmt+0xb0>
 800cf70:	4a2c      	ldr	r2, [pc, #176]	@ (800d024 <ai_array_to_buffer_fmt+0xbc>)
 800cf72:	f020 437e 	bic.w	r3, r0, #4261412864	@ 0xfe000000
 800cf76:	4293      	cmp	r3, r2
 800cf78:	d010      	beq.n	800cf9c <ai_array_to_buffer_fmt+0x34>
 800cf7a:	dc21      	bgt.n	800cfc0 <ai_array_to_buffer_fmt+0x58>
 800cf7c:	4a2a      	ldr	r2, [pc, #168]	@ (800d028 <ai_array_to_buffer_fmt+0xc0>)
 800cf7e:	4293      	cmp	r3, r2
 800cf80:	d00c      	beq.n	800cf9c <ai_array_to_buffer_fmt+0x34>
 800cf82:	dd0f      	ble.n	800cfa4 <ai_array_to_buffer_fmt+0x3c>
 800cf84:	4a29      	ldr	r2, [pc, #164]	@ (800d02c <ai_array_to_buffer_fmt+0xc4>)
 800cf86:	4293      	cmp	r3, r2
 800cf88:	d008      	beq.n	800cf9c <ai_array_to_buffer_fmt+0x34>
 800cf8a:	f502 32fa 	add.w	r2, r2, #128000	@ 0x1f400
 800cf8e:	4293      	cmp	r3, r2
 800cf90:	d004      	beq.n	800cf9c <ai_array_to_buffer_fmt+0x34>
 800cf92:	4a27      	ldr	r2, [pc, #156]	@ (800d030 <ai_array_to_buffer_fmt+0xc8>)
 800cf94:	4293      	cmp	r3, r2
 800cf96:	bf0c      	ite	eq
 800cf98:	4613      	moveq	r3, r2
 800cf9a:	2340      	movne	r3, #64	@ 0x40
 800cf9c:	f000 40d0 	and.w	r0, r0, #1744830464	@ 0x68000000
 800cfa0:	4318      	orrs	r0, r3
 800cfa2:	4770      	bx	lr
 800cfa4:	f5a2 6280 	sub.w	r2, r2, #1024	@ 0x400
 800cfa8:	4293      	cmp	r3, r2
 800cfaa:	d0f7      	beq.n	800cf9c <ai_array_to_buffer_fmt+0x34>
 800cfac:	dd2a      	ble.n	800d004 <ai_array_to_buffer_fmt+0x9c>
 800cfae:	4a21      	ldr	r2, [pc, #132]	@ (800d034 <ai_array_to_buffer_fmt+0xcc>)
 800cfb0:	f000 40d0 	and.w	r0, r0, #1744830464	@ 0x68000000
 800cfb4:	4293      	cmp	r3, r2
 800cfb6:	bf0c      	ite	eq
 800cfb8:	4613      	moveq	r3, r2
 800cfba:	2340      	movne	r3, #64	@ 0x40
 800cfbc:	4318      	orrs	r0, r3
 800cfbe:	4770      	bx	lr
 800cfc0:	4a1d      	ldr	r2, [pc, #116]	@ (800d038 <ai_array_to_buffer_fmt+0xd0>)
 800cfc2:	4293      	cmp	r3, r2
 800cfc4:	d0ea      	beq.n	800cf9c <ai_array_to_buffer_fmt+0x34>
 800cfc6:	dd0f      	ble.n	800cfe8 <ai_array_to_buffer_fmt+0x80>
 800cfc8:	4a1c      	ldr	r2, [pc, #112]	@ (800d03c <ai_array_to_buffer_fmt+0xd4>)
 800cfca:	4293      	cmp	r3, r2
 800cfcc:	d0e6      	beq.n	800cf9c <ai_array_to_buffer_fmt+0x34>
 800cfce:	f502 027e 	add.w	r2, r2, #16646144	@ 0xfe0000
 800cfd2:	4293      	cmp	r3, r2
 800cfd4:	d0e2      	beq.n	800cf9c <ai_array_to_buffer_fmt+0x34>
 800cfd6:	4a1a      	ldr	r2, [pc, #104]	@ (800d040 <ai_array_to_buffer_fmt+0xd8>)
 800cfd8:	f000 40d0 	and.w	r0, r0, #1744830464	@ 0x68000000
 800cfdc:	4293      	cmp	r3, r2
 800cfde:	bf0c      	ite	eq
 800cfe0:	4613      	moveq	r3, r2
 800cfe2:	2340      	movne	r3, #64	@ 0x40
 800cfe4:	4318      	orrs	r0, r3
 800cfe6:	4770      	bx	lr
 800cfe8:	f5a2 6280 	sub.w	r2, r2, #1024	@ 0x400
 800cfec:	4293      	cmp	r3, r2
 800cfee:	d0d5      	beq.n	800cf9c <ai_array_to_buffer_fmt+0x34>
 800cff0:	3207      	adds	r2, #7
 800cff2:	4293      	cmp	r3, r2
 800cff4:	d0d2      	beq.n	800cf9c <ai_array_to_buffer_fmt+0x34>
 800cff6:	f2a2 3287 	subw	r2, r2, #903	@ 0x387
 800cffa:	4293      	cmp	r3, r2
 800cffc:	bf0c      	ite	eq
 800cffe:	4613      	moveq	r3, r2
 800d000:	2340      	movne	r3, #64	@ 0x40
 800d002:	e7cb      	b.n	800cf9c <ai_array_to_buffer_fmt+0x34>
 800d004:	f5a2 6280 	sub.w	r2, r2, #1024	@ 0x400
 800d008:	4293      	cmp	r3, r2
 800d00a:	d0c7      	beq.n	800cf9c <ai_array_to_buffer_fmt+0x34>
 800d00c:	3280      	adds	r2, #128	@ 0x80
 800d00e:	4293      	cmp	r3, r2
 800d010:	bf0c      	ite	eq
 800d012:	4613      	moveq	r3, r2
 800d014:	2340      	movne	r3, #64	@ 0x40
 800d016:	e7c1      	b.n	800cf9c <ai_array_to_buffer_fmt+0x34>
 800d018:	4b0a      	ldr	r3, [pc, #40]	@ (800d044 <ai_array_to_buffer_fmt+0xdc>)
 800d01a:	4003      	ands	r3, r0
 800d01c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800d020:	e7bc      	b.n	800cf9c <ai_array_to_buffer_fmt+0x34>
 800d022:	bf00      	nop
 800d024:	00840040 	.word	0x00840040
 800d028:	00040840 	.word	0x00040840
 800d02c:	00041040 	.word	0x00041040
 800d030:	0004084f 	.word	0x0004084f
 800d034:	00040447 	.word	0x00040447
 800d038:	00840840 	.word	0x00840840
 800d03c:	00841040 	.word	0x00841040
 800d040:	0084084f 	.word	0x0084084f
 800d044:	00803fff 	.word	0x00803fff

0800d048 <ai_array_get_data_byte_size>:
 800d048:	b169      	cbz	r1, 800d066 <ai_array_get_data_byte_size+0x1e>
 800d04a:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 800d04e:	fb03 f101 	mul.w	r1, r3, r1
 800d052:	1dcb      	adds	r3, r1, #7
 800d054:	f023 0307 	bic.w	r3, r3, #7
 800d058:	f3c0 5041 	ubfx	r0, r0, #21, #2
 800d05c:	fa23 f000 	lsr.w	r0, r3, r0
 800d060:	3007      	adds	r0, #7
 800d062:	08c0      	lsrs	r0, r0, #3
 800d064:	4770      	bx	lr
 800d066:	4608      	mov	r0, r1
 800d068:	4770      	bx	lr
 800d06a:	bf00      	nop

0800d06c <ai_version_get>:
 800d06c:	0212      	lsls	r2, r2, #8
 800d06e:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800d072:	ea42 6000 	orr.w	r0, r2, r0, lsl #24
 800d076:	4770      	bx	lr

0800d078 <get_tensor_byte_size>:
 800d078:	b410      	push	{r4}
 800d07a:	6983      	ldr	r3, [r0, #24]
 800d07c:	68c4      	ldr	r4, [r0, #12]
 800d07e:	6941      	ldr	r1, [r0, #20]
 800d080:	681b      	ldr	r3, [r3, #0]
 800d082:	68e0      	ldr	r0, [r4, #12]
 800d084:	4a07      	ldr	r2, [pc, #28]	@ (800d0a4 <get_tensor_byte_size+0x2c>)
 800d086:	68c9      	ldr	r1, [r1, #12]
 800d088:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d08c:	f023 437e 	bic.w	r3, r3, #4261412864	@ 0xfe000000
 800d090:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800d094:	fb01 f000 	mul.w	r0, r1, r0
 800d098:	4293      	cmp	r3, r2
 800d09a:	bf04      	itt	eq
 800d09c:	3007      	addeq	r0, #7
 800d09e:	08c0      	lsreq	r0, r0, #3
 800d0a0:	4770      	bx	lr
 800d0a2:	bf00      	nop
 800d0a4:	000400c0 	.word	0x000400c0

0800d0a8 <malloc>:
 800d0a8:	4b02      	ldr	r3, [pc, #8]	@ (800d0b4 <malloc+0xc>)
 800d0aa:	4601      	mov	r1, r0
 800d0ac:	6818      	ldr	r0, [r3, #0]
 800d0ae:	f000 b82d 	b.w	800d10c <_malloc_r>
 800d0b2:	bf00      	nop
 800d0b4:	20000a10 	.word	0x20000a10

0800d0b8 <free>:
 800d0b8:	4b02      	ldr	r3, [pc, #8]	@ (800d0c4 <free+0xc>)
 800d0ba:	4601      	mov	r1, r0
 800d0bc:	6818      	ldr	r0, [r3, #0]
 800d0be:	f000 b951 	b.w	800d364 <_free_r>
 800d0c2:	bf00      	nop
 800d0c4:	20000a10 	.word	0x20000a10

0800d0c8 <sbrk_aligned>:
 800d0c8:	b570      	push	{r4, r5, r6, lr}
 800d0ca:	4e0f      	ldr	r6, [pc, #60]	@ (800d108 <sbrk_aligned+0x40>)
 800d0cc:	460c      	mov	r4, r1
 800d0ce:	6831      	ldr	r1, [r6, #0]
 800d0d0:	4605      	mov	r5, r0
 800d0d2:	b911      	cbnz	r1, 800d0da <sbrk_aligned+0x12>
 800d0d4:	f000 f8fc 	bl	800d2d0 <_sbrk_r>
 800d0d8:	6030      	str	r0, [r6, #0]
 800d0da:	4621      	mov	r1, r4
 800d0dc:	4628      	mov	r0, r5
 800d0de:	f000 f8f7 	bl	800d2d0 <_sbrk_r>
 800d0e2:	1c43      	adds	r3, r0, #1
 800d0e4:	d103      	bne.n	800d0ee <sbrk_aligned+0x26>
 800d0e6:	f04f 34ff 	mov.w	r4, #4294967295
 800d0ea:	4620      	mov	r0, r4
 800d0ec:	bd70      	pop	{r4, r5, r6, pc}
 800d0ee:	1cc4      	adds	r4, r0, #3
 800d0f0:	f024 0403 	bic.w	r4, r4, #3
 800d0f4:	42a0      	cmp	r0, r4
 800d0f6:	d0f8      	beq.n	800d0ea <sbrk_aligned+0x22>
 800d0f8:	1a21      	subs	r1, r4, r0
 800d0fa:	4628      	mov	r0, r5
 800d0fc:	f000 f8e8 	bl	800d2d0 <_sbrk_r>
 800d100:	3001      	adds	r0, #1
 800d102:	d1f2      	bne.n	800d0ea <sbrk_aligned+0x22>
 800d104:	e7ef      	b.n	800d0e6 <sbrk_aligned+0x1e>
 800d106:	bf00      	nop
 800d108:	20008618 	.word	0x20008618

0800d10c <_malloc_r>:
 800d10c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d110:	1ccd      	adds	r5, r1, #3
 800d112:	f025 0503 	bic.w	r5, r5, #3
 800d116:	3508      	adds	r5, #8
 800d118:	2d0c      	cmp	r5, #12
 800d11a:	bf38      	it	cc
 800d11c:	250c      	movcc	r5, #12
 800d11e:	2d00      	cmp	r5, #0
 800d120:	4606      	mov	r6, r0
 800d122:	db01      	blt.n	800d128 <_malloc_r+0x1c>
 800d124:	42a9      	cmp	r1, r5
 800d126:	d904      	bls.n	800d132 <_malloc_r+0x26>
 800d128:	230c      	movs	r3, #12
 800d12a:	6033      	str	r3, [r6, #0]
 800d12c:	2000      	movs	r0, #0
 800d12e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d132:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800d208 <_malloc_r+0xfc>
 800d136:	f000 f869 	bl	800d20c <__malloc_lock>
 800d13a:	f8d8 3000 	ldr.w	r3, [r8]
 800d13e:	461c      	mov	r4, r3
 800d140:	bb44      	cbnz	r4, 800d194 <_malloc_r+0x88>
 800d142:	4629      	mov	r1, r5
 800d144:	4630      	mov	r0, r6
 800d146:	f7ff ffbf 	bl	800d0c8 <sbrk_aligned>
 800d14a:	1c43      	adds	r3, r0, #1
 800d14c:	4604      	mov	r4, r0
 800d14e:	d158      	bne.n	800d202 <_malloc_r+0xf6>
 800d150:	f8d8 4000 	ldr.w	r4, [r8]
 800d154:	4627      	mov	r7, r4
 800d156:	2f00      	cmp	r7, #0
 800d158:	d143      	bne.n	800d1e2 <_malloc_r+0xd6>
 800d15a:	2c00      	cmp	r4, #0
 800d15c:	d04b      	beq.n	800d1f6 <_malloc_r+0xea>
 800d15e:	6823      	ldr	r3, [r4, #0]
 800d160:	4639      	mov	r1, r7
 800d162:	4630      	mov	r0, r6
 800d164:	eb04 0903 	add.w	r9, r4, r3
 800d168:	f000 f8b2 	bl	800d2d0 <_sbrk_r>
 800d16c:	4581      	cmp	r9, r0
 800d16e:	d142      	bne.n	800d1f6 <_malloc_r+0xea>
 800d170:	6821      	ldr	r1, [r4, #0]
 800d172:	1a6d      	subs	r5, r5, r1
 800d174:	4629      	mov	r1, r5
 800d176:	4630      	mov	r0, r6
 800d178:	f7ff ffa6 	bl	800d0c8 <sbrk_aligned>
 800d17c:	3001      	adds	r0, #1
 800d17e:	d03a      	beq.n	800d1f6 <_malloc_r+0xea>
 800d180:	6823      	ldr	r3, [r4, #0]
 800d182:	442b      	add	r3, r5
 800d184:	6023      	str	r3, [r4, #0]
 800d186:	f8d8 3000 	ldr.w	r3, [r8]
 800d18a:	685a      	ldr	r2, [r3, #4]
 800d18c:	bb62      	cbnz	r2, 800d1e8 <_malloc_r+0xdc>
 800d18e:	f8c8 7000 	str.w	r7, [r8]
 800d192:	e00f      	b.n	800d1b4 <_malloc_r+0xa8>
 800d194:	6822      	ldr	r2, [r4, #0]
 800d196:	1b52      	subs	r2, r2, r5
 800d198:	d420      	bmi.n	800d1dc <_malloc_r+0xd0>
 800d19a:	2a0b      	cmp	r2, #11
 800d19c:	d917      	bls.n	800d1ce <_malloc_r+0xc2>
 800d19e:	1961      	adds	r1, r4, r5
 800d1a0:	42a3      	cmp	r3, r4
 800d1a2:	6025      	str	r5, [r4, #0]
 800d1a4:	bf18      	it	ne
 800d1a6:	6059      	strne	r1, [r3, #4]
 800d1a8:	6863      	ldr	r3, [r4, #4]
 800d1aa:	bf08      	it	eq
 800d1ac:	f8c8 1000 	streq.w	r1, [r8]
 800d1b0:	5162      	str	r2, [r4, r5]
 800d1b2:	604b      	str	r3, [r1, #4]
 800d1b4:	4630      	mov	r0, r6
 800d1b6:	f000 f82f 	bl	800d218 <__malloc_unlock>
 800d1ba:	f104 000b 	add.w	r0, r4, #11
 800d1be:	1d23      	adds	r3, r4, #4
 800d1c0:	f020 0007 	bic.w	r0, r0, #7
 800d1c4:	1ac2      	subs	r2, r0, r3
 800d1c6:	bf1c      	itt	ne
 800d1c8:	1a1b      	subne	r3, r3, r0
 800d1ca:	50a3      	strne	r3, [r4, r2]
 800d1cc:	e7af      	b.n	800d12e <_malloc_r+0x22>
 800d1ce:	6862      	ldr	r2, [r4, #4]
 800d1d0:	42a3      	cmp	r3, r4
 800d1d2:	bf0c      	ite	eq
 800d1d4:	f8c8 2000 	streq.w	r2, [r8]
 800d1d8:	605a      	strne	r2, [r3, #4]
 800d1da:	e7eb      	b.n	800d1b4 <_malloc_r+0xa8>
 800d1dc:	4623      	mov	r3, r4
 800d1de:	6864      	ldr	r4, [r4, #4]
 800d1e0:	e7ae      	b.n	800d140 <_malloc_r+0x34>
 800d1e2:	463c      	mov	r4, r7
 800d1e4:	687f      	ldr	r7, [r7, #4]
 800d1e6:	e7b6      	b.n	800d156 <_malloc_r+0x4a>
 800d1e8:	461a      	mov	r2, r3
 800d1ea:	685b      	ldr	r3, [r3, #4]
 800d1ec:	42a3      	cmp	r3, r4
 800d1ee:	d1fb      	bne.n	800d1e8 <_malloc_r+0xdc>
 800d1f0:	2300      	movs	r3, #0
 800d1f2:	6053      	str	r3, [r2, #4]
 800d1f4:	e7de      	b.n	800d1b4 <_malloc_r+0xa8>
 800d1f6:	230c      	movs	r3, #12
 800d1f8:	6033      	str	r3, [r6, #0]
 800d1fa:	4630      	mov	r0, r6
 800d1fc:	f000 f80c 	bl	800d218 <__malloc_unlock>
 800d200:	e794      	b.n	800d12c <_malloc_r+0x20>
 800d202:	6005      	str	r5, [r0, #0]
 800d204:	e7d6      	b.n	800d1b4 <_malloc_r+0xa8>
 800d206:	bf00      	nop
 800d208:	2000861c 	.word	0x2000861c

0800d20c <__malloc_lock>:
 800d20c:	4801      	ldr	r0, [pc, #4]	@ (800d214 <__malloc_lock+0x8>)
 800d20e:	f000 b899 	b.w	800d344 <__retarget_lock_acquire_recursive>
 800d212:	bf00      	nop
 800d214:	2000875c 	.word	0x2000875c

0800d218 <__malloc_unlock>:
 800d218:	4801      	ldr	r0, [pc, #4]	@ (800d220 <__malloc_unlock+0x8>)
 800d21a:	f000 b894 	b.w	800d346 <__retarget_lock_release_recursive>
 800d21e:	bf00      	nop
 800d220:	2000875c 	.word	0x2000875c

0800d224 <_realloc_r>:
 800d224:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d228:	4680      	mov	r8, r0
 800d22a:	4615      	mov	r5, r2
 800d22c:	460c      	mov	r4, r1
 800d22e:	b921      	cbnz	r1, 800d23a <_realloc_r+0x16>
 800d230:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d234:	4611      	mov	r1, r2
 800d236:	f7ff bf69 	b.w	800d10c <_malloc_r>
 800d23a:	b92a      	cbnz	r2, 800d248 <_realloc_r+0x24>
 800d23c:	f000 f892 	bl	800d364 <_free_r>
 800d240:	2400      	movs	r4, #0
 800d242:	4620      	mov	r0, r4
 800d244:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d248:	f000 f8d6 	bl	800d3f8 <_malloc_usable_size_r>
 800d24c:	4285      	cmp	r5, r0
 800d24e:	4606      	mov	r6, r0
 800d250:	d802      	bhi.n	800d258 <_realloc_r+0x34>
 800d252:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800d256:	d8f4      	bhi.n	800d242 <_realloc_r+0x1e>
 800d258:	4629      	mov	r1, r5
 800d25a:	4640      	mov	r0, r8
 800d25c:	f7ff ff56 	bl	800d10c <_malloc_r>
 800d260:	4607      	mov	r7, r0
 800d262:	2800      	cmp	r0, #0
 800d264:	d0ec      	beq.n	800d240 <_realloc_r+0x1c>
 800d266:	42b5      	cmp	r5, r6
 800d268:	462a      	mov	r2, r5
 800d26a:	4621      	mov	r1, r4
 800d26c:	bf28      	it	cs
 800d26e:	4632      	movcs	r2, r6
 800d270:	f000 f86a 	bl	800d348 <memcpy>
 800d274:	4621      	mov	r1, r4
 800d276:	4640      	mov	r0, r8
 800d278:	f000 f874 	bl	800d364 <_free_r>
 800d27c:	463c      	mov	r4, r7
 800d27e:	e7e0      	b.n	800d242 <_realloc_r+0x1e>

0800d280 <siprintf>:
 800d280:	b40e      	push	{r1, r2, r3}
 800d282:	b500      	push	{lr}
 800d284:	b09c      	sub	sp, #112	@ 0x70
 800d286:	ab1d      	add	r3, sp, #116	@ 0x74
 800d288:	9002      	str	r0, [sp, #8]
 800d28a:	9006      	str	r0, [sp, #24]
 800d28c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800d290:	4809      	ldr	r0, [pc, #36]	@ (800d2b8 <siprintf+0x38>)
 800d292:	9107      	str	r1, [sp, #28]
 800d294:	9104      	str	r1, [sp, #16]
 800d296:	4909      	ldr	r1, [pc, #36]	@ (800d2bc <siprintf+0x3c>)
 800d298:	f853 2b04 	ldr.w	r2, [r3], #4
 800d29c:	9105      	str	r1, [sp, #20]
 800d29e:	6800      	ldr	r0, [r0, #0]
 800d2a0:	9301      	str	r3, [sp, #4]
 800d2a2:	a902      	add	r1, sp, #8
 800d2a4:	f000 f90c 	bl	800d4c0 <_svfiprintf_r>
 800d2a8:	9b02      	ldr	r3, [sp, #8]
 800d2aa:	2200      	movs	r2, #0
 800d2ac:	701a      	strb	r2, [r3, #0]
 800d2ae:	b01c      	add	sp, #112	@ 0x70
 800d2b0:	f85d eb04 	ldr.w	lr, [sp], #4
 800d2b4:	b003      	add	sp, #12
 800d2b6:	4770      	bx	lr
 800d2b8:	20000a10 	.word	0x20000a10
 800d2bc:	ffff0208 	.word	0xffff0208

0800d2c0 <memset>:
 800d2c0:	4402      	add	r2, r0
 800d2c2:	4603      	mov	r3, r0
 800d2c4:	4293      	cmp	r3, r2
 800d2c6:	d100      	bne.n	800d2ca <memset+0xa>
 800d2c8:	4770      	bx	lr
 800d2ca:	f803 1b01 	strb.w	r1, [r3], #1
 800d2ce:	e7f9      	b.n	800d2c4 <memset+0x4>

0800d2d0 <_sbrk_r>:
 800d2d0:	b538      	push	{r3, r4, r5, lr}
 800d2d2:	4d06      	ldr	r5, [pc, #24]	@ (800d2ec <_sbrk_r+0x1c>)
 800d2d4:	2300      	movs	r3, #0
 800d2d6:	4604      	mov	r4, r0
 800d2d8:	4608      	mov	r0, r1
 800d2da:	602b      	str	r3, [r5, #0]
 800d2dc:	f7f4 fcc4 	bl	8001c68 <_sbrk>
 800d2e0:	1c43      	adds	r3, r0, #1
 800d2e2:	d102      	bne.n	800d2ea <_sbrk_r+0x1a>
 800d2e4:	682b      	ldr	r3, [r5, #0]
 800d2e6:	b103      	cbz	r3, 800d2ea <_sbrk_r+0x1a>
 800d2e8:	6023      	str	r3, [r4, #0]
 800d2ea:	bd38      	pop	{r3, r4, r5, pc}
 800d2ec:	20008758 	.word	0x20008758

0800d2f0 <__errno>:
 800d2f0:	4b01      	ldr	r3, [pc, #4]	@ (800d2f8 <__errno+0x8>)
 800d2f2:	6818      	ldr	r0, [r3, #0]
 800d2f4:	4770      	bx	lr
 800d2f6:	bf00      	nop
 800d2f8:	20000a10 	.word	0x20000a10

0800d2fc <__libc_init_array>:
 800d2fc:	b570      	push	{r4, r5, r6, lr}
 800d2fe:	4d0d      	ldr	r5, [pc, #52]	@ (800d334 <__libc_init_array+0x38>)
 800d300:	4c0d      	ldr	r4, [pc, #52]	@ (800d338 <__libc_init_array+0x3c>)
 800d302:	1b64      	subs	r4, r4, r5
 800d304:	10a4      	asrs	r4, r4, #2
 800d306:	2600      	movs	r6, #0
 800d308:	42a6      	cmp	r6, r4
 800d30a:	d109      	bne.n	800d320 <__libc_init_array+0x24>
 800d30c:	4d0b      	ldr	r5, [pc, #44]	@ (800d33c <__libc_init_array+0x40>)
 800d30e:	4c0c      	ldr	r4, [pc, #48]	@ (800d340 <__libc_init_array+0x44>)
 800d310:	f000 fb7a 	bl	800da08 <_init>
 800d314:	1b64      	subs	r4, r4, r5
 800d316:	10a4      	asrs	r4, r4, #2
 800d318:	2600      	movs	r6, #0
 800d31a:	42a6      	cmp	r6, r4
 800d31c:	d105      	bne.n	800d32a <__libc_init_array+0x2e>
 800d31e:	bd70      	pop	{r4, r5, r6, pc}
 800d320:	f855 3b04 	ldr.w	r3, [r5], #4
 800d324:	4798      	blx	r3
 800d326:	3601      	adds	r6, #1
 800d328:	e7ee      	b.n	800d308 <__libc_init_array+0xc>
 800d32a:	f855 3b04 	ldr.w	r3, [r5], #4
 800d32e:	4798      	blx	r3
 800d330:	3601      	adds	r6, #1
 800d332:	e7f2      	b.n	800d31a <__libc_init_array+0x1e>
 800d334:	0810ccec 	.word	0x0810ccec
 800d338:	0810ccec 	.word	0x0810ccec
 800d33c:	0810ccec 	.word	0x0810ccec
 800d340:	0810ccf0 	.word	0x0810ccf0

0800d344 <__retarget_lock_acquire_recursive>:
 800d344:	4770      	bx	lr

0800d346 <__retarget_lock_release_recursive>:
 800d346:	4770      	bx	lr

0800d348 <memcpy>:
 800d348:	440a      	add	r2, r1
 800d34a:	4291      	cmp	r1, r2
 800d34c:	f100 33ff 	add.w	r3, r0, #4294967295
 800d350:	d100      	bne.n	800d354 <memcpy+0xc>
 800d352:	4770      	bx	lr
 800d354:	b510      	push	{r4, lr}
 800d356:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d35a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d35e:	4291      	cmp	r1, r2
 800d360:	d1f9      	bne.n	800d356 <memcpy+0xe>
 800d362:	bd10      	pop	{r4, pc}

0800d364 <_free_r>:
 800d364:	b538      	push	{r3, r4, r5, lr}
 800d366:	4605      	mov	r5, r0
 800d368:	2900      	cmp	r1, #0
 800d36a:	d041      	beq.n	800d3f0 <_free_r+0x8c>
 800d36c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d370:	1f0c      	subs	r4, r1, #4
 800d372:	2b00      	cmp	r3, #0
 800d374:	bfb8      	it	lt
 800d376:	18e4      	addlt	r4, r4, r3
 800d378:	f7ff ff48 	bl	800d20c <__malloc_lock>
 800d37c:	4a1d      	ldr	r2, [pc, #116]	@ (800d3f4 <_free_r+0x90>)
 800d37e:	6813      	ldr	r3, [r2, #0]
 800d380:	b933      	cbnz	r3, 800d390 <_free_r+0x2c>
 800d382:	6063      	str	r3, [r4, #4]
 800d384:	6014      	str	r4, [r2, #0]
 800d386:	4628      	mov	r0, r5
 800d388:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d38c:	f7ff bf44 	b.w	800d218 <__malloc_unlock>
 800d390:	42a3      	cmp	r3, r4
 800d392:	d908      	bls.n	800d3a6 <_free_r+0x42>
 800d394:	6820      	ldr	r0, [r4, #0]
 800d396:	1821      	adds	r1, r4, r0
 800d398:	428b      	cmp	r3, r1
 800d39a:	bf01      	itttt	eq
 800d39c:	6819      	ldreq	r1, [r3, #0]
 800d39e:	685b      	ldreq	r3, [r3, #4]
 800d3a0:	1809      	addeq	r1, r1, r0
 800d3a2:	6021      	streq	r1, [r4, #0]
 800d3a4:	e7ed      	b.n	800d382 <_free_r+0x1e>
 800d3a6:	461a      	mov	r2, r3
 800d3a8:	685b      	ldr	r3, [r3, #4]
 800d3aa:	b10b      	cbz	r3, 800d3b0 <_free_r+0x4c>
 800d3ac:	42a3      	cmp	r3, r4
 800d3ae:	d9fa      	bls.n	800d3a6 <_free_r+0x42>
 800d3b0:	6811      	ldr	r1, [r2, #0]
 800d3b2:	1850      	adds	r0, r2, r1
 800d3b4:	42a0      	cmp	r0, r4
 800d3b6:	d10b      	bne.n	800d3d0 <_free_r+0x6c>
 800d3b8:	6820      	ldr	r0, [r4, #0]
 800d3ba:	4401      	add	r1, r0
 800d3bc:	1850      	adds	r0, r2, r1
 800d3be:	4283      	cmp	r3, r0
 800d3c0:	6011      	str	r1, [r2, #0]
 800d3c2:	d1e0      	bne.n	800d386 <_free_r+0x22>
 800d3c4:	6818      	ldr	r0, [r3, #0]
 800d3c6:	685b      	ldr	r3, [r3, #4]
 800d3c8:	6053      	str	r3, [r2, #4]
 800d3ca:	4408      	add	r0, r1
 800d3cc:	6010      	str	r0, [r2, #0]
 800d3ce:	e7da      	b.n	800d386 <_free_r+0x22>
 800d3d0:	d902      	bls.n	800d3d8 <_free_r+0x74>
 800d3d2:	230c      	movs	r3, #12
 800d3d4:	602b      	str	r3, [r5, #0]
 800d3d6:	e7d6      	b.n	800d386 <_free_r+0x22>
 800d3d8:	6820      	ldr	r0, [r4, #0]
 800d3da:	1821      	adds	r1, r4, r0
 800d3dc:	428b      	cmp	r3, r1
 800d3de:	bf04      	itt	eq
 800d3e0:	6819      	ldreq	r1, [r3, #0]
 800d3e2:	685b      	ldreq	r3, [r3, #4]
 800d3e4:	6063      	str	r3, [r4, #4]
 800d3e6:	bf04      	itt	eq
 800d3e8:	1809      	addeq	r1, r1, r0
 800d3ea:	6021      	streq	r1, [r4, #0]
 800d3ec:	6054      	str	r4, [r2, #4]
 800d3ee:	e7ca      	b.n	800d386 <_free_r+0x22>
 800d3f0:	bd38      	pop	{r3, r4, r5, pc}
 800d3f2:	bf00      	nop
 800d3f4:	2000861c 	.word	0x2000861c

0800d3f8 <_malloc_usable_size_r>:
 800d3f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d3fc:	1f18      	subs	r0, r3, #4
 800d3fe:	2b00      	cmp	r3, #0
 800d400:	bfbc      	itt	lt
 800d402:	580b      	ldrlt	r3, [r1, r0]
 800d404:	18c0      	addlt	r0, r0, r3
 800d406:	4770      	bx	lr

0800d408 <__ssputs_r>:
 800d408:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d40c:	688e      	ldr	r6, [r1, #8]
 800d40e:	461f      	mov	r7, r3
 800d410:	42be      	cmp	r6, r7
 800d412:	680b      	ldr	r3, [r1, #0]
 800d414:	4682      	mov	sl, r0
 800d416:	460c      	mov	r4, r1
 800d418:	4690      	mov	r8, r2
 800d41a:	d82d      	bhi.n	800d478 <__ssputs_r+0x70>
 800d41c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d420:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800d424:	d026      	beq.n	800d474 <__ssputs_r+0x6c>
 800d426:	6965      	ldr	r5, [r4, #20]
 800d428:	6909      	ldr	r1, [r1, #16]
 800d42a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d42e:	eba3 0901 	sub.w	r9, r3, r1
 800d432:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d436:	1c7b      	adds	r3, r7, #1
 800d438:	444b      	add	r3, r9
 800d43a:	106d      	asrs	r5, r5, #1
 800d43c:	429d      	cmp	r5, r3
 800d43e:	bf38      	it	cc
 800d440:	461d      	movcc	r5, r3
 800d442:	0553      	lsls	r3, r2, #21
 800d444:	d527      	bpl.n	800d496 <__ssputs_r+0x8e>
 800d446:	4629      	mov	r1, r5
 800d448:	f7ff fe60 	bl	800d10c <_malloc_r>
 800d44c:	4606      	mov	r6, r0
 800d44e:	b360      	cbz	r0, 800d4aa <__ssputs_r+0xa2>
 800d450:	6921      	ldr	r1, [r4, #16]
 800d452:	464a      	mov	r2, r9
 800d454:	f7ff ff78 	bl	800d348 <memcpy>
 800d458:	89a3      	ldrh	r3, [r4, #12]
 800d45a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800d45e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d462:	81a3      	strh	r3, [r4, #12]
 800d464:	6126      	str	r6, [r4, #16]
 800d466:	6165      	str	r5, [r4, #20]
 800d468:	444e      	add	r6, r9
 800d46a:	eba5 0509 	sub.w	r5, r5, r9
 800d46e:	6026      	str	r6, [r4, #0]
 800d470:	60a5      	str	r5, [r4, #8]
 800d472:	463e      	mov	r6, r7
 800d474:	42be      	cmp	r6, r7
 800d476:	d900      	bls.n	800d47a <__ssputs_r+0x72>
 800d478:	463e      	mov	r6, r7
 800d47a:	6820      	ldr	r0, [r4, #0]
 800d47c:	4632      	mov	r2, r6
 800d47e:	4641      	mov	r1, r8
 800d480:	f000 faa8 	bl	800d9d4 <memmove>
 800d484:	68a3      	ldr	r3, [r4, #8]
 800d486:	1b9b      	subs	r3, r3, r6
 800d488:	60a3      	str	r3, [r4, #8]
 800d48a:	6823      	ldr	r3, [r4, #0]
 800d48c:	4433      	add	r3, r6
 800d48e:	6023      	str	r3, [r4, #0]
 800d490:	2000      	movs	r0, #0
 800d492:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d496:	462a      	mov	r2, r5
 800d498:	f7ff fec4 	bl	800d224 <_realloc_r>
 800d49c:	4606      	mov	r6, r0
 800d49e:	2800      	cmp	r0, #0
 800d4a0:	d1e0      	bne.n	800d464 <__ssputs_r+0x5c>
 800d4a2:	6921      	ldr	r1, [r4, #16]
 800d4a4:	4650      	mov	r0, sl
 800d4a6:	f7ff ff5d 	bl	800d364 <_free_r>
 800d4aa:	230c      	movs	r3, #12
 800d4ac:	f8ca 3000 	str.w	r3, [sl]
 800d4b0:	89a3      	ldrh	r3, [r4, #12]
 800d4b2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d4b6:	81a3      	strh	r3, [r4, #12]
 800d4b8:	f04f 30ff 	mov.w	r0, #4294967295
 800d4bc:	e7e9      	b.n	800d492 <__ssputs_r+0x8a>
	...

0800d4c0 <_svfiprintf_r>:
 800d4c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d4c4:	4698      	mov	r8, r3
 800d4c6:	898b      	ldrh	r3, [r1, #12]
 800d4c8:	061b      	lsls	r3, r3, #24
 800d4ca:	b09d      	sub	sp, #116	@ 0x74
 800d4cc:	4607      	mov	r7, r0
 800d4ce:	460d      	mov	r5, r1
 800d4d0:	4614      	mov	r4, r2
 800d4d2:	d510      	bpl.n	800d4f6 <_svfiprintf_r+0x36>
 800d4d4:	690b      	ldr	r3, [r1, #16]
 800d4d6:	b973      	cbnz	r3, 800d4f6 <_svfiprintf_r+0x36>
 800d4d8:	2140      	movs	r1, #64	@ 0x40
 800d4da:	f7ff fe17 	bl	800d10c <_malloc_r>
 800d4de:	6028      	str	r0, [r5, #0]
 800d4e0:	6128      	str	r0, [r5, #16]
 800d4e2:	b930      	cbnz	r0, 800d4f2 <_svfiprintf_r+0x32>
 800d4e4:	230c      	movs	r3, #12
 800d4e6:	603b      	str	r3, [r7, #0]
 800d4e8:	f04f 30ff 	mov.w	r0, #4294967295
 800d4ec:	b01d      	add	sp, #116	@ 0x74
 800d4ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d4f2:	2340      	movs	r3, #64	@ 0x40
 800d4f4:	616b      	str	r3, [r5, #20]
 800d4f6:	2300      	movs	r3, #0
 800d4f8:	9309      	str	r3, [sp, #36]	@ 0x24
 800d4fa:	2320      	movs	r3, #32
 800d4fc:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800d500:	f8cd 800c 	str.w	r8, [sp, #12]
 800d504:	2330      	movs	r3, #48	@ 0x30
 800d506:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800d6a4 <_svfiprintf_r+0x1e4>
 800d50a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800d50e:	f04f 0901 	mov.w	r9, #1
 800d512:	4623      	mov	r3, r4
 800d514:	469a      	mov	sl, r3
 800d516:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d51a:	b10a      	cbz	r2, 800d520 <_svfiprintf_r+0x60>
 800d51c:	2a25      	cmp	r2, #37	@ 0x25
 800d51e:	d1f9      	bne.n	800d514 <_svfiprintf_r+0x54>
 800d520:	ebba 0b04 	subs.w	fp, sl, r4
 800d524:	d00b      	beq.n	800d53e <_svfiprintf_r+0x7e>
 800d526:	465b      	mov	r3, fp
 800d528:	4622      	mov	r2, r4
 800d52a:	4629      	mov	r1, r5
 800d52c:	4638      	mov	r0, r7
 800d52e:	f7ff ff6b 	bl	800d408 <__ssputs_r>
 800d532:	3001      	adds	r0, #1
 800d534:	f000 80a7 	beq.w	800d686 <_svfiprintf_r+0x1c6>
 800d538:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d53a:	445a      	add	r2, fp
 800d53c:	9209      	str	r2, [sp, #36]	@ 0x24
 800d53e:	f89a 3000 	ldrb.w	r3, [sl]
 800d542:	2b00      	cmp	r3, #0
 800d544:	f000 809f 	beq.w	800d686 <_svfiprintf_r+0x1c6>
 800d548:	2300      	movs	r3, #0
 800d54a:	f04f 32ff 	mov.w	r2, #4294967295
 800d54e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d552:	f10a 0a01 	add.w	sl, sl, #1
 800d556:	9304      	str	r3, [sp, #16]
 800d558:	9307      	str	r3, [sp, #28]
 800d55a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800d55e:	931a      	str	r3, [sp, #104]	@ 0x68
 800d560:	4654      	mov	r4, sl
 800d562:	2205      	movs	r2, #5
 800d564:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d568:	484e      	ldr	r0, [pc, #312]	@ (800d6a4 <_svfiprintf_r+0x1e4>)
 800d56a:	f7f2 fe51 	bl	8000210 <memchr>
 800d56e:	9a04      	ldr	r2, [sp, #16]
 800d570:	b9d8      	cbnz	r0, 800d5aa <_svfiprintf_r+0xea>
 800d572:	06d0      	lsls	r0, r2, #27
 800d574:	bf44      	itt	mi
 800d576:	2320      	movmi	r3, #32
 800d578:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d57c:	0711      	lsls	r1, r2, #28
 800d57e:	bf44      	itt	mi
 800d580:	232b      	movmi	r3, #43	@ 0x2b
 800d582:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d586:	f89a 3000 	ldrb.w	r3, [sl]
 800d58a:	2b2a      	cmp	r3, #42	@ 0x2a
 800d58c:	d015      	beq.n	800d5ba <_svfiprintf_r+0xfa>
 800d58e:	9a07      	ldr	r2, [sp, #28]
 800d590:	4654      	mov	r4, sl
 800d592:	2000      	movs	r0, #0
 800d594:	f04f 0c0a 	mov.w	ip, #10
 800d598:	4621      	mov	r1, r4
 800d59a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d59e:	3b30      	subs	r3, #48	@ 0x30
 800d5a0:	2b09      	cmp	r3, #9
 800d5a2:	d94b      	bls.n	800d63c <_svfiprintf_r+0x17c>
 800d5a4:	b1b0      	cbz	r0, 800d5d4 <_svfiprintf_r+0x114>
 800d5a6:	9207      	str	r2, [sp, #28]
 800d5a8:	e014      	b.n	800d5d4 <_svfiprintf_r+0x114>
 800d5aa:	eba0 0308 	sub.w	r3, r0, r8
 800d5ae:	fa09 f303 	lsl.w	r3, r9, r3
 800d5b2:	4313      	orrs	r3, r2
 800d5b4:	9304      	str	r3, [sp, #16]
 800d5b6:	46a2      	mov	sl, r4
 800d5b8:	e7d2      	b.n	800d560 <_svfiprintf_r+0xa0>
 800d5ba:	9b03      	ldr	r3, [sp, #12]
 800d5bc:	1d19      	adds	r1, r3, #4
 800d5be:	681b      	ldr	r3, [r3, #0]
 800d5c0:	9103      	str	r1, [sp, #12]
 800d5c2:	2b00      	cmp	r3, #0
 800d5c4:	bfbb      	ittet	lt
 800d5c6:	425b      	neglt	r3, r3
 800d5c8:	f042 0202 	orrlt.w	r2, r2, #2
 800d5cc:	9307      	strge	r3, [sp, #28]
 800d5ce:	9307      	strlt	r3, [sp, #28]
 800d5d0:	bfb8      	it	lt
 800d5d2:	9204      	strlt	r2, [sp, #16]
 800d5d4:	7823      	ldrb	r3, [r4, #0]
 800d5d6:	2b2e      	cmp	r3, #46	@ 0x2e
 800d5d8:	d10a      	bne.n	800d5f0 <_svfiprintf_r+0x130>
 800d5da:	7863      	ldrb	r3, [r4, #1]
 800d5dc:	2b2a      	cmp	r3, #42	@ 0x2a
 800d5de:	d132      	bne.n	800d646 <_svfiprintf_r+0x186>
 800d5e0:	9b03      	ldr	r3, [sp, #12]
 800d5e2:	1d1a      	adds	r2, r3, #4
 800d5e4:	681b      	ldr	r3, [r3, #0]
 800d5e6:	9203      	str	r2, [sp, #12]
 800d5e8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d5ec:	3402      	adds	r4, #2
 800d5ee:	9305      	str	r3, [sp, #20]
 800d5f0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800d6b4 <_svfiprintf_r+0x1f4>
 800d5f4:	7821      	ldrb	r1, [r4, #0]
 800d5f6:	2203      	movs	r2, #3
 800d5f8:	4650      	mov	r0, sl
 800d5fa:	f7f2 fe09 	bl	8000210 <memchr>
 800d5fe:	b138      	cbz	r0, 800d610 <_svfiprintf_r+0x150>
 800d600:	9b04      	ldr	r3, [sp, #16]
 800d602:	eba0 000a 	sub.w	r0, r0, sl
 800d606:	2240      	movs	r2, #64	@ 0x40
 800d608:	4082      	lsls	r2, r0
 800d60a:	4313      	orrs	r3, r2
 800d60c:	3401      	adds	r4, #1
 800d60e:	9304      	str	r3, [sp, #16]
 800d610:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d614:	4824      	ldr	r0, [pc, #144]	@ (800d6a8 <_svfiprintf_r+0x1e8>)
 800d616:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800d61a:	2206      	movs	r2, #6
 800d61c:	f7f2 fdf8 	bl	8000210 <memchr>
 800d620:	2800      	cmp	r0, #0
 800d622:	d036      	beq.n	800d692 <_svfiprintf_r+0x1d2>
 800d624:	4b21      	ldr	r3, [pc, #132]	@ (800d6ac <_svfiprintf_r+0x1ec>)
 800d626:	bb1b      	cbnz	r3, 800d670 <_svfiprintf_r+0x1b0>
 800d628:	9b03      	ldr	r3, [sp, #12]
 800d62a:	3307      	adds	r3, #7
 800d62c:	f023 0307 	bic.w	r3, r3, #7
 800d630:	3308      	adds	r3, #8
 800d632:	9303      	str	r3, [sp, #12]
 800d634:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d636:	4433      	add	r3, r6
 800d638:	9309      	str	r3, [sp, #36]	@ 0x24
 800d63a:	e76a      	b.n	800d512 <_svfiprintf_r+0x52>
 800d63c:	fb0c 3202 	mla	r2, ip, r2, r3
 800d640:	460c      	mov	r4, r1
 800d642:	2001      	movs	r0, #1
 800d644:	e7a8      	b.n	800d598 <_svfiprintf_r+0xd8>
 800d646:	2300      	movs	r3, #0
 800d648:	3401      	adds	r4, #1
 800d64a:	9305      	str	r3, [sp, #20]
 800d64c:	4619      	mov	r1, r3
 800d64e:	f04f 0c0a 	mov.w	ip, #10
 800d652:	4620      	mov	r0, r4
 800d654:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d658:	3a30      	subs	r2, #48	@ 0x30
 800d65a:	2a09      	cmp	r2, #9
 800d65c:	d903      	bls.n	800d666 <_svfiprintf_r+0x1a6>
 800d65e:	2b00      	cmp	r3, #0
 800d660:	d0c6      	beq.n	800d5f0 <_svfiprintf_r+0x130>
 800d662:	9105      	str	r1, [sp, #20]
 800d664:	e7c4      	b.n	800d5f0 <_svfiprintf_r+0x130>
 800d666:	fb0c 2101 	mla	r1, ip, r1, r2
 800d66a:	4604      	mov	r4, r0
 800d66c:	2301      	movs	r3, #1
 800d66e:	e7f0      	b.n	800d652 <_svfiprintf_r+0x192>
 800d670:	ab03      	add	r3, sp, #12
 800d672:	9300      	str	r3, [sp, #0]
 800d674:	462a      	mov	r2, r5
 800d676:	4b0e      	ldr	r3, [pc, #56]	@ (800d6b0 <_svfiprintf_r+0x1f0>)
 800d678:	a904      	add	r1, sp, #16
 800d67a:	4638      	mov	r0, r7
 800d67c:	f3af 8000 	nop.w
 800d680:	1c42      	adds	r2, r0, #1
 800d682:	4606      	mov	r6, r0
 800d684:	d1d6      	bne.n	800d634 <_svfiprintf_r+0x174>
 800d686:	89ab      	ldrh	r3, [r5, #12]
 800d688:	065b      	lsls	r3, r3, #25
 800d68a:	f53f af2d 	bmi.w	800d4e8 <_svfiprintf_r+0x28>
 800d68e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d690:	e72c      	b.n	800d4ec <_svfiprintf_r+0x2c>
 800d692:	ab03      	add	r3, sp, #12
 800d694:	9300      	str	r3, [sp, #0]
 800d696:	462a      	mov	r2, r5
 800d698:	4b05      	ldr	r3, [pc, #20]	@ (800d6b0 <_svfiprintf_r+0x1f0>)
 800d69a:	a904      	add	r1, sp, #16
 800d69c:	4638      	mov	r0, r7
 800d69e:	f000 f879 	bl	800d794 <_printf_i>
 800d6a2:	e7ed      	b.n	800d680 <_svfiprintf_r+0x1c0>
 800d6a4:	0810ccb0 	.word	0x0810ccb0
 800d6a8:	0810ccba 	.word	0x0810ccba
 800d6ac:	00000000 	.word	0x00000000
 800d6b0:	0800d409 	.word	0x0800d409
 800d6b4:	0810ccb6 	.word	0x0810ccb6

0800d6b8 <_printf_common>:
 800d6b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d6bc:	4616      	mov	r6, r2
 800d6be:	4698      	mov	r8, r3
 800d6c0:	688a      	ldr	r2, [r1, #8]
 800d6c2:	690b      	ldr	r3, [r1, #16]
 800d6c4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800d6c8:	4293      	cmp	r3, r2
 800d6ca:	bfb8      	it	lt
 800d6cc:	4613      	movlt	r3, r2
 800d6ce:	6033      	str	r3, [r6, #0]
 800d6d0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800d6d4:	4607      	mov	r7, r0
 800d6d6:	460c      	mov	r4, r1
 800d6d8:	b10a      	cbz	r2, 800d6de <_printf_common+0x26>
 800d6da:	3301      	adds	r3, #1
 800d6dc:	6033      	str	r3, [r6, #0]
 800d6de:	6823      	ldr	r3, [r4, #0]
 800d6e0:	0699      	lsls	r1, r3, #26
 800d6e2:	bf42      	ittt	mi
 800d6e4:	6833      	ldrmi	r3, [r6, #0]
 800d6e6:	3302      	addmi	r3, #2
 800d6e8:	6033      	strmi	r3, [r6, #0]
 800d6ea:	6825      	ldr	r5, [r4, #0]
 800d6ec:	f015 0506 	ands.w	r5, r5, #6
 800d6f0:	d106      	bne.n	800d700 <_printf_common+0x48>
 800d6f2:	f104 0a19 	add.w	sl, r4, #25
 800d6f6:	68e3      	ldr	r3, [r4, #12]
 800d6f8:	6832      	ldr	r2, [r6, #0]
 800d6fa:	1a9b      	subs	r3, r3, r2
 800d6fc:	42ab      	cmp	r3, r5
 800d6fe:	dc26      	bgt.n	800d74e <_printf_common+0x96>
 800d700:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800d704:	6822      	ldr	r2, [r4, #0]
 800d706:	3b00      	subs	r3, #0
 800d708:	bf18      	it	ne
 800d70a:	2301      	movne	r3, #1
 800d70c:	0692      	lsls	r2, r2, #26
 800d70e:	d42b      	bmi.n	800d768 <_printf_common+0xb0>
 800d710:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800d714:	4641      	mov	r1, r8
 800d716:	4638      	mov	r0, r7
 800d718:	47c8      	blx	r9
 800d71a:	3001      	adds	r0, #1
 800d71c:	d01e      	beq.n	800d75c <_printf_common+0xa4>
 800d71e:	6823      	ldr	r3, [r4, #0]
 800d720:	6922      	ldr	r2, [r4, #16]
 800d722:	f003 0306 	and.w	r3, r3, #6
 800d726:	2b04      	cmp	r3, #4
 800d728:	bf02      	ittt	eq
 800d72a:	68e5      	ldreq	r5, [r4, #12]
 800d72c:	6833      	ldreq	r3, [r6, #0]
 800d72e:	1aed      	subeq	r5, r5, r3
 800d730:	68a3      	ldr	r3, [r4, #8]
 800d732:	bf0c      	ite	eq
 800d734:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d738:	2500      	movne	r5, #0
 800d73a:	4293      	cmp	r3, r2
 800d73c:	bfc4      	itt	gt
 800d73e:	1a9b      	subgt	r3, r3, r2
 800d740:	18ed      	addgt	r5, r5, r3
 800d742:	2600      	movs	r6, #0
 800d744:	341a      	adds	r4, #26
 800d746:	42b5      	cmp	r5, r6
 800d748:	d11a      	bne.n	800d780 <_printf_common+0xc8>
 800d74a:	2000      	movs	r0, #0
 800d74c:	e008      	b.n	800d760 <_printf_common+0xa8>
 800d74e:	2301      	movs	r3, #1
 800d750:	4652      	mov	r2, sl
 800d752:	4641      	mov	r1, r8
 800d754:	4638      	mov	r0, r7
 800d756:	47c8      	blx	r9
 800d758:	3001      	adds	r0, #1
 800d75a:	d103      	bne.n	800d764 <_printf_common+0xac>
 800d75c:	f04f 30ff 	mov.w	r0, #4294967295
 800d760:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d764:	3501      	adds	r5, #1
 800d766:	e7c6      	b.n	800d6f6 <_printf_common+0x3e>
 800d768:	18e1      	adds	r1, r4, r3
 800d76a:	1c5a      	adds	r2, r3, #1
 800d76c:	2030      	movs	r0, #48	@ 0x30
 800d76e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800d772:	4422      	add	r2, r4
 800d774:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800d778:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800d77c:	3302      	adds	r3, #2
 800d77e:	e7c7      	b.n	800d710 <_printf_common+0x58>
 800d780:	2301      	movs	r3, #1
 800d782:	4622      	mov	r2, r4
 800d784:	4641      	mov	r1, r8
 800d786:	4638      	mov	r0, r7
 800d788:	47c8      	blx	r9
 800d78a:	3001      	adds	r0, #1
 800d78c:	d0e6      	beq.n	800d75c <_printf_common+0xa4>
 800d78e:	3601      	adds	r6, #1
 800d790:	e7d9      	b.n	800d746 <_printf_common+0x8e>
	...

0800d794 <_printf_i>:
 800d794:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d798:	7e0f      	ldrb	r7, [r1, #24]
 800d79a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800d79c:	2f78      	cmp	r7, #120	@ 0x78
 800d79e:	4691      	mov	r9, r2
 800d7a0:	4680      	mov	r8, r0
 800d7a2:	460c      	mov	r4, r1
 800d7a4:	469a      	mov	sl, r3
 800d7a6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800d7aa:	d807      	bhi.n	800d7bc <_printf_i+0x28>
 800d7ac:	2f62      	cmp	r7, #98	@ 0x62
 800d7ae:	d80a      	bhi.n	800d7c6 <_printf_i+0x32>
 800d7b0:	2f00      	cmp	r7, #0
 800d7b2:	f000 80d2 	beq.w	800d95a <_printf_i+0x1c6>
 800d7b6:	2f58      	cmp	r7, #88	@ 0x58
 800d7b8:	f000 80b9 	beq.w	800d92e <_printf_i+0x19a>
 800d7bc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800d7c0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800d7c4:	e03a      	b.n	800d83c <_printf_i+0xa8>
 800d7c6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800d7ca:	2b15      	cmp	r3, #21
 800d7cc:	d8f6      	bhi.n	800d7bc <_printf_i+0x28>
 800d7ce:	a101      	add	r1, pc, #4	@ (adr r1, 800d7d4 <_printf_i+0x40>)
 800d7d0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d7d4:	0800d82d 	.word	0x0800d82d
 800d7d8:	0800d841 	.word	0x0800d841
 800d7dc:	0800d7bd 	.word	0x0800d7bd
 800d7e0:	0800d7bd 	.word	0x0800d7bd
 800d7e4:	0800d7bd 	.word	0x0800d7bd
 800d7e8:	0800d7bd 	.word	0x0800d7bd
 800d7ec:	0800d841 	.word	0x0800d841
 800d7f0:	0800d7bd 	.word	0x0800d7bd
 800d7f4:	0800d7bd 	.word	0x0800d7bd
 800d7f8:	0800d7bd 	.word	0x0800d7bd
 800d7fc:	0800d7bd 	.word	0x0800d7bd
 800d800:	0800d941 	.word	0x0800d941
 800d804:	0800d86b 	.word	0x0800d86b
 800d808:	0800d8fb 	.word	0x0800d8fb
 800d80c:	0800d7bd 	.word	0x0800d7bd
 800d810:	0800d7bd 	.word	0x0800d7bd
 800d814:	0800d963 	.word	0x0800d963
 800d818:	0800d7bd 	.word	0x0800d7bd
 800d81c:	0800d86b 	.word	0x0800d86b
 800d820:	0800d7bd 	.word	0x0800d7bd
 800d824:	0800d7bd 	.word	0x0800d7bd
 800d828:	0800d903 	.word	0x0800d903
 800d82c:	6833      	ldr	r3, [r6, #0]
 800d82e:	1d1a      	adds	r2, r3, #4
 800d830:	681b      	ldr	r3, [r3, #0]
 800d832:	6032      	str	r2, [r6, #0]
 800d834:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800d838:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800d83c:	2301      	movs	r3, #1
 800d83e:	e09d      	b.n	800d97c <_printf_i+0x1e8>
 800d840:	6833      	ldr	r3, [r6, #0]
 800d842:	6820      	ldr	r0, [r4, #0]
 800d844:	1d19      	adds	r1, r3, #4
 800d846:	6031      	str	r1, [r6, #0]
 800d848:	0606      	lsls	r6, r0, #24
 800d84a:	d501      	bpl.n	800d850 <_printf_i+0xbc>
 800d84c:	681d      	ldr	r5, [r3, #0]
 800d84e:	e003      	b.n	800d858 <_printf_i+0xc4>
 800d850:	0645      	lsls	r5, r0, #25
 800d852:	d5fb      	bpl.n	800d84c <_printf_i+0xb8>
 800d854:	f9b3 5000 	ldrsh.w	r5, [r3]
 800d858:	2d00      	cmp	r5, #0
 800d85a:	da03      	bge.n	800d864 <_printf_i+0xd0>
 800d85c:	232d      	movs	r3, #45	@ 0x2d
 800d85e:	426d      	negs	r5, r5
 800d860:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d864:	4859      	ldr	r0, [pc, #356]	@ (800d9cc <_printf_i+0x238>)
 800d866:	230a      	movs	r3, #10
 800d868:	e011      	b.n	800d88e <_printf_i+0xfa>
 800d86a:	6821      	ldr	r1, [r4, #0]
 800d86c:	6833      	ldr	r3, [r6, #0]
 800d86e:	0608      	lsls	r0, r1, #24
 800d870:	f853 5b04 	ldr.w	r5, [r3], #4
 800d874:	d402      	bmi.n	800d87c <_printf_i+0xe8>
 800d876:	0649      	lsls	r1, r1, #25
 800d878:	bf48      	it	mi
 800d87a:	b2ad      	uxthmi	r5, r5
 800d87c:	2f6f      	cmp	r7, #111	@ 0x6f
 800d87e:	4853      	ldr	r0, [pc, #332]	@ (800d9cc <_printf_i+0x238>)
 800d880:	6033      	str	r3, [r6, #0]
 800d882:	bf14      	ite	ne
 800d884:	230a      	movne	r3, #10
 800d886:	2308      	moveq	r3, #8
 800d888:	2100      	movs	r1, #0
 800d88a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800d88e:	6866      	ldr	r6, [r4, #4]
 800d890:	60a6      	str	r6, [r4, #8]
 800d892:	2e00      	cmp	r6, #0
 800d894:	bfa2      	ittt	ge
 800d896:	6821      	ldrge	r1, [r4, #0]
 800d898:	f021 0104 	bicge.w	r1, r1, #4
 800d89c:	6021      	strge	r1, [r4, #0]
 800d89e:	b90d      	cbnz	r5, 800d8a4 <_printf_i+0x110>
 800d8a0:	2e00      	cmp	r6, #0
 800d8a2:	d04b      	beq.n	800d93c <_printf_i+0x1a8>
 800d8a4:	4616      	mov	r6, r2
 800d8a6:	fbb5 f1f3 	udiv	r1, r5, r3
 800d8aa:	fb03 5711 	mls	r7, r3, r1, r5
 800d8ae:	5dc7      	ldrb	r7, [r0, r7]
 800d8b0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800d8b4:	462f      	mov	r7, r5
 800d8b6:	42bb      	cmp	r3, r7
 800d8b8:	460d      	mov	r5, r1
 800d8ba:	d9f4      	bls.n	800d8a6 <_printf_i+0x112>
 800d8bc:	2b08      	cmp	r3, #8
 800d8be:	d10b      	bne.n	800d8d8 <_printf_i+0x144>
 800d8c0:	6823      	ldr	r3, [r4, #0]
 800d8c2:	07df      	lsls	r7, r3, #31
 800d8c4:	d508      	bpl.n	800d8d8 <_printf_i+0x144>
 800d8c6:	6923      	ldr	r3, [r4, #16]
 800d8c8:	6861      	ldr	r1, [r4, #4]
 800d8ca:	4299      	cmp	r1, r3
 800d8cc:	bfde      	ittt	le
 800d8ce:	2330      	movle	r3, #48	@ 0x30
 800d8d0:	f806 3c01 	strble.w	r3, [r6, #-1]
 800d8d4:	f106 36ff 	addle.w	r6, r6, #4294967295
 800d8d8:	1b92      	subs	r2, r2, r6
 800d8da:	6122      	str	r2, [r4, #16]
 800d8dc:	f8cd a000 	str.w	sl, [sp]
 800d8e0:	464b      	mov	r3, r9
 800d8e2:	aa03      	add	r2, sp, #12
 800d8e4:	4621      	mov	r1, r4
 800d8e6:	4640      	mov	r0, r8
 800d8e8:	f7ff fee6 	bl	800d6b8 <_printf_common>
 800d8ec:	3001      	adds	r0, #1
 800d8ee:	d14a      	bne.n	800d986 <_printf_i+0x1f2>
 800d8f0:	f04f 30ff 	mov.w	r0, #4294967295
 800d8f4:	b004      	add	sp, #16
 800d8f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d8fa:	6823      	ldr	r3, [r4, #0]
 800d8fc:	f043 0320 	orr.w	r3, r3, #32
 800d900:	6023      	str	r3, [r4, #0]
 800d902:	4833      	ldr	r0, [pc, #204]	@ (800d9d0 <_printf_i+0x23c>)
 800d904:	2778      	movs	r7, #120	@ 0x78
 800d906:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800d90a:	6823      	ldr	r3, [r4, #0]
 800d90c:	6831      	ldr	r1, [r6, #0]
 800d90e:	061f      	lsls	r7, r3, #24
 800d910:	f851 5b04 	ldr.w	r5, [r1], #4
 800d914:	d402      	bmi.n	800d91c <_printf_i+0x188>
 800d916:	065f      	lsls	r7, r3, #25
 800d918:	bf48      	it	mi
 800d91a:	b2ad      	uxthmi	r5, r5
 800d91c:	6031      	str	r1, [r6, #0]
 800d91e:	07d9      	lsls	r1, r3, #31
 800d920:	bf44      	itt	mi
 800d922:	f043 0320 	orrmi.w	r3, r3, #32
 800d926:	6023      	strmi	r3, [r4, #0]
 800d928:	b11d      	cbz	r5, 800d932 <_printf_i+0x19e>
 800d92a:	2310      	movs	r3, #16
 800d92c:	e7ac      	b.n	800d888 <_printf_i+0xf4>
 800d92e:	4827      	ldr	r0, [pc, #156]	@ (800d9cc <_printf_i+0x238>)
 800d930:	e7e9      	b.n	800d906 <_printf_i+0x172>
 800d932:	6823      	ldr	r3, [r4, #0]
 800d934:	f023 0320 	bic.w	r3, r3, #32
 800d938:	6023      	str	r3, [r4, #0]
 800d93a:	e7f6      	b.n	800d92a <_printf_i+0x196>
 800d93c:	4616      	mov	r6, r2
 800d93e:	e7bd      	b.n	800d8bc <_printf_i+0x128>
 800d940:	6833      	ldr	r3, [r6, #0]
 800d942:	6825      	ldr	r5, [r4, #0]
 800d944:	6961      	ldr	r1, [r4, #20]
 800d946:	1d18      	adds	r0, r3, #4
 800d948:	6030      	str	r0, [r6, #0]
 800d94a:	062e      	lsls	r6, r5, #24
 800d94c:	681b      	ldr	r3, [r3, #0]
 800d94e:	d501      	bpl.n	800d954 <_printf_i+0x1c0>
 800d950:	6019      	str	r1, [r3, #0]
 800d952:	e002      	b.n	800d95a <_printf_i+0x1c6>
 800d954:	0668      	lsls	r0, r5, #25
 800d956:	d5fb      	bpl.n	800d950 <_printf_i+0x1bc>
 800d958:	8019      	strh	r1, [r3, #0]
 800d95a:	2300      	movs	r3, #0
 800d95c:	6123      	str	r3, [r4, #16]
 800d95e:	4616      	mov	r6, r2
 800d960:	e7bc      	b.n	800d8dc <_printf_i+0x148>
 800d962:	6833      	ldr	r3, [r6, #0]
 800d964:	1d1a      	adds	r2, r3, #4
 800d966:	6032      	str	r2, [r6, #0]
 800d968:	681e      	ldr	r6, [r3, #0]
 800d96a:	6862      	ldr	r2, [r4, #4]
 800d96c:	2100      	movs	r1, #0
 800d96e:	4630      	mov	r0, r6
 800d970:	f7f2 fc4e 	bl	8000210 <memchr>
 800d974:	b108      	cbz	r0, 800d97a <_printf_i+0x1e6>
 800d976:	1b80      	subs	r0, r0, r6
 800d978:	6060      	str	r0, [r4, #4]
 800d97a:	6863      	ldr	r3, [r4, #4]
 800d97c:	6123      	str	r3, [r4, #16]
 800d97e:	2300      	movs	r3, #0
 800d980:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d984:	e7aa      	b.n	800d8dc <_printf_i+0x148>
 800d986:	6923      	ldr	r3, [r4, #16]
 800d988:	4632      	mov	r2, r6
 800d98a:	4649      	mov	r1, r9
 800d98c:	4640      	mov	r0, r8
 800d98e:	47d0      	blx	sl
 800d990:	3001      	adds	r0, #1
 800d992:	d0ad      	beq.n	800d8f0 <_printf_i+0x15c>
 800d994:	6823      	ldr	r3, [r4, #0]
 800d996:	079b      	lsls	r3, r3, #30
 800d998:	d413      	bmi.n	800d9c2 <_printf_i+0x22e>
 800d99a:	68e0      	ldr	r0, [r4, #12]
 800d99c:	9b03      	ldr	r3, [sp, #12]
 800d99e:	4298      	cmp	r0, r3
 800d9a0:	bfb8      	it	lt
 800d9a2:	4618      	movlt	r0, r3
 800d9a4:	e7a6      	b.n	800d8f4 <_printf_i+0x160>
 800d9a6:	2301      	movs	r3, #1
 800d9a8:	4632      	mov	r2, r6
 800d9aa:	4649      	mov	r1, r9
 800d9ac:	4640      	mov	r0, r8
 800d9ae:	47d0      	blx	sl
 800d9b0:	3001      	adds	r0, #1
 800d9b2:	d09d      	beq.n	800d8f0 <_printf_i+0x15c>
 800d9b4:	3501      	adds	r5, #1
 800d9b6:	68e3      	ldr	r3, [r4, #12]
 800d9b8:	9903      	ldr	r1, [sp, #12]
 800d9ba:	1a5b      	subs	r3, r3, r1
 800d9bc:	42ab      	cmp	r3, r5
 800d9be:	dcf2      	bgt.n	800d9a6 <_printf_i+0x212>
 800d9c0:	e7eb      	b.n	800d99a <_printf_i+0x206>
 800d9c2:	2500      	movs	r5, #0
 800d9c4:	f104 0619 	add.w	r6, r4, #25
 800d9c8:	e7f5      	b.n	800d9b6 <_printf_i+0x222>
 800d9ca:	bf00      	nop
 800d9cc:	0810ccc1 	.word	0x0810ccc1
 800d9d0:	0810ccd2 	.word	0x0810ccd2

0800d9d4 <memmove>:
 800d9d4:	4288      	cmp	r0, r1
 800d9d6:	b510      	push	{r4, lr}
 800d9d8:	eb01 0402 	add.w	r4, r1, r2
 800d9dc:	d902      	bls.n	800d9e4 <memmove+0x10>
 800d9de:	4284      	cmp	r4, r0
 800d9e0:	4623      	mov	r3, r4
 800d9e2:	d807      	bhi.n	800d9f4 <memmove+0x20>
 800d9e4:	1e43      	subs	r3, r0, #1
 800d9e6:	42a1      	cmp	r1, r4
 800d9e8:	d008      	beq.n	800d9fc <memmove+0x28>
 800d9ea:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d9ee:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d9f2:	e7f8      	b.n	800d9e6 <memmove+0x12>
 800d9f4:	4402      	add	r2, r0
 800d9f6:	4601      	mov	r1, r0
 800d9f8:	428a      	cmp	r2, r1
 800d9fa:	d100      	bne.n	800d9fe <memmove+0x2a>
 800d9fc:	bd10      	pop	{r4, pc}
 800d9fe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800da02:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800da06:	e7f7      	b.n	800d9f8 <memmove+0x24>

0800da08 <_init>:
 800da08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800da0a:	bf00      	nop
 800da0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800da0e:	bc08      	pop	{r3}
 800da10:	469e      	mov	lr, r3
 800da12:	4770      	bx	lr

0800da14 <_fini>:
 800da14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800da16:	bf00      	nop
 800da18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800da1a:	bc08      	pop	{r3}
 800da1c:	469e      	mov	lr, r3
 800da1e:	4770      	bx	lr
